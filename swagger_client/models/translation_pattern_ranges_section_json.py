# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TranslationPatternRangesSectionJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_selects': 'list[CustomSelectJson]',
        'translation_pattern_ranges': 'list[DnDidRangeJson]'
    }

    attribute_map = {
        'custom_selects': 'customSelects',
        'translation_pattern_ranges': 'translationPatternRanges'
    }

    def __init__(self, custom_selects=None, translation_pattern_ranges=None):  # noqa: E501
        """TranslationPatternRangesSectionJson - a model defined in Swagger"""  # noqa: E501
        self._custom_selects = None
        self._translation_pattern_ranges = None
        self.discriminator = None
        if custom_selects is not None:
            self.custom_selects = custom_selects
        if translation_pattern_ranges is not None:
            self.translation_pattern_ranges = translation_pattern_ranges

    @property
    def custom_selects(self):
        """Gets the custom_selects of this TranslationPatternRangesSectionJson.  # noqa: E501


        :return: The custom_selects of this TranslationPatternRangesSectionJson.  # noqa: E501
        :rtype: list[CustomSelectJson]
        """
        return self._custom_selects

    @custom_selects.setter
    def custom_selects(self, custom_selects):
        """Sets the custom_selects of this TranslationPatternRangesSectionJson.


        :param custom_selects: The custom_selects of this TranslationPatternRangesSectionJson.  # noqa: E501
        :type: list[CustomSelectJson]
        """

        self._custom_selects = custom_selects

    @property
    def translation_pattern_ranges(self):
        """Gets the translation_pattern_ranges of this TranslationPatternRangesSectionJson.  # noqa: E501


        :return: The translation_pattern_ranges of this TranslationPatternRangesSectionJson.  # noqa: E501
        :rtype: list[DnDidRangeJson]
        """
        return self._translation_pattern_ranges

    @translation_pattern_ranges.setter
    def translation_pattern_ranges(self, translation_pattern_ranges):
        """Sets the translation_pattern_ranges of this TranslationPatternRangesSectionJson.


        :param translation_pattern_ranges: The translation_pattern_ranges of this TranslationPatternRangesSectionJson.  # noqa: E501
        :type: list[DnDidRangeJson]
        """

        self._translation_pattern_ranges = translation_pattern_ranges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TranslationPatternRangesSectionJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TranslationPatternRangesSectionJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
