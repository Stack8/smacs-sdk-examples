# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DirectoryNumberJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'extension': 'str',
        'route_partition': 'str',
        'description': 'str',
        'class_of_service': 'str',
        'alerting_name': 'str',
        'urgent_priority': 'bool',
        'voicemail_profile': 'str',
        'call_pick_up_group_name': 'str',
        'forward_all': 'CallForwardJson',
        'secondary_class_of_service_for_forward_all': 'str',
        'forward_busy_internal': 'CallForwardJson',
        'forward_busy_external': 'CallForwardJson',
        'forward_no_answer_internal': 'CallForwardJson',
        'forward_no_answer_external': 'CallForwardJson',
        'no_answer_ring_duration': 'str',
        'forward_no_coverage_internal': 'CallForwardJson',
        'forward_no_coverage_external': 'CallForwardJson',
        'forward_on_cti_failure': 'CallForwardJson',
        'forward_unregistered_internal': 'CallForwardJson',
        'forward_unregistered_external': 'CallForwardJson',
        'enterprise_alternate_number': 'IlsAlternateNumberJson',
        'e164_alternate_number': 'IlsAlternateNumberJson',
        'pstn_failover': 'str',
        'line_groups': 'list[str]',
        'auto_answer': 'str'
    }

    attribute_map = {
        'id': 'id',
        'extension': 'extension',
        'route_partition': 'routePartition',
        'description': 'description',
        'class_of_service': 'classOfService',
        'alerting_name': 'alertingName',
        'urgent_priority': 'urgentPriority',
        'voicemail_profile': 'voicemailProfile',
        'call_pick_up_group_name': 'callPickUpGroupName',
        'forward_all': 'forwardAll',
        'secondary_class_of_service_for_forward_all': 'secondaryClassOfServiceForForwardAll',
        'forward_busy_internal': 'forwardBusyInternal',
        'forward_busy_external': 'forwardBusyExternal',
        'forward_no_answer_internal': 'forwardNoAnswerInternal',
        'forward_no_answer_external': 'forwardNoAnswerExternal',
        'no_answer_ring_duration': 'noAnswerRingDuration',
        'forward_no_coverage_internal': 'forwardNoCoverageInternal',
        'forward_no_coverage_external': 'forwardNoCoverageExternal',
        'forward_on_cti_failure': 'forwardOnCtiFailure',
        'forward_unregistered_internal': 'forwardUnregisteredInternal',
        'forward_unregistered_external': 'forwardUnregisteredExternal',
        'enterprise_alternate_number': 'enterpriseAlternateNumber',
        'e164_alternate_number': 'e164AlternateNumber',
        'pstn_failover': 'pstnFailover',
        'line_groups': 'lineGroups',
        'auto_answer': 'autoAnswer'
    }

    def __init__(self, id=None, extension=None, route_partition=None, description=None, class_of_service=None, alerting_name=None, urgent_priority=None, voicemail_profile=None, call_pick_up_group_name=None, forward_all=None, secondary_class_of_service_for_forward_all=None, forward_busy_internal=None, forward_busy_external=None, forward_no_answer_internal=None, forward_no_answer_external=None, no_answer_ring_duration=None, forward_no_coverage_internal=None, forward_no_coverage_external=None, forward_on_cti_failure=None, forward_unregistered_internal=None, forward_unregistered_external=None, enterprise_alternate_number=None, e164_alternate_number=None, pstn_failover=None, line_groups=None, auto_answer=None):  # noqa: E501
        """DirectoryNumberJson - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._extension = None
        self._route_partition = None
        self._description = None
        self._class_of_service = None
        self._alerting_name = None
        self._urgent_priority = None
        self._voicemail_profile = None
        self._call_pick_up_group_name = None
        self._forward_all = None
        self._secondary_class_of_service_for_forward_all = None
        self._forward_busy_internal = None
        self._forward_busy_external = None
        self._forward_no_answer_internal = None
        self._forward_no_answer_external = None
        self._no_answer_ring_duration = None
        self._forward_no_coverage_internal = None
        self._forward_no_coverage_external = None
        self._forward_on_cti_failure = None
        self._forward_unregistered_internal = None
        self._forward_unregistered_external = None
        self._enterprise_alternate_number = None
        self._e164_alternate_number = None
        self._pstn_failover = None
        self._line_groups = None
        self._auto_answer = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.extension = extension
        self.route_partition = route_partition
        self.description = description
        self.class_of_service = class_of_service
        self.alerting_name = alerting_name
        self.urgent_priority = urgent_priority
        self.voicemail_profile = voicemail_profile
        self.call_pick_up_group_name = call_pick_up_group_name
        self.forward_all = forward_all
        self.secondary_class_of_service_for_forward_all = secondary_class_of_service_for_forward_all
        self.forward_busy_internal = forward_busy_internal
        self.forward_busy_external = forward_busy_external
        self.forward_no_answer_internal = forward_no_answer_internal
        self.forward_no_answer_external = forward_no_answer_external
        self.no_answer_ring_duration = no_answer_ring_duration
        self.forward_no_coverage_internal = forward_no_coverage_internal
        self.forward_no_coverage_external = forward_no_coverage_external
        self.forward_on_cti_failure = forward_on_cti_failure
        self.forward_unregistered_internal = forward_unregistered_internal
        self.forward_unregistered_external = forward_unregistered_external
        self.enterprise_alternate_number = enterprise_alternate_number
        self.e164_alternate_number = e164_alternate_number
        self.pstn_failover = pstn_failover
        self.line_groups = line_groups
        self.auto_answer = auto_answer

    @property
    def id(self):
        """Gets the id of this DirectoryNumberJson.  # noqa: E501


        :return: The id of this DirectoryNumberJson.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DirectoryNumberJson.


        :param id: The id of this DirectoryNumberJson.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def extension(self):
        """Gets the extension of this DirectoryNumberJson.  # noqa: E501


        :return: The extension of this DirectoryNumberJson.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this DirectoryNumberJson.


        :param extension: The extension of this DirectoryNumberJson.  # noqa: E501
        :type: str
        """
        if extension is None:
            raise ValueError("Invalid value for `extension`, must not be `None`")  # noqa: E501

        self._extension = extension

    @property
    def route_partition(self):
        """Gets the route_partition of this DirectoryNumberJson.  # noqa: E501


        :return: The route_partition of this DirectoryNumberJson.  # noqa: E501
        :rtype: str
        """
        return self._route_partition

    @route_partition.setter
    def route_partition(self, route_partition):
        """Sets the route_partition of this DirectoryNumberJson.


        :param route_partition: The route_partition of this DirectoryNumberJson.  # noqa: E501
        :type: str
        """
        if route_partition is None:
            raise ValueError("Invalid value for `route_partition`, must not be `None`")  # noqa: E501

        self._route_partition = route_partition

    @property
    def description(self):
        """Gets the description of this DirectoryNumberJson.  # noqa: E501


        :return: The description of this DirectoryNumberJson.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DirectoryNumberJson.


        :param description: The description of this DirectoryNumberJson.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def class_of_service(self):
        """Gets the class_of_service of this DirectoryNumberJson.  # noqa: E501


        :return: The class_of_service of this DirectoryNumberJson.  # noqa: E501
        :rtype: str
        """
        return self._class_of_service

    @class_of_service.setter
    def class_of_service(self, class_of_service):
        """Sets the class_of_service of this DirectoryNumberJson.


        :param class_of_service: The class_of_service of this DirectoryNumberJson.  # noqa: E501
        :type: str
        """
        if class_of_service is None:
            raise ValueError("Invalid value for `class_of_service`, must not be `None`")  # noqa: E501

        self._class_of_service = class_of_service

    @property
    def alerting_name(self):
        """Gets the alerting_name of this DirectoryNumberJson.  # noqa: E501


        :return: The alerting_name of this DirectoryNumberJson.  # noqa: E501
        :rtype: str
        """
        return self._alerting_name

    @alerting_name.setter
    def alerting_name(self, alerting_name):
        """Sets the alerting_name of this DirectoryNumberJson.


        :param alerting_name: The alerting_name of this DirectoryNumberJson.  # noqa: E501
        :type: str
        """
        if alerting_name is None:
            raise ValueError("Invalid value for `alerting_name`, must not be `None`")  # noqa: E501

        self._alerting_name = alerting_name

    @property
    def urgent_priority(self):
        """Gets the urgent_priority of this DirectoryNumberJson.  # noqa: E501


        :return: The urgent_priority of this DirectoryNumberJson.  # noqa: E501
        :rtype: bool
        """
        return self._urgent_priority

    @urgent_priority.setter
    def urgent_priority(self, urgent_priority):
        """Sets the urgent_priority of this DirectoryNumberJson.


        :param urgent_priority: The urgent_priority of this DirectoryNumberJson.  # noqa: E501
        :type: bool
        """
        if urgent_priority is None:
            raise ValueError("Invalid value for `urgent_priority`, must not be `None`")  # noqa: E501

        self._urgent_priority = urgent_priority

    @property
    def voicemail_profile(self):
        """Gets the voicemail_profile of this DirectoryNumberJson.  # noqa: E501


        :return: The voicemail_profile of this DirectoryNumberJson.  # noqa: E501
        :rtype: str
        """
        return self._voicemail_profile

    @voicemail_profile.setter
    def voicemail_profile(self, voicemail_profile):
        """Sets the voicemail_profile of this DirectoryNumberJson.


        :param voicemail_profile: The voicemail_profile of this DirectoryNumberJson.  # noqa: E501
        :type: str
        """
        if voicemail_profile is None:
            raise ValueError("Invalid value for `voicemail_profile`, must not be `None`")  # noqa: E501

        self._voicemail_profile = voicemail_profile

    @property
    def call_pick_up_group_name(self):
        """Gets the call_pick_up_group_name of this DirectoryNumberJson.  # noqa: E501


        :return: The call_pick_up_group_name of this DirectoryNumberJson.  # noqa: E501
        :rtype: str
        """
        return self._call_pick_up_group_name

    @call_pick_up_group_name.setter
    def call_pick_up_group_name(self, call_pick_up_group_name):
        """Sets the call_pick_up_group_name of this DirectoryNumberJson.


        :param call_pick_up_group_name: The call_pick_up_group_name of this DirectoryNumberJson.  # noqa: E501
        :type: str
        """
        if call_pick_up_group_name is None:
            raise ValueError("Invalid value for `call_pick_up_group_name`, must not be `None`")  # noqa: E501

        self._call_pick_up_group_name = call_pick_up_group_name

    @property
    def forward_all(self):
        """Gets the forward_all of this DirectoryNumberJson.  # noqa: E501


        :return: The forward_all of this DirectoryNumberJson.  # noqa: E501
        :rtype: CallForwardJson
        """
        return self._forward_all

    @forward_all.setter
    def forward_all(self, forward_all):
        """Sets the forward_all of this DirectoryNumberJson.


        :param forward_all: The forward_all of this DirectoryNumberJson.  # noqa: E501
        :type: CallForwardJson
        """
        if forward_all is None:
            raise ValueError("Invalid value for `forward_all`, must not be `None`")  # noqa: E501

        self._forward_all = forward_all

    @property
    def secondary_class_of_service_for_forward_all(self):
        """Gets the secondary_class_of_service_for_forward_all of this DirectoryNumberJson.  # noqa: E501


        :return: The secondary_class_of_service_for_forward_all of this DirectoryNumberJson.  # noqa: E501
        :rtype: str
        """
        return self._secondary_class_of_service_for_forward_all

    @secondary_class_of_service_for_forward_all.setter
    def secondary_class_of_service_for_forward_all(self, secondary_class_of_service_for_forward_all):
        """Sets the secondary_class_of_service_for_forward_all of this DirectoryNumberJson.


        :param secondary_class_of_service_for_forward_all: The secondary_class_of_service_for_forward_all of this DirectoryNumberJson.  # noqa: E501
        :type: str
        """
        if secondary_class_of_service_for_forward_all is None:
            raise ValueError("Invalid value for `secondary_class_of_service_for_forward_all`, must not be `None`")  # noqa: E501

        self._secondary_class_of_service_for_forward_all = secondary_class_of_service_for_forward_all

    @property
    def forward_busy_internal(self):
        """Gets the forward_busy_internal of this DirectoryNumberJson.  # noqa: E501


        :return: The forward_busy_internal of this DirectoryNumberJson.  # noqa: E501
        :rtype: CallForwardJson
        """
        return self._forward_busy_internal

    @forward_busy_internal.setter
    def forward_busy_internal(self, forward_busy_internal):
        """Sets the forward_busy_internal of this DirectoryNumberJson.


        :param forward_busy_internal: The forward_busy_internal of this DirectoryNumberJson.  # noqa: E501
        :type: CallForwardJson
        """
        if forward_busy_internal is None:
            raise ValueError("Invalid value for `forward_busy_internal`, must not be `None`")  # noqa: E501

        self._forward_busy_internal = forward_busy_internal

    @property
    def forward_busy_external(self):
        """Gets the forward_busy_external of this DirectoryNumberJson.  # noqa: E501


        :return: The forward_busy_external of this DirectoryNumberJson.  # noqa: E501
        :rtype: CallForwardJson
        """
        return self._forward_busy_external

    @forward_busy_external.setter
    def forward_busy_external(self, forward_busy_external):
        """Sets the forward_busy_external of this DirectoryNumberJson.


        :param forward_busy_external: The forward_busy_external of this DirectoryNumberJson.  # noqa: E501
        :type: CallForwardJson
        """
        if forward_busy_external is None:
            raise ValueError("Invalid value for `forward_busy_external`, must not be `None`")  # noqa: E501

        self._forward_busy_external = forward_busy_external

    @property
    def forward_no_answer_internal(self):
        """Gets the forward_no_answer_internal of this DirectoryNumberJson.  # noqa: E501


        :return: The forward_no_answer_internal of this DirectoryNumberJson.  # noqa: E501
        :rtype: CallForwardJson
        """
        return self._forward_no_answer_internal

    @forward_no_answer_internal.setter
    def forward_no_answer_internal(self, forward_no_answer_internal):
        """Sets the forward_no_answer_internal of this DirectoryNumberJson.


        :param forward_no_answer_internal: The forward_no_answer_internal of this DirectoryNumberJson.  # noqa: E501
        :type: CallForwardJson
        """
        if forward_no_answer_internal is None:
            raise ValueError("Invalid value for `forward_no_answer_internal`, must not be `None`")  # noqa: E501

        self._forward_no_answer_internal = forward_no_answer_internal

    @property
    def forward_no_answer_external(self):
        """Gets the forward_no_answer_external of this DirectoryNumberJson.  # noqa: E501


        :return: The forward_no_answer_external of this DirectoryNumberJson.  # noqa: E501
        :rtype: CallForwardJson
        """
        return self._forward_no_answer_external

    @forward_no_answer_external.setter
    def forward_no_answer_external(self, forward_no_answer_external):
        """Sets the forward_no_answer_external of this DirectoryNumberJson.


        :param forward_no_answer_external: The forward_no_answer_external of this DirectoryNumberJson.  # noqa: E501
        :type: CallForwardJson
        """
        if forward_no_answer_external is None:
            raise ValueError("Invalid value for `forward_no_answer_external`, must not be `None`")  # noqa: E501

        self._forward_no_answer_external = forward_no_answer_external

    @property
    def no_answer_ring_duration(self):
        """Gets the no_answer_ring_duration of this DirectoryNumberJson.  # noqa: E501


        :return: The no_answer_ring_duration of this DirectoryNumberJson.  # noqa: E501
        :rtype: str
        """
        return self._no_answer_ring_duration

    @no_answer_ring_duration.setter
    def no_answer_ring_duration(self, no_answer_ring_duration):
        """Sets the no_answer_ring_duration of this DirectoryNumberJson.


        :param no_answer_ring_duration: The no_answer_ring_duration of this DirectoryNumberJson.  # noqa: E501
        :type: str
        """
        if no_answer_ring_duration is None:
            raise ValueError("Invalid value for `no_answer_ring_duration`, must not be `None`")  # noqa: E501

        self._no_answer_ring_duration = no_answer_ring_duration

    @property
    def forward_no_coverage_internal(self):
        """Gets the forward_no_coverage_internal of this DirectoryNumberJson.  # noqa: E501


        :return: The forward_no_coverage_internal of this DirectoryNumberJson.  # noqa: E501
        :rtype: CallForwardJson
        """
        return self._forward_no_coverage_internal

    @forward_no_coverage_internal.setter
    def forward_no_coverage_internal(self, forward_no_coverage_internal):
        """Sets the forward_no_coverage_internal of this DirectoryNumberJson.


        :param forward_no_coverage_internal: The forward_no_coverage_internal of this DirectoryNumberJson.  # noqa: E501
        :type: CallForwardJson
        """
        if forward_no_coverage_internal is None:
            raise ValueError("Invalid value for `forward_no_coverage_internal`, must not be `None`")  # noqa: E501

        self._forward_no_coverage_internal = forward_no_coverage_internal

    @property
    def forward_no_coverage_external(self):
        """Gets the forward_no_coverage_external of this DirectoryNumberJson.  # noqa: E501


        :return: The forward_no_coverage_external of this DirectoryNumberJson.  # noqa: E501
        :rtype: CallForwardJson
        """
        return self._forward_no_coverage_external

    @forward_no_coverage_external.setter
    def forward_no_coverage_external(self, forward_no_coverage_external):
        """Sets the forward_no_coverage_external of this DirectoryNumberJson.


        :param forward_no_coverage_external: The forward_no_coverage_external of this DirectoryNumberJson.  # noqa: E501
        :type: CallForwardJson
        """
        if forward_no_coverage_external is None:
            raise ValueError("Invalid value for `forward_no_coverage_external`, must not be `None`")  # noqa: E501

        self._forward_no_coverage_external = forward_no_coverage_external

    @property
    def forward_on_cti_failure(self):
        """Gets the forward_on_cti_failure of this DirectoryNumberJson.  # noqa: E501


        :return: The forward_on_cti_failure of this DirectoryNumberJson.  # noqa: E501
        :rtype: CallForwardJson
        """
        return self._forward_on_cti_failure

    @forward_on_cti_failure.setter
    def forward_on_cti_failure(self, forward_on_cti_failure):
        """Sets the forward_on_cti_failure of this DirectoryNumberJson.


        :param forward_on_cti_failure: The forward_on_cti_failure of this DirectoryNumberJson.  # noqa: E501
        :type: CallForwardJson
        """
        if forward_on_cti_failure is None:
            raise ValueError("Invalid value for `forward_on_cti_failure`, must not be `None`")  # noqa: E501

        self._forward_on_cti_failure = forward_on_cti_failure

    @property
    def forward_unregistered_internal(self):
        """Gets the forward_unregistered_internal of this DirectoryNumberJson.  # noqa: E501


        :return: The forward_unregistered_internal of this DirectoryNumberJson.  # noqa: E501
        :rtype: CallForwardJson
        """
        return self._forward_unregistered_internal

    @forward_unregistered_internal.setter
    def forward_unregistered_internal(self, forward_unregistered_internal):
        """Sets the forward_unregistered_internal of this DirectoryNumberJson.


        :param forward_unregistered_internal: The forward_unregistered_internal of this DirectoryNumberJson.  # noqa: E501
        :type: CallForwardJson
        """
        if forward_unregistered_internal is None:
            raise ValueError("Invalid value for `forward_unregistered_internal`, must not be `None`")  # noqa: E501

        self._forward_unregistered_internal = forward_unregistered_internal

    @property
    def forward_unregistered_external(self):
        """Gets the forward_unregistered_external of this DirectoryNumberJson.  # noqa: E501


        :return: The forward_unregistered_external of this DirectoryNumberJson.  # noqa: E501
        :rtype: CallForwardJson
        """
        return self._forward_unregistered_external

    @forward_unregistered_external.setter
    def forward_unregistered_external(self, forward_unregistered_external):
        """Sets the forward_unregistered_external of this DirectoryNumberJson.


        :param forward_unregistered_external: The forward_unregistered_external of this DirectoryNumberJson.  # noqa: E501
        :type: CallForwardJson
        """
        if forward_unregistered_external is None:
            raise ValueError("Invalid value for `forward_unregistered_external`, must not be `None`")  # noqa: E501

        self._forward_unregistered_external = forward_unregistered_external

    @property
    def enterprise_alternate_number(self):
        """Gets the enterprise_alternate_number of this DirectoryNumberJson.  # noqa: E501


        :return: The enterprise_alternate_number of this DirectoryNumberJson.  # noqa: E501
        :rtype: IlsAlternateNumberJson
        """
        return self._enterprise_alternate_number

    @enterprise_alternate_number.setter
    def enterprise_alternate_number(self, enterprise_alternate_number):
        """Sets the enterprise_alternate_number of this DirectoryNumberJson.


        :param enterprise_alternate_number: The enterprise_alternate_number of this DirectoryNumberJson.  # noqa: E501
        :type: IlsAlternateNumberJson
        """
        if enterprise_alternate_number is None:
            raise ValueError("Invalid value for `enterprise_alternate_number`, must not be `None`")  # noqa: E501

        self._enterprise_alternate_number = enterprise_alternate_number

    @property
    def e164_alternate_number(self):
        """Gets the e164_alternate_number of this DirectoryNumberJson.  # noqa: E501


        :return: The e164_alternate_number of this DirectoryNumberJson.  # noqa: E501
        :rtype: IlsAlternateNumberJson
        """
        return self._e164_alternate_number

    @e164_alternate_number.setter
    def e164_alternate_number(self, e164_alternate_number):
        """Sets the e164_alternate_number of this DirectoryNumberJson.


        :param e164_alternate_number: The e164_alternate_number of this DirectoryNumberJson.  # noqa: E501
        :type: IlsAlternateNumberJson
        """
        if e164_alternate_number is None:
            raise ValueError("Invalid value for `e164_alternate_number`, must not be `None`")  # noqa: E501

        self._e164_alternate_number = e164_alternate_number

    @property
    def pstn_failover(self):
        """Gets the pstn_failover of this DirectoryNumberJson.  # noqa: E501


        :return: The pstn_failover of this DirectoryNumberJson.  # noqa: E501
        :rtype: str
        """
        return self._pstn_failover

    @pstn_failover.setter
    def pstn_failover(self, pstn_failover):
        """Sets the pstn_failover of this DirectoryNumberJson.


        :param pstn_failover: The pstn_failover of this DirectoryNumberJson.  # noqa: E501
        :type: str
        """
        if pstn_failover is None:
            raise ValueError("Invalid value for `pstn_failover`, must not be `None`")  # noqa: E501

        self._pstn_failover = pstn_failover

    @property
    def line_groups(self):
        """Gets the line_groups of this DirectoryNumberJson.  # noqa: E501


        :return: The line_groups of this DirectoryNumberJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._line_groups

    @line_groups.setter
    def line_groups(self, line_groups):
        """Sets the line_groups of this DirectoryNumberJson.


        :param line_groups: The line_groups of this DirectoryNumberJson.  # noqa: E501
        :type: list[str]
        """
        if line_groups is None:
            raise ValueError("Invalid value for `line_groups`, must not be `None`")  # noqa: E501

        self._line_groups = line_groups

    @property
    def auto_answer(self):
        """Gets the auto_answer of this DirectoryNumberJson.  # noqa: E501


        :return: The auto_answer of this DirectoryNumberJson.  # noqa: E501
        :rtype: str
        """
        return self._auto_answer

    @auto_answer.setter
    def auto_answer(self, auto_answer):
        """Sets the auto_answer of this DirectoryNumberJson.


        :param auto_answer: The auto_answer of this DirectoryNumberJson.  # noqa: E501
        :type: str
        """
        if auto_answer is None:
            raise ValueError("Invalid value for `auto_answer`, must not be `None`")  # noqa: E501

        self._auto_answer = auto_answer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryNumberJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryNumberJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
