# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SiteBasedHelpdeskUserPermissionJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'disabled': 'bool',
        'read_access_to_control_enabled': 'bool',
        'authorized_sites': 'list[str]',
        'authorized_clusters': 'list[str]'
    }

    attribute_map = {
        'user_id': 'userId',
        'disabled': 'disabled',
        'read_access_to_control_enabled': 'readAccessToControlEnabled',
        'authorized_sites': 'authorizedSites',
        'authorized_clusters': 'authorizedClusters'
    }

    def __init__(self, user_id=None, disabled=None, read_access_to_control_enabled=None, authorized_sites=None, authorized_clusters=None):  # noqa: E501
        """SiteBasedHelpdeskUserPermissionJson - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._disabled = None
        self._read_access_to_control_enabled = None
        self._authorized_sites = None
        self._authorized_clusters = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if disabled is not None:
            self.disabled = disabled
        if read_access_to_control_enabled is not None:
            self.read_access_to_control_enabled = read_access_to_control_enabled
        if authorized_sites is not None:
            self.authorized_sites = authorized_sites
        if authorized_clusters is not None:
            self.authorized_clusters = authorized_clusters

    @property
    def user_id(self):
        """Gets the user_id of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501


        :return: The user_id of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this SiteBasedHelpdeskUserPermissionJson.


        :param user_id: The user_id of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def disabled(self):
        """Gets the disabled of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501


        :return: The disabled of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled):
        """Sets the disabled of this SiteBasedHelpdeskUserPermissionJson.


        :param disabled: The disabled of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501
        :type: bool
        """

        self._disabled = disabled

    @property
    def read_access_to_control_enabled(self):
        """Gets the read_access_to_control_enabled of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501


        :return: The read_access_to_control_enabled of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501
        :rtype: bool
        """
        return self._read_access_to_control_enabled

    @read_access_to_control_enabled.setter
    def read_access_to_control_enabled(self, read_access_to_control_enabled):
        """Sets the read_access_to_control_enabled of this SiteBasedHelpdeskUserPermissionJson.


        :param read_access_to_control_enabled: The read_access_to_control_enabled of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501
        :type: bool
        """

        self._read_access_to_control_enabled = read_access_to_control_enabled

    @property
    def authorized_sites(self):
        """Gets the authorized_sites of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501


        :return: The authorized_sites of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._authorized_sites

    @authorized_sites.setter
    def authorized_sites(self, authorized_sites):
        """Sets the authorized_sites of this SiteBasedHelpdeskUserPermissionJson.


        :param authorized_sites: The authorized_sites of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501
        :type: list[str]
        """

        self._authorized_sites = authorized_sites

    @property
    def authorized_clusters(self):
        """Gets the authorized_clusters of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501


        :return: The authorized_clusters of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._authorized_clusters

    @authorized_clusters.setter
    def authorized_clusters(self, authorized_clusters):
        """Sets the authorized_clusters of this SiteBasedHelpdeskUserPermissionJson.


        :param authorized_clusters: The authorized_clusters of this SiteBasedHelpdeskUserPermissionJson.  # noqa: E501
        :type: list[str]
        """

        self._authorized_clusters = authorized_clusters

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SiteBasedHelpdeskUserPermissionJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SiteBasedHelpdeskUserPermissionJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
