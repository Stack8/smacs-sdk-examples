# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DirectoryNumberRangesSectionJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'custom_inputs': 'list[CustomInputTextJson]',
        'custom_selects': 'list[CustomSelectJson]',
        'custom_checkboxes': 'list[CustomCheckboxJson]',
        'custom_multi_selects': 'list[CustomMultiSelectJson]',
        'checkboxes': 'list[CheckboxJson]',
        'dn_ranges': 'list[DnDidRangeJson]'
    }

    attribute_map = {
        'custom_inputs': 'customInputs',
        'custom_selects': 'customSelects',
        'custom_checkboxes': 'customCheckboxes',
        'custom_multi_selects': 'customMultiSelects',
        'checkboxes': 'checkboxes',
        'dn_ranges': 'dnRanges'
    }

    def __init__(self, custom_inputs=None, custom_selects=None, custom_checkboxes=None, custom_multi_selects=None, checkboxes=None, dn_ranges=None):  # noqa: E501
        """DirectoryNumberRangesSectionJson - a model defined in Swagger"""  # noqa: E501
        self._custom_inputs = None
        self._custom_selects = None
        self._custom_checkboxes = None
        self._custom_multi_selects = None
        self._checkboxes = None
        self._dn_ranges = None
        self.discriminator = None
        self.custom_inputs = custom_inputs
        self.custom_selects = custom_selects
        self.custom_checkboxes = custom_checkboxes
        self.custom_multi_selects = custom_multi_selects
        self.checkboxes = checkboxes
        self.dn_ranges = dn_ranges

    @property
    def custom_inputs(self):
        """Gets the custom_inputs of this DirectoryNumberRangesSectionJson.  # noqa: E501


        :return: The custom_inputs of this DirectoryNumberRangesSectionJson.  # noqa: E501
        :rtype: list[CustomInputTextJson]
        """
        return self._custom_inputs

    @custom_inputs.setter
    def custom_inputs(self, custom_inputs):
        """Sets the custom_inputs of this DirectoryNumberRangesSectionJson.


        :param custom_inputs: The custom_inputs of this DirectoryNumberRangesSectionJson.  # noqa: E501
        :type: list[CustomInputTextJson]
        """
        if custom_inputs is None:
            raise ValueError("Invalid value for `custom_inputs`, must not be `None`")  # noqa: E501

        self._custom_inputs = custom_inputs

    @property
    def custom_selects(self):
        """Gets the custom_selects of this DirectoryNumberRangesSectionJson.  # noqa: E501


        :return: The custom_selects of this DirectoryNumberRangesSectionJson.  # noqa: E501
        :rtype: list[CustomSelectJson]
        """
        return self._custom_selects

    @custom_selects.setter
    def custom_selects(self, custom_selects):
        """Sets the custom_selects of this DirectoryNumberRangesSectionJson.


        :param custom_selects: The custom_selects of this DirectoryNumberRangesSectionJson.  # noqa: E501
        :type: list[CustomSelectJson]
        """
        if custom_selects is None:
            raise ValueError("Invalid value for `custom_selects`, must not be `None`")  # noqa: E501

        self._custom_selects = custom_selects

    @property
    def custom_checkboxes(self):
        """Gets the custom_checkboxes of this DirectoryNumberRangesSectionJson.  # noqa: E501


        :return: The custom_checkboxes of this DirectoryNumberRangesSectionJson.  # noqa: E501
        :rtype: list[CustomCheckboxJson]
        """
        return self._custom_checkboxes

    @custom_checkboxes.setter
    def custom_checkboxes(self, custom_checkboxes):
        """Sets the custom_checkboxes of this DirectoryNumberRangesSectionJson.


        :param custom_checkboxes: The custom_checkboxes of this DirectoryNumberRangesSectionJson.  # noqa: E501
        :type: list[CustomCheckboxJson]
        """
        if custom_checkboxes is None:
            raise ValueError("Invalid value for `custom_checkboxes`, must not be `None`")  # noqa: E501

        self._custom_checkboxes = custom_checkboxes

    @property
    def custom_multi_selects(self):
        """Gets the custom_multi_selects of this DirectoryNumberRangesSectionJson.  # noqa: E501


        :return: The custom_multi_selects of this DirectoryNumberRangesSectionJson.  # noqa: E501
        :rtype: list[CustomMultiSelectJson]
        """
        return self._custom_multi_selects

    @custom_multi_selects.setter
    def custom_multi_selects(self, custom_multi_selects):
        """Sets the custom_multi_selects of this DirectoryNumberRangesSectionJson.


        :param custom_multi_selects: The custom_multi_selects of this DirectoryNumberRangesSectionJson.  # noqa: E501
        :type: list[CustomMultiSelectJson]
        """
        if custom_multi_selects is None:
            raise ValueError("Invalid value for `custom_multi_selects`, must not be `None`")  # noqa: E501

        self._custom_multi_selects = custom_multi_selects

    @property
    def checkboxes(self):
        """Gets the checkboxes of this DirectoryNumberRangesSectionJson.  # noqa: E501


        :return: The checkboxes of this DirectoryNumberRangesSectionJson.  # noqa: E501
        :rtype: list[CheckboxJson]
        """
        return self._checkboxes

    @checkboxes.setter
    def checkboxes(self, checkboxes):
        """Sets the checkboxes of this DirectoryNumberRangesSectionJson.


        :param checkboxes: The checkboxes of this DirectoryNumberRangesSectionJson.  # noqa: E501
        :type: list[CheckboxJson]
        """
        if checkboxes is None:
            raise ValueError("Invalid value for `checkboxes`, must not be `None`")  # noqa: E501

        self._checkboxes = checkboxes

    @property
    def dn_ranges(self):
        """Gets the dn_ranges of this DirectoryNumberRangesSectionJson.  # noqa: E501


        :return: The dn_ranges of this DirectoryNumberRangesSectionJson.  # noqa: E501
        :rtype: list[DnDidRangeJson]
        """
        return self._dn_ranges

    @dn_ranges.setter
    def dn_ranges(self, dn_ranges):
        """Sets the dn_ranges of this DirectoryNumberRangesSectionJson.


        :param dn_ranges: The dn_ranges of this DirectoryNumberRangesSectionJson.  # noqa: E501
        :type: list[DnDidRangeJson]
        """
        if dn_ranges is None:
            raise ValueError("Invalid value for `dn_ranges`, must not be `None`")  # noqa: E501

        self._dn_ranges = dn_ranges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DirectoryNumberRangesSectionJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DirectoryNumberRangesSectionJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
