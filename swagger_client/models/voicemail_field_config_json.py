# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VoicemailFieldConfigJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'alias': 'TextFieldConfigJson',
        'voicemail_template': 'SelectFieldConfigJson',
        'first_name': 'TextFieldConfigJson',
        'last_name': 'TextFieldConfigJson',
        'display_name': 'TextFieldConfigJson',
        'smtp_notification_device': 'TextFieldConfigJson',
        'alternate_extensions': 'MultiTextFieldConfigJson'
    }

    attribute_map = {
        'alias': 'alias',
        'voicemail_template': 'voicemailTemplate',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'display_name': 'displayName',
        'smtp_notification_device': 'smtpNotificationDevice',
        'alternate_extensions': 'alternateExtensions'
    }

    def __init__(self, alias=None, voicemail_template=None, first_name=None, last_name=None, display_name=None, smtp_notification_device=None, alternate_extensions=None):  # noqa: E501
        """VoicemailFieldConfigJson - a model defined in Swagger"""  # noqa: E501
        self._alias = None
        self._voicemail_template = None
        self._first_name = None
        self._last_name = None
        self._display_name = None
        self._smtp_notification_device = None
        self._alternate_extensions = None
        self.discriminator = None
        if alias is not None:
            self.alias = alias
        if voicemail_template is not None:
            self.voicemail_template = voicemail_template
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        if display_name is not None:
            self.display_name = display_name
        if smtp_notification_device is not None:
            self.smtp_notification_device = smtp_notification_device
        if alternate_extensions is not None:
            self.alternate_extensions = alternate_extensions

    @property
    def alias(self):
        """Gets the alias of this VoicemailFieldConfigJson.  # noqa: E501


        :return: The alias of this VoicemailFieldConfigJson.  # noqa: E501
        :rtype: TextFieldConfigJson
        """
        return self._alias

    @alias.setter
    def alias(self, alias):
        """Sets the alias of this VoicemailFieldConfigJson.


        :param alias: The alias of this VoicemailFieldConfigJson.  # noqa: E501
        :type: TextFieldConfigJson
        """

        self._alias = alias

    @property
    def voicemail_template(self):
        """Gets the voicemail_template of this VoicemailFieldConfigJson.  # noqa: E501


        :return: The voicemail_template of this VoicemailFieldConfigJson.  # noqa: E501
        :rtype: SelectFieldConfigJson
        """
        return self._voicemail_template

    @voicemail_template.setter
    def voicemail_template(self, voicemail_template):
        """Sets the voicemail_template of this VoicemailFieldConfigJson.


        :param voicemail_template: The voicemail_template of this VoicemailFieldConfigJson.  # noqa: E501
        :type: SelectFieldConfigJson
        """

        self._voicemail_template = voicemail_template

    @property
    def first_name(self):
        """Gets the first_name of this VoicemailFieldConfigJson.  # noqa: E501


        :return: The first_name of this VoicemailFieldConfigJson.  # noqa: E501
        :rtype: TextFieldConfigJson
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this VoicemailFieldConfigJson.


        :param first_name: The first_name of this VoicemailFieldConfigJson.  # noqa: E501
        :type: TextFieldConfigJson
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this VoicemailFieldConfigJson.  # noqa: E501


        :return: The last_name of this VoicemailFieldConfigJson.  # noqa: E501
        :rtype: TextFieldConfigJson
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this VoicemailFieldConfigJson.


        :param last_name: The last_name of this VoicemailFieldConfigJson.  # noqa: E501
        :type: TextFieldConfigJson
        """

        self._last_name = last_name

    @property
    def display_name(self):
        """Gets the display_name of this VoicemailFieldConfigJson.  # noqa: E501


        :return: The display_name of this VoicemailFieldConfigJson.  # noqa: E501
        :rtype: TextFieldConfigJson
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this VoicemailFieldConfigJson.


        :param display_name: The display_name of this VoicemailFieldConfigJson.  # noqa: E501
        :type: TextFieldConfigJson
        """

        self._display_name = display_name

    @property
    def smtp_notification_device(self):
        """Gets the smtp_notification_device of this VoicemailFieldConfigJson.  # noqa: E501


        :return: The smtp_notification_device of this VoicemailFieldConfigJson.  # noqa: E501
        :rtype: TextFieldConfigJson
        """
        return self._smtp_notification_device

    @smtp_notification_device.setter
    def smtp_notification_device(self, smtp_notification_device):
        """Sets the smtp_notification_device of this VoicemailFieldConfigJson.


        :param smtp_notification_device: The smtp_notification_device of this VoicemailFieldConfigJson.  # noqa: E501
        :type: TextFieldConfigJson
        """

        self._smtp_notification_device = smtp_notification_device

    @property
    def alternate_extensions(self):
        """Gets the alternate_extensions of this VoicemailFieldConfigJson.  # noqa: E501


        :return: The alternate_extensions of this VoicemailFieldConfigJson.  # noqa: E501
        :rtype: MultiTextFieldConfigJson
        """
        return self._alternate_extensions

    @alternate_extensions.setter
    def alternate_extensions(self, alternate_extensions):
        """Sets the alternate_extensions of this VoicemailFieldConfigJson.


        :param alternate_extensions: The alternate_extensions of this VoicemailFieldConfigJson.  # noqa: E501
        :type: MultiTextFieldConfigJson
        """

        self._alternate_extensions = alternate_extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VoicemailFieldConfigJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VoicemailFieldConfigJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
