# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceModelProtocolMetadataJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'protocol': 'str',
        'available_button_features': 'list[str]',
        'security_profiles': 'list[SecurityProfile]',
        'max_number_of_calls_max': 'int',
        'max_number_of_calls_default': 'int',
        'busy_trigger_default': 'int',
        'extension_mobility_supported': 'bool',
        'disable_speaker_phone_supported': 'bool',
        'feature_control_policy_supported': 'bool',
        'built_in_bridge_supported': 'bool',
        'call_recording_supported': 'bool',
        'phone_preferred_media_source_supported': 'bool',
        'network_moh_supported': 'bool',
        'line_ring_settings_supported': 'bool',
        'phone_service_subscriptions_supported': 'bool',
        'line_text_label_supported': 'bool',
        'localization_supported': 'bool',
        'standard_phone_button_template': 'PhoneButtonTemplateJson'
    }

    attribute_map = {
        'protocol': 'protocol',
        'available_button_features': 'availableButtonFeatures',
        'security_profiles': 'securityProfiles',
        'max_number_of_calls_max': 'maxNumberOfCallsMax',
        'max_number_of_calls_default': 'maxNumberOfCallsDefault',
        'busy_trigger_default': 'busyTriggerDefault',
        'extension_mobility_supported': 'extensionMobilitySupported',
        'disable_speaker_phone_supported': 'disableSpeakerPhoneSupported',
        'feature_control_policy_supported': 'featureControlPolicySupported',
        'built_in_bridge_supported': 'builtInBridgeSupported',
        'call_recording_supported': 'callRecordingSupported',
        'phone_preferred_media_source_supported': 'phonePreferredMediaSourceSupported',
        'network_moh_supported': 'networkMohSupported',
        'line_ring_settings_supported': 'lineRingSettingsSupported',
        'phone_service_subscriptions_supported': 'phoneServiceSubscriptionsSupported',
        'line_text_label_supported': 'lineTextLabelSupported',
        'localization_supported': 'localizationSupported',
        'standard_phone_button_template': 'standardPhoneButtonTemplate'
    }

    def __init__(self, protocol=None, available_button_features=None, security_profiles=None, max_number_of_calls_max=None, max_number_of_calls_default=None, busy_trigger_default=None, extension_mobility_supported=None, disable_speaker_phone_supported=None, feature_control_policy_supported=None, built_in_bridge_supported=None, call_recording_supported=None, phone_preferred_media_source_supported=None, network_moh_supported=None, line_ring_settings_supported=None, phone_service_subscriptions_supported=None, line_text_label_supported=None, localization_supported=None, standard_phone_button_template=None):  # noqa: E501
        """DeviceModelProtocolMetadataJson - a model defined in Swagger"""  # noqa: E501
        self._protocol = None
        self._available_button_features = None
        self._security_profiles = None
        self._max_number_of_calls_max = None
        self._max_number_of_calls_default = None
        self._busy_trigger_default = None
        self._extension_mobility_supported = None
        self._disable_speaker_phone_supported = None
        self._feature_control_policy_supported = None
        self._built_in_bridge_supported = None
        self._call_recording_supported = None
        self._phone_preferred_media_source_supported = None
        self._network_moh_supported = None
        self._line_ring_settings_supported = None
        self._phone_service_subscriptions_supported = None
        self._line_text_label_supported = None
        self._localization_supported = None
        self._standard_phone_button_template = None
        self.discriminator = None
        self.protocol = protocol
        self.available_button_features = available_button_features
        self.security_profiles = security_profiles
        self.max_number_of_calls_max = max_number_of_calls_max
        self.max_number_of_calls_default = max_number_of_calls_default
        self.busy_trigger_default = busy_trigger_default
        self.extension_mobility_supported = extension_mobility_supported
        self.disable_speaker_phone_supported = disable_speaker_phone_supported
        self.feature_control_policy_supported = feature_control_policy_supported
        self.built_in_bridge_supported = built_in_bridge_supported
        self.call_recording_supported = call_recording_supported
        self.phone_preferred_media_source_supported = phone_preferred_media_source_supported
        self.network_moh_supported = network_moh_supported
        self.line_ring_settings_supported = line_ring_settings_supported
        self.phone_service_subscriptions_supported = phone_service_subscriptions_supported
        self.line_text_label_supported = line_text_label_supported
        self.localization_supported = localization_supported
        if standard_phone_button_template is not None:
            self.standard_phone_button_template = standard_phone_button_template

    @property
    def protocol(self):
        """Gets the protocol of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The protocol of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this DeviceModelProtocolMetadataJson.


        :param protocol: The protocol of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def available_button_features(self):
        """Gets the available_button_features of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The available_button_features of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._available_button_features

    @available_button_features.setter
    def available_button_features(self, available_button_features):
        """Sets the available_button_features of this DeviceModelProtocolMetadataJson.


        :param available_button_features: The available_button_features of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: list[str]
        """
        if available_button_features is None:
            raise ValueError("Invalid value for `available_button_features`, must not be `None`")  # noqa: E501

        self._available_button_features = available_button_features

    @property
    def security_profiles(self):
        """Gets the security_profiles of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The security_profiles of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: list[SecurityProfile]
        """
        return self._security_profiles

    @security_profiles.setter
    def security_profiles(self, security_profiles):
        """Sets the security_profiles of this DeviceModelProtocolMetadataJson.


        :param security_profiles: The security_profiles of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: list[SecurityProfile]
        """
        if security_profiles is None:
            raise ValueError("Invalid value for `security_profiles`, must not be `None`")  # noqa: E501

        self._security_profiles = security_profiles

    @property
    def max_number_of_calls_max(self):
        """Gets the max_number_of_calls_max of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The max_number_of_calls_max of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: int
        """
        return self._max_number_of_calls_max

    @max_number_of_calls_max.setter
    def max_number_of_calls_max(self, max_number_of_calls_max):
        """Sets the max_number_of_calls_max of this DeviceModelProtocolMetadataJson.


        :param max_number_of_calls_max: The max_number_of_calls_max of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: int
        """
        if max_number_of_calls_max is None:
            raise ValueError("Invalid value for `max_number_of_calls_max`, must not be `None`")  # noqa: E501

        self._max_number_of_calls_max = max_number_of_calls_max

    @property
    def max_number_of_calls_default(self):
        """Gets the max_number_of_calls_default of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The max_number_of_calls_default of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: int
        """
        return self._max_number_of_calls_default

    @max_number_of_calls_default.setter
    def max_number_of_calls_default(self, max_number_of_calls_default):
        """Sets the max_number_of_calls_default of this DeviceModelProtocolMetadataJson.


        :param max_number_of_calls_default: The max_number_of_calls_default of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: int
        """
        if max_number_of_calls_default is None:
            raise ValueError("Invalid value for `max_number_of_calls_default`, must not be `None`")  # noqa: E501

        self._max_number_of_calls_default = max_number_of_calls_default

    @property
    def busy_trigger_default(self):
        """Gets the busy_trigger_default of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The busy_trigger_default of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: int
        """
        return self._busy_trigger_default

    @busy_trigger_default.setter
    def busy_trigger_default(self, busy_trigger_default):
        """Sets the busy_trigger_default of this DeviceModelProtocolMetadataJson.


        :param busy_trigger_default: The busy_trigger_default of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: int
        """
        if busy_trigger_default is None:
            raise ValueError("Invalid value for `busy_trigger_default`, must not be `None`")  # noqa: E501

        self._busy_trigger_default = busy_trigger_default

    @property
    def extension_mobility_supported(self):
        """Gets the extension_mobility_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The extension_mobility_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: bool
        """
        return self._extension_mobility_supported

    @extension_mobility_supported.setter
    def extension_mobility_supported(self, extension_mobility_supported):
        """Sets the extension_mobility_supported of this DeviceModelProtocolMetadataJson.


        :param extension_mobility_supported: The extension_mobility_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: bool
        """
        if extension_mobility_supported is None:
            raise ValueError("Invalid value for `extension_mobility_supported`, must not be `None`")  # noqa: E501

        self._extension_mobility_supported = extension_mobility_supported

    @property
    def disable_speaker_phone_supported(self):
        """Gets the disable_speaker_phone_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The disable_speaker_phone_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: bool
        """
        return self._disable_speaker_phone_supported

    @disable_speaker_phone_supported.setter
    def disable_speaker_phone_supported(self, disable_speaker_phone_supported):
        """Sets the disable_speaker_phone_supported of this DeviceModelProtocolMetadataJson.


        :param disable_speaker_phone_supported: The disable_speaker_phone_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: bool
        """
        if disable_speaker_phone_supported is None:
            raise ValueError("Invalid value for `disable_speaker_phone_supported`, must not be `None`")  # noqa: E501

        self._disable_speaker_phone_supported = disable_speaker_phone_supported

    @property
    def feature_control_policy_supported(self):
        """Gets the feature_control_policy_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The feature_control_policy_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: bool
        """
        return self._feature_control_policy_supported

    @feature_control_policy_supported.setter
    def feature_control_policy_supported(self, feature_control_policy_supported):
        """Sets the feature_control_policy_supported of this DeviceModelProtocolMetadataJson.


        :param feature_control_policy_supported: The feature_control_policy_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: bool
        """
        if feature_control_policy_supported is None:
            raise ValueError("Invalid value for `feature_control_policy_supported`, must not be `None`")  # noqa: E501

        self._feature_control_policy_supported = feature_control_policy_supported

    @property
    def built_in_bridge_supported(self):
        """Gets the built_in_bridge_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The built_in_bridge_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: bool
        """
        return self._built_in_bridge_supported

    @built_in_bridge_supported.setter
    def built_in_bridge_supported(self, built_in_bridge_supported):
        """Sets the built_in_bridge_supported of this DeviceModelProtocolMetadataJson.


        :param built_in_bridge_supported: The built_in_bridge_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: bool
        """
        if built_in_bridge_supported is None:
            raise ValueError("Invalid value for `built_in_bridge_supported`, must not be `None`")  # noqa: E501

        self._built_in_bridge_supported = built_in_bridge_supported

    @property
    def call_recording_supported(self):
        """Gets the call_recording_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The call_recording_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: bool
        """
        return self._call_recording_supported

    @call_recording_supported.setter
    def call_recording_supported(self, call_recording_supported):
        """Sets the call_recording_supported of this DeviceModelProtocolMetadataJson.


        :param call_recording_supported: The call_recording_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: bool
        """
        if call_recording_supported is None:
            raise ValueError("Invalid value for `call_recording_supported`, must not be `None`")  # noqa: E501

        self._call_recording_supported = call_recording_supported

    @property
    def phone_preferred_media_source_supported(self):
        """Gets the phone_preferred_media_source_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The phone_preferred_media_source_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: bool
        """
        return self._phone_preferred_media_source_supported

    @phone_preferred_media_source_supported.setter
    def phone_preferred_media_source_supported(self, phone_preferred_media_source_supported):
        """Sets the phone_preferred_media_source_supported of this DeviceModelProtocolMetadataJson.


        :param phone_preferred_media_source_supported: The phone_preferred_media_source_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: bool
        """
        if phone_preferred_media_source_supported is None:
            raise ValueError("Invalid value for `phone_preferred_media_source_supported`, must not be `None`")  # noqa: E501

        self._phone_preferred_media_source_supported = phone_preferred_media_source_supported

    @property
    def network_moh_supported(self):
        """Gets the network_moh_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The network_moh_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: bool
        """
        return self._network_moh_supported

    @network_moh_supported.setter
    def network_moh_supported(self, network_moh_supported):
        """Sets the network_moh_supported of this DeviceModelProtocolMetadataJson.


        :param network_moh_supported: The network_moh_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: bool
        """
        if network_moh_supported is None:
            raise ValueError("Invalid value for `network_moh_supported`, must not be `None`")  # noqa: E501

        self._network_moh_supported = network_moh_supported

    @property
    def line_ring_settings_supported(self):
        """Gets the line_ring_settings_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The line_ring_settings_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: bool
        """
        return self._line_ring_settings_supported

    @line_ring_settings_supported.setter
    def line_ring_settings_supported(self, line_ring_settings_supported):
        """Sets the line_ring_settings_supported of this DeviceModelProtocolMetadataJson.


        :param line_ring_settings_supported: The line_ring_settings_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: bool
        """
        if line_ring_settings_supported is None:
            raise ValueError("Invalid value for `line_ring_settings_supported`, must not be `None`")  # noqa: E501

        self._line_ring_settings_supported = line_ring_settings_supported

    @property
    def phone_service_subscriptions_supported(self):
        """Gets the phone_service_subscriptions_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The phone_service_subscriptions_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: bool
        """
        return self._phone_service_subscriptions_supported

    @phone_service_subscriptions_supported.setter
    def phone_service_subscriptions_supported(self, phone_service_subscriptions_supported):
        """Sets the phone_service_subscriptions_supported of this DeviceModelProtocolMetadataJson.


        :param phone_service_subscriptions_supported: The phone_service_subscriptions_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: bool
        """
        if phone_service_subscriptions_supported is None:
            raise ValueError("Invalid value for `phone_service_subscriptions_supported`, must not be `None`")  # noqa: E501

        self._phone_service_subscriptions_supported = phone_service_subscriptions_supported

    @property
    def line_text_label_supported(self):
        """Gets the line_text_label_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The line_text_label_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: bool
        """
        return self._line_text_label_supported

    @line_text_label_supported.setter
    def line_text_label_supported(self, line_text_label_supported):
        """Sets the line_text_label_supported of this DeviceModelProtocolMetadataJson.


        :param line_text_label_supported: The line_text_label_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: bool
        """
        if line_text_label_supported is None:
            raise ValueError("Invalid value for `line_text_label_supported`, must not be `None`")  # noqa: E501

        self._line_text_label_supported = line_text_label_supported

    @property
    def localization_supported(self):
        """Gets the localization_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The localization_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: bool
        """
        return self._localization_supported

    @localization_supported.setter
    def localization_supported(self, localization_supported):
        """Sets the localization_supported of this DeviceModelProtocolMetadataJson.


        :param localization_supported: The localization_supported of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: bool
        """
        if localization_supported is None:
            raise ValueError("Invalid value for `localization_supported`, must not be `None`")  # noqa: E501

        self._localization_supported = localization_supported

    @property
    def standard_phone_button_template(self):
        """Gets the standard_phone_button_template of this DeviceModelProtocolMetadataJson.  # noqa: E501


        :return: The standard_phone_button_template of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :rtype: PhoneButtonTemplateJson
        """
        return self._standard_phone_button_template

    @standard_phone_button_template.setter
    def standard_phone_button_template(self, standard_phone_button_template):
        """Sets the standard_phone_button_template of this DeviceModelProtocolMetadataJson.


        :param standard_phone_button_template: The standard_phone_button_template of this DeviceModelProtocolMetadataJson.  # noqa: E501
        :type: PhoneButtonTemplateJson
        """

        self._standard_phone_button_template = standard_phone_button_template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceModelProtocolMetadataJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceModelProtocolMetadataJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
