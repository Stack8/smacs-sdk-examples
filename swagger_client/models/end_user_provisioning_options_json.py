# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EndUserProvisioningOptionsJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'site_id': 'int',
        'dn': 'DnProvisioningOptionsJson',
        'agent_extension': 'bool',
        'voicemail': 'bool',
        'deskphone': 'DeskphoneProvisioningOptionsJson',
        'snr': 'bool',
        'mobility': 'bool',
        'im_softphone': 'bool',
        'imp': 'bool',
        'cipc': 'bool',
        'iphone': 'bool',
        'android': 'bool',
        'tablet': 'bool'
    }

    attribute_map = {
        'username': 'username',
        'site_id': 'siteId',
        'dn': 'dn',
        'agent_extension': 'agentExtension',
        'voicemail': 'voicemail',
        'deskphone': 'deskphone',
        'snr': 'snr',
        'mobility': 'mobility',
        'im_softphone': 'imSoftphone',
        'imp': 'imp',
        'cipc': 'cipc',
        'iphone': 'iphone',
        'android': 'android',
        'tablet': 'tablet'
    }

    def __init__(self, username=None, site_id=None, dn=None, agent_extension=None, voicemail=None, deskphone=None, snr=None, mobility=None, im_softphone=None, imp=None, cipc=None, iphone=None, android=None, tablet=None):  # noqa: E501
        """EndUserProvisioningOptionsJson - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._site_id = None
        self._dn = None
        self._agent_extension = None
        self._voicemail = None
        self._deskphone = None
        self._snr = None
        self._mobility = None
        self._im_softphone = None
        self._imp = None
        self._cipc = None
        self._iphone = None
        self._android = None
        self._tablet = None
        self.discriminator = None
        self.username = username
        if site_id is not None:
            self.site_id = site_id
        if dn is not None:
            self.dn = dn
        if agent_extension is not None:
            self.agent_extension = agent_extension
        if voicemail is not None:
            self.voicemail = voicemail
        if deskphone is not None:
            self.deskphone = deskphone
        if snr is not None:
            self.snr = snr
        if mobility is not None:
            self.mobility = mobility
        if im_softphone is not None:
            self.im_softphone = im_softphone
        if imp is not None:
            self.imp = imp
        if cipc is not None:
            self.cipc = cipc
        if iphone is not None:
            self.iphone = iphone
        if android is not None:
            self.android = android
        if tablet is not None:
            self.tablet = tablet

    @property
    def username(self):
        """Gets the username of this EndUserProvisioningOptionsJson.  # noqa: E501


        :return: The username of this EndUserProvisioningOptionsJson.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this EndUserProvisioningOptionsJson.


        :param username: The username of this EndUserProvisioningOptionsJson.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def site_id(self):
        """Gets the site_id of this EndUserProvisioningOptionsJson.  # noqa: E501


        :return: The site_id of this EndUserProvisioningOptionsJson.  # noqa: E501
        :rtype: int
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this EndUserProvisioningOptionsJson.


        :param site_id: The site_id of this EndUserProvisioningOptionsJson.  # noqa: E501
        :type: int
        """

        self._site_id = site_id

    @property
    def dn(self):
        """Gets the dn of this EndUserProvisioningOptionsJson.  # noqa: E501


        :return: The dn of this EndUserProvisioningOptionsJson.  # noqa: E501
        :rtype: DnProvisioningOptionsJson
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """Sets the dn of this EndUserProvisioningOptionsJson.


        :param dn: The dn of this EndUserProvisioningOptionsJson.  # noqa: E501
        :type: DnProvisioningOptionsJson
        """

        self._dn = dn

    @property
    def agent_extension(self):
        """Gets the agent_extension of this EndUserProvisioningOptionsJson.  # noqa: E501


        :return: The agent_extension of this EndUserProvisioningOptionsJson.  # noqa: E501
        :rtype: bool
        """
        return self._agent_extension

    @agent_extension.setter
    def agent_extension(self, agent_extension):
        """Sets the agent_extension of this EndUserProvisioningOptionsJson.


        :param agent_extension: The agent_extension of this EndUserProvisioningOptionsJson.  # noqa: E501
        :type: bool
        """

        self._agent_extension = agent_extension

    @property
    def voicemail(self):
        """Gets the voicemail of this EndUserProvisioningOptionsJson.  # noqa: E501


        :return: The voicemail of this EndUserProvisioningOptionsJson.  # noqa: E501
        :rtype: bool
        """
        return self._voicemail

    @voicemail.setter
    def voicemail(self, voicemail):
        """Sets the voicemail of this EndUserProvisioningOptionsJson.


        :param voicemail: The voicemail of this EndUserProvisioningOptionsJson.  # noqa: E501
        :type: bool
        """

        self._voicemail = voicemail

    @property
    def deskphone(self):
        """Gets the deskphone of this EndUserProvisioningOptionsJson.  # noqa: E501


        :return: The deskphone of this EndUserProvisioningOptionsJson.  # noqa: E501
        :rtype: DeskphoneProvisioningOptionsJson
        """
        return self._deskphone

    @deskphone.setter
    def deskphone(self, deskphone):
        """Sets the deskphone of this EndUserProvisioningOptionsJson.


        :param deskphone: The deskphone of this EndUserProvisioningOptionsJson.  # noqa: E501
        :type: DeskphoneProvisioningOptionsJson
        """

        self._deskphone = deskphone

    @property
    def snr(self):
        """Gets the snr of this EndUserProvisioningOptionsJson.  # noqa: E501


        :return: The snr of this EndUserProvisioningOptionsJson.  # noqa: E501
        :rtype: bool
        """
        return self._snr

    @snr.setter
    def snr(self, snr):
        """Sets the snr of this EndUserProvisioningOptionsJson.


        :param snr: The snr of this EndUserProvisioningOptionsJson.  # noqa: E501
        :type: bool
        """

        self._snr = snr

    @property
    def mobility(self):
        """Gets the mobility of this EndUserProvisioningOptionsJson.  # noqa: E501


        :return: The mobility of this EndUserProvisioningOptionsJson.  # noqa: E501
        :rtype: bool
        """
        return self._mobility

    @mobility.setter
    def mobility(self, mobility):
        """Sets the mobility of this EndUserProvisioningOptionsJson.


        :param mobility: The mobility of this EndUserProvisioningOptionsJson.  # noqa: E501
        :type: bool
        """

        self._mobility = mobility

    @property
    def im_softphone(self):
        """Gets the im_softphone of this EndUserProvisioningOptionsJson.  # noqa: E501


        :return: The im_softphone of this EndUserProvisioningOptionsJson.  # noqa: E501
        :rtype: bool
        """
        return self._im_softphone

    @im_softphone.setter
    def im_softphone(self, im_softphone):
        """Sets the im_softphone of this EndUserProvisioningOptionsJson.


        :param im_softphone: The im_softphone of this EndUserProvisioningOptionsJson.  # noqa: E501
        :type: bool
        """

        self._im_softphone = im_softphone

    @property
    def imp(self):
        """Gets the imp of this EndUserProvisioningOptionsJson.  # noqa: E501


        :return: The imp of this EndUserProvisioningOptionsJson.  # noqa: E501
        :rtype: bool
        """
        return self._imp

    @imp.setter
    def imp(self, imp):
        """Sets the imp of this EndUserProvisioningOptionsJson.


        :param imp: The imp of this EndUserProvisioningOptionsJson.  # noqa: E501
        :type: bool
        """

        self._imp = imp

    @property
    def cipc(self):
        """Gets the cipc of this EndUserProvisioningOptionsJson.  # noqa: E501


        :return: The cipc of this EndUserProvisioningOptionsJson.  # noqa: E501
        :rtype: bool
        """
        return self._cipc

    @cipc.setter
    def cipc(self, cipc):
        """Sets the cipc of this EndUserProvisioningOptionsJson.


        :param cipc: The cipc of this EndUserProvisioningOptionsJson.  # noqa: E501
        :type: bool
        """

        self._cipc = cipc

    @property
    def iphone(self):
        """Gets the iphone of this EndUserProvisioningOptionsJson.  # noqa: E501


        :return: The iphone of this EndUserProvisioningOptionsJson.  # noqa: E501
        :rtype: bool
        """
        return self._iphone

    @iphone.setter
    def iphone(self, iphone):
        """Sets the iphone of this EndUserProvisioningOptionsJson.


        :param iphone: The iphone of this EndUserProvisioningOptionsJson.  # noqa: E501
        :type: bool
        """

        self._iphone = iphone

    @property
    def android(self):
        """Gets the android of this EndUserProvisioningOptionsJson.  # noqa: E501


        :return: The android of this EndUserProvisioningOptionsJson.  # noqa: E501
        :rtype: bool
        """
        return self._android

    @android.setter
    def android(self, android):
        """Sets the android of this EndUserProvisioningOptionsJson.


        :param android: The android of this EndUserProvisioningOptionsJson.  # noqa: E501
        :type: bool
        """

        self._android = android

    @property
    def tablet(self):
        """Gets the tablet of this EndUserProvisioningOptionsJson.  # noqa: E501


        :return: The tablet of this EndUserProvisioningOptionsJson.  # noqa: E501
        :rtype: bool
        """
        return self._tablet

    @tablet.setter
    def tablet(self, tablet):
        """Sets the tablet of this EndUserProvisioningOptionsJson.


        :param tablet: The tablet of this EndUserProvisioningOptionsJson.  # noqa: E501
        :type: bool
        """

        self._tablet = tablet

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EndUserProvisioningOptionsJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EndUserProvisioningOptionsJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
