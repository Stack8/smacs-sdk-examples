# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IlsAlternateNumberJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number_mask': 'str',
        'urgent': 'bool',
        'add_to_local_route_partition': 'bool',
        'route_partition': 'str',
        'advertise_globally_via_ils': 'bool'
    }

    attribute_map = {
        'number_mask': 'numberMask',
        'urgent': 'urgent',
        'add_to_local_route_partition': 'addToLocalRoutePartition',
        'route_partition': 'routePartition',
        'advertise_globally_via_ils': 'advertiseGloballyViaIls'
    }

    def __init__(self, number_mask=None, urgent=None, add_to_local_route_partition=None, route_partition=None, advertise_globally_via_ils=None):  # noqa: E501
        """IlsAlternateNumberJson - a model defined in Swagger"""  # noqa: E501
        self._number_mask = None
        self._urgent = None
        self._add_to_local_route_partition = None
        self._route_partition = None
        self._advertise_globally_via_ils = None
        self.discriminator = None
        self.number_mask = number_mask
        self.urgent = urgent
        self.add_to_local_route_partition = add_to_local_route_partition
        self.route_partition = route_partition
        self.advertise_globally_via_ils = advertise_globally_via_ils

    @property
    def number_mask(self):
        """Gets the number_mask of this IlsAlternateNumberJson.  # noqa: E501


        :return: The number_mask of this IlsAlternateNumberJson.  # noqa: E501
        :rtype: str
        """
        return self._number_mask

    @number_mask.setter
    def number_mask(self, number_mask):
        """Sets the number_mask of this IlsAlternateNumberJson.


        :param number_mask: The number_mask of this IlsAlternateNumberJson.  # noqa: E501
        :type: str
        """
        if number_mask is None:
            raise ValueError("Invalid value for `number_mask`, must not be `None`")  # noqa: E501

        self._number_mask = number_mask

    @property
    def urgent(self):
        """Gets the urgent of this IlsAlternateNumberJson.  # noqa: E501


        :return: The urgent of this IlsAlternateNumberJson.  # noqa: E501
        :rtype: bool
        """
        return self._urgent

    @urgent.setter
    def urgent(self, urgent):
        """Sets the urgent of this IlsAlternateNumberJson.


        :param urgent: The urgent of this IlsAlternateNumberJson.  # noqa: E501
        :type: bool
        """
        if urgent is None:
            raise ValueError("Invalid value for `urgent`, must not be `None`")  # noqa: E501

        self._urgent = urgent

    @property
    def add_to_local_route_partition(self):
        """Gets the add_to_local_route_partition of this IlsAlternateNumberJson.  # noqa: E501


        :return: The add_to_local_route_partition of this IlsAlternateNumberJson.  # noqa: E501
        :rtype: bool
        """
        return self._add_to_local_route_partition

    @add_to_local_route_partition.setter
    def add_to_local_route_partition(self, add_to_local_route_partition):
        """Sets the add_to_local_route_partition of this IlsAlternateNumberJson.


        :param add_to_local_route_partition: The add_to_local_route_partition of this IlsAlternateNumberJson.  # noqa: E501
        :type: bool
        """
        if add_to_local_route_partition is None:
            raise ValueError("Invalid value for `add_to_local_route_partition`, must not be `None`")  # noqa: E501

        self._add_to_local_route_partition = add_to_local_route_partition

    @property
    def route_partition(self):
        """Gets the route_partition of this IlsAlternateNumberJson.  # noqa: E501


        :return: The route_partition of this IlsAlternateNumberJson.  # noqa: E501
        :rtype: str
        """
        return self._route_partition

    @route_partition.setter
    def route_partition(self, route_partition):
        """Sets the route_partition of this IlsAlternateNumberJson.


        :param route_partition: The route_partition of this IlsAlternateNumberJson.  # noqa: E501
        :type: str
        """
        if route_partition is None:
            raise ValueError("Invalid value for `route_partition`, must not be `None`")  # noqa: E501

        self._route_partition = route_partition

    @property
    def advertise_globally_via_ils(self):
        """Gets the advertise_globally_via_ils of this IlsAlternateNumberJson.  # noqa: E501


        :return: The advertise_globally_via_ils of this IlsAlternateNumberJson.  # noqa: E501
        :rtype: bool
        """
        return self._advertise_globally_via_ils

    @advertise_globally_via_ils.setter
    def advertise_globally_via_ils(self, advertise_globally_via_ils):
        """Sets the advertise_globally_via_ils of this IlsAlternateNumberJson.


        :param advertise_globally_via_ils: The advertise_globally_via_ils of this IlsAlternateNumberJson.  # noqa: E501
        :type: bool
        """
        if advertise_globally_via_ils is None:
            raise ValueError("Invalid value for `advertise_globally_via_ils`, must not be `None`")  # noqa: E501

        self._advertise_globally_via_ils = advertise_globally_via_ils

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IlsAlternateNumberJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IlsAlternateNumberJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
