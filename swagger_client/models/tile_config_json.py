# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TileConfigJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'primary_extension': 'str',
        'voicemail': 'str',
        'pcce_agent': 'str',
        'single_number_reach': 'str',
        'deskphone': 'str',
        'extension_mobility': 'str',
        'im_presence': 'str',
        'im_softphone': 'str',
        'cipc': 'str',
        'android': 'str',
        'iphone': 'str',
        'tablet': 'str',
        'microsoft365_user': 'str',
        'microsoft_teams_calling': 'str',
        'microsoft_teams_audio_conferencing': 'str'
    }

    attribute_map = {
        'primary_extension': 'primaryExtension',
        'voicemail': 'voicemail',
        'pcce_agent': 'pcceAgent',
        'single_number_reach': 'singleNumberReach',
        'deskphone': 'deskphone',
        'extension_mobility': 'extensionMobility',
        'im_presence': 'imPresence',
        'im_softphone': 'imSoftphone',
        'cipc': 'cipc',
        'android': 'android',
        'iphone': 'iphone',
        'tablet': 'tablet',
        'microsoft365_user': 'microsoft365User',
        'microsoft_teams_calling': 'microsoftTeamsCalling',
        'microsoft_teams_audio_conferencing': 'microsoftTeamsAudioConferencing'
    }

    def __init__(self, primary_extension=None, voicemail=None, pcce_agent=None, single_number_reach=None, deskphone=None, extension_mobility=None, im_presence=None, im_softphone=None, cipc=None, android=None, iphone=None, tablet=None, microsoft365_user=None, microsoft_teams_calling=None, microsoft_teams_audio_conferencing=None):  # noqa: E501
        """TileConfigJson - a model defined in Swagger"""  # noqa: E501
        self._primary_extension = None
        self._voicemail = None
        self._pcce_agent = None
        self._single_number_reach = None
        self._deskphone = None
        self._extension_mobility = None
        self._im_presence = None
        self._im_softphone = None
        self._cipc = None
        self._android = None
        self._iphone = None
        self._tablet = None
        self._microsoft365_user = None
        self._microsoft_teams_calling = None
        self._microsoft_teams_audio_conferencing = None
        self.discriminator = None
        if primary_extension is not None:
            self.primary_extension = primary_extension
        if voicemail is not None:
            self.voicemail = voicemail
        if pcce_agent is not None:
            self.pcce_agent = pcce_agent
        if single_number_reach is not None:
            self.single_number_reach = single_number_reach
        if deskphone is not None:
            self.deskphone = deskphone
        if extension_mobility is not None:
            self.extension_mobility = extension_mobility
        if im_presence is not None:
            self.im_presence = im_presence
        if im_softphone is not None:
            self.im_softphone = im_softphone
        if cipc is not None:
            self.cipc = cipc
        if android is not None:
            self.android = android
        if iphone is not None:
            self.iphone = iphone
        if tablet is not None:
            self.tablet = tablet
        if microsoft365_user is not None:
            self.microsoft365_user = microsoft365_user
        if microsoft_teams_calling is not None:
            self.microsoft_teams_calling = microsoft_teams_calling
        if microsoft_teams_audio_conferencing is not None:
            self.microsoft_teams_audio_conferencing = microsoft_teams_audio_conferencing

    @property
    def primary_extension(self):
        """Gets the primary_extension of this TileConfigJson.  # noqa: E501


        :return: The primary_extension of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._primary_extension

    @primary_extension.setter
    def primary_extension(self, primary_extension):
        """Sets the primary_extension of this TileConfigJson.


        :param primary_extension: The primary_extension of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if primary_extension not in allowed_values:
            raise ValueError(
                "Invalid value for `primary_extension` ({0}), must be one of {1}"  # noqa: E501
                .format(primary_extension, allowed_values)
            )

        self._primary_extension = primary_extension

    @property
    def voicemail(self):
        """Gets the voicemail of this TileConfigJson.  # noqa: E501


        :return: The voicemail of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._voicemail

    @voicemail.setter
    def voicemail(self, voicemail):
        """Sets the voicemail of this TileConfigJson.


        :param voicemail: The voicemail of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if voicemail not in allowed_values:
            raise ValueError(
                "Invalid value for `voicemail` ({0}), must be one of {1}"  # noqa: E501
                .format(voicemail, allowed_values)
            )

        self._voicemail = voicemail

    @property
    def pcce_agent(self):
        """Gets the pcce_agent of this TileConfigJson.  # noqa: E501


        :return: The pcce_agent of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._pcce_agent

    @pcce_agent.setter
    def pcce_agent(self, pcce_agent):
        """Sets the pcce_agent of this TileConfigJson.


        :param pcce_agent: The pcce_agent of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if pcce_agent not in allowed_values:
            raise ValueError(
                "Invalid value for `pcce_agent` ({0}), must be one of {1}"  # noqa: E501
                .format(pcce_agent, allowed_values)
            )

        self._pcce_agent = pcce_agent

    @property
    def single_number_reach(self):
        """Gets the single_number_reach of this TileConfigJson.  # noqa: E501


        :return: The single_number_reach of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._single_number_reach

    @single_number_reach.setter
    def single_number_reach(self, single_number_reach):
        """Sets the single_number_reach of this TileConfigJson.


        :param single_number_reach: The single_number_reach of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if single_number_reach not in allowed_values:
            raise ValueError(
                "Invalid value for `single_number_reach` ({0}), must be one of {1}"  # noqa: E501
                .format(single_number_reach, allowed_values)
            )

        self._single_number_reach = single_number_reach

    @property
    def deskphone(self):
        """Gets the deskphone of this TileConfigJson.  # noqa: E501


        :return: The deskphone of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._deskphone

    @deskphone.setter
    def deskphone(self, deskphone):
        """Sets the deskphone of this TileConfigJson.


        :param deskphone: The deskphone of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if deskphone not in allowed_values:
            raise ValueError(
                "Invalid value for `deskphone` ({0}), must be one of {1}"  # noqa: E501
                .format(deskphone, allowed_values)
            )

        self._deskphone = deskphone

    @property
    def extension_mobility(self):
        """Gets the extension_mobility of this TileConfigJson.  # noqa: E501


        :return: The extension_mobility of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._extension_mobility

    @extension_mobility.setter
    def extension_mobility(self, extension_mobility):
        """Sets the extension_mobility of this TileConfigJson.


        :param extension_mobility: The extension_mobility of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if extension_mobility not in allowed_values:
            raise ValueError(
                "Invalid value for `extension_mobility` ({0}), must be one of {1}"  # noqa: E501
                .format(extension_mobility, allowed_values)
            )

        self._extension_mobility = extension_mobility

    @property
    def im_presence(self):
        """Gets the im_presence of this TileConfigJson.  # noqa: E501


        :return: The im_presence of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._im_presence

    @im_presence.setter
    def im_presence(self, im_presence):
        """Sets the im_presence of this TileConfigJson.


        :param im_presence: The im_presence of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if im_presence not in allowed_values:
            raise ValueError(
                "Invalid value for `im_presence` ({0}), must be one of {1}"  # noqa: E501
                .format(im_presence, allowed_values)
            )

        self._im_presence = im_presence

    @property
    def im_softphone(self):
        """Gets the im_softphone of this TileConfigJson.  # noqa: E501


        :return: The im_softphone of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._im_softphone

    @im_softphone.setter
    def im_softphone(self, im_softphone):
        """Sets the im_softphone of this TileConfigJson.


        :param im_softphone: The im_softphone of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if im_softphone not in allowed_values:
            raise ValueError(
                "Invalid value for `im_softphone` ({0}), must be one of {1}"  # noqa: E501
                .format(im_softphone, allowed_values)
            )

        self._im_softphone = im_softphone

    @property
    def cipc(self):
        """Gets the cipc of this TileConfigJson.  # noqa: E501


        :return: The cipc of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._cipc

    @cipc.setter
    def cipc(self, cipc):
        """Sets the cipc of this TileConfigJson.


        :param cipc: The cipc of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if cipc not in allowed_values:
            raise ValueError(
                "Invalid value for `cipc` ({0}), must be one of {1}"  # noqa: E501
                .format(cipc, allowed_values)
            )

        self._cipc = cipc

    @property
    def android(self):
        """Gets the android of this TileConfigJson.  # noqa: E501


        :return: The android of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._android

    @android.setter
    def android(self, android):
        """Sets the android of this TileConfigJson.


        :param android: The android of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if android not in allowed_values:
            raise ValueError(
                "Invalid value for `android` ({0}), must be one of {1}"  # noqa: E501
                .format(android, allowed_values)
            )

        self._android = android

    @property
    def iphone(self):
        """Gets the iphone of this TileConfigJson.  # noqa: E501


        :return: The iphone of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._iphone

    @iphone.setter
    def iphone(self, iphone):
        """Sets the iphone of this TileConfigJson.


        :param iphone: The iphone of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if iphone not in allowed_values:
            raise ValueError(
                "Invalid value for `iphone` ({0}), must be one of {1}"  # noqa: E501
                .format(iphone, allowed_values)
            )

        self._iphone = iphone

    @property
    def tablet(self):
        """Gets the tablet of this TileConfigJson.  # noqa: E501


        :return: The tablet of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._tablet

    @tablet.setter
    def tablet(self, tablet):
        """Sets the tablet of this TileConfigJson.


        :param tablet: The tablet of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if tablet not in allowed_values:
            raise ValueError(
                "Invalid value for `tablet` ({0}), must be one of {1}"  # noqa: E501
                .format(tablet, allowed_values)
            )

        self._tablet = tablet

    @property
    def microsoft365_user(self):
        """Gets the microsoft365_user of this TileConfigJson.  # noqa: E501


        :return: The microsoft365_user of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._microsoft365_user

    @microsoft365_user.setter
    def microsoft365_user(self, microsoft365_user):
        """Sets the microsoft365_user of this TileConfigJson.


        :param microsoft365_user: The microsoft365_user of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if microsoft365_user not in allowed_values:
            raise ValueError(
                "Invalid value for `microsoft365_user` ({0}), must be one of {1}"  # noqa: E501
                .format(microsoft365_user, allowed_values)
            )

        self._microsoft365_user = microsoft365_user

    @property
    def microsoft_teams_calling(self):
        """Gets the microsoft_teams_calling of this TileConfigJson.  # noqa: E501


        :return: The microsoft_teams_calling of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._microsoft_teams_calling

    @microsoft_teams_calling.setter
    def microsoft_teams_calling(self, microsoft_teams_calling):
        """Sets the microsoft_teams_calling of this TileConfigJson.


        :param microsoft_teams_calling: The microsoft_teams_calling of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if microsoft_teams_calling not in allowed_values:
            raise ValueError(
                "Invalid value for `microsoft_teams_calling` ({0}), must be one of {1}"  # noqa: E501
                .format(microsoft_teams_calling, allowed_values)
            )

        self._microsoft_teams_calling = microsoft_teams_calling

    @property
    def microsoft_teams_audio_conferencing(self):
        """Gets the microsoft_teams_audio_conferencing of this TileConfigJson.  # noqa: E501


        :return: The microsoft_teams_audio_conferencing of this TileConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._microsoft_teams_audio_conferencing

    @microsoft_teams_audio_conferencing.setter
    def microsoft_teams_audio_conferencing(self, microsoft_teams_audio_conferencing):
        """Sets the microsoft_teams_audio_conferencing of this TileConfigJson.


        :param microsoft_teams_audio_conferencing: The microsoft_teams_audio_conferencing of this TileConfigJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["SHOW", "HIDE", "ONE_CLICK"]  # noqa: E501
        if microsoft_teams_audio_conferencing not in allowed_values:
            raise ValueError(
                "Invalid value for `microsoft_teams_audio_conferencing` ({0}), must be one of {1}"  # noqa: E501
                .format(microsoft_teams_audio_conferencing, allowed_values)
            )

        self._microsoft_teams_audio_conferencing = microsoft_teams_audio_conferencing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TileConfigJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TileConfigJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
