# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LicenseModulesJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'smacs': 'bool',
        'reports': 'bool',
        'zero_touch': 'bool',
        'high_availability': 'bool'
    }

    attribute_map = {
        'smacs': 'smacs',
        'reports': 'reports',
        'zero_touch': 'zeroTouch',
        'high_availability': 'highAvailability'
    }

    def __init__(self, smacs=None, reports=None, zero_touch=None, high_availability=None):  # noqa: E501
        """LicenseModulesJson - a model defined in Swagger"""  # noqa: E501
        self._smacs = None
        self._reports = None
        self._zero_touch = None
        self._high_availability = None
        self.discriminator = None
        if smacs is not None:
            self.smacs = smacs
        if reports is not None:
            self.reports = reports
        if zero_touch is not None:
            self.zero_touch = zero_touch
        if high_availability is not None:
            self.high_availability = high_availability

    @property
    def smacs(self):
        """Gets the smacs of this LicenseModulesJson.  # noqa: E501


        :return: The smacs of this LicenseModulesJson.  # noqa: E501
        :rtype: bool
        """
        return self._smacs

    @smacs.setter
    def smacs(self, smacs):
        """Sets the smacs of this LicenseModulesJson.


        :param smacs: The smacs of this LicenseModulesJson.  # noqa: E501
        :type: bool
        """

        self._smacs = smacs

    @property
    def reports(self):
        """Gets the reports of this LicenseModulesJson.  # noqa: E501


        :return: The reports of this LicenseModulesJson.  # noqa: E501
        :rtype: bool
        """
        return self._reports

    @reports.setter
    def reports(self, reports):
        """Sets the reports of this LicenseModulesJson.


        :param reports: The reports of this LicenseModulesJson.  # noqa: E501
        :type: bool
        """

        self._reports = reports

    @property
    def zero_touch(self):
        """Gets the zero_touch of this LicenseModulesJson.  # noqa: E501


        :return: The zero_touch of this LicenseModulesJson.  # noqa: E501
        :rtype: bool
        """
        return self._zero_touch

    @zero_touch.setter
    def zero_touch(self, zero_touch):
        """Sets the zero_touch of this LicenseModulesJson.


        :param zero_touch: The zero_touch of this LicenseModulesJson.  # noqa: E501
        :type: bool
        """

        self._zero_touch = zero_touch

    @property
    def high_availability(self):
        """Gets the high_availability of this LicenseModulesJson.  # noqa: E501


        :return: The high_availability of this LicenseModulesJson.  # noqa: E501
        :rtype: bool
        """
        return self._high_availability

    @high_availability.setter
    def high_availability(self, high_availability):
        """Sets the high_availability of this LicenseModulesJson.


        :param high_availability: The high_availability of this LicenseModulesJson.  # noqa: E501
        :type: bool
        """

        self._high_availability = high_availability

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LicenseModulesJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LicenseModulesJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
