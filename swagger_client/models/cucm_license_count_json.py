# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CucmLicenseCountJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cucm_id': 'int',
        'cucm_description': 'str',
        'cuwl_professional': 'int',
        'cuwl_standard': 'int',
        'enhanced_plus': 'int',
        'enhanced': 'int',
        'basic': 'int',
        'total_licenses': 'int'
    }

    attribute_map = {
        'cucm_id': 'cucmId',
        'cucm_description': 'cucmDescription',
        'cuwl_professional': 'cuwlProfessional',
        'cuwl_standard': 'cuwlStandard',
        'enhanced_plus': 'enhancedPlus',
        'enhanced': 'enhanced',
        'basic': 'basic',
        'total_licenses': 'totalLicenses'
    }

    def __init__(self, cucm_id=None, cucm_description=None, cuwl_professional=None, cuwl_standard=None, enhanced_plus=None, enhanced=None, basic=None, total_licenses=None):  # noqa: E501
        """CucmLicenseCountJson - a model defined in Swagger"""  # noqa: E501
        self._cucm_id = None
        self._cucm_description = None
        self._cuwl_professional = None
        self._cuwl_standard = None
        self._enhanced_plus = None
        self._enhanced = None
        self._basic = None
        self._total_licenses = None
        self.discriminator = None
        self.cucm_id = cucm_id
        self.cucm_description = cucm_description
        self.cuwl_professional = cuwl_professional
        self.cuwl_standard = cuwl_standard
        self.enhanced_plus = enhanced_plus
        self.enhanced = enhanced
        self.basic = basic
        self.total_licenses = total_licenses

    @property
    def cucm_id(self):
        """Gets the cucm_id of this CucmLicenseCountJson.  # noqa: E501


        :return: The cucm_id of this CucmLicenseCountJson.  # noqa: E501
        :rtype: int
        """
        return self._cucm_id

    @cucm_id.setter
    def cucm_id(self, cucm_id):
        """Sets the cucm_id of this CucmLicenseCountJson.


        :param cucm_id: The cucm_id of this CucmLicenseCountJson.  # noqa: E501
        :type: int
        """
        if cucm_id is None:
            raise ValueError("Invalid value for `cucm_id`, must not be `None`")  # noqa: E501

        self._cucm_id = cucm_id

    @property
    def cucm_description(self):
        """Gets the cucm_description of this CucmLicenseCountJson.  # noqa: E501


        :return: The cucm_description of this CucmLicenseCountJson.  # noqa: E501
        :rtype: str
        """
        return self._cucm_description

    @cucm_description.setter
    def cucm_description(self, cucm_description):
        """Sets the cucm_description of this CucmLicenseCountJson.


        :param cucm_description: The cucm_description of this CucmLicenseCountJson.  # noqa: E501
        :type: str
        """
        if cucm_description is None:
            raise ValueError("Invalid value for `cucm_description`, must not be `None`")  # noqa: E501

        self._cucm_description = cucm_description

    @property
    def cuwl_professional(self):
        """Gets the cuwl_professional of this CucmLicenseCountJson.  # noqa: E501


        :return: The cuwl_professional of this CucmLicenseCountJson.  # noqa: E501
        :rtype: int
        """
        return self._cuwl_professional

    @cuwl_professional.setter
    def cuwl_professional(self, cuwl_professional):
        """Sets the cuwl_professional of this CucmLicenseCountJson.


        :param cuwl_professional: The cuwl_professional of this CucmLicenseCountJson.  # noqa: E501
        :type: int
        """
        if cuwl_professional is None:
            raise ValueError("Invalid value for `cuwl_professional`, must not be `None`")  # noqa: E501

        self._cuwl_professional = cuwl_professional

    @property
    def cuwl_standard(self):
        """Gets the cuwl_standard of this CucmLicenseCountJson.  # noqa: E501


        :return: The cuwl_standard of this CucmLicenseCountJson.  # noqa: E501
        :rtype: int
        """
        return self._cuwl_standard

    @cuwl_standard.setter
    def cuwl_standard(self, cuwl_standard):
        """Sets the cuwl_standard of this CucmLicenseCountJson.


        :param cuwl_standard: The cuwl_standard of this CucmLicenseCountJson.  # noqa: E501
        :type: int
        """
        if cuwl_standard is None:
            raise ValueError("Invalid value for `cuwl_standard`, must not be `None`")  # noqa: E501

        self._cuwl_standard = cuwl_standard

    @property
    def enhanced_plus(self):
        """Gets the enhanced_plus of this CucmLicenseCountJson.  # noqa: E501


        :return: The enhanced_plus of this CucmLicenseCountJson.  # noqa: E501
        :rtype: int
        """
        return self._enhanced_plus

    @enhanced_plus.setter
    def enhanced_plus(self, enhanced_plus):
        """Sets the enhanced_plus of this CucmLicenseCountJson.


        :param enhanced_plus: The enhanced_plus of this CucmLicenseCountJson.  # noqa: E501
        :type: int
        """
        if enhanced_plus is None:
            raise ValueError("Invalid value for `enhanced_plus`, must not be `None`")  # noqa: E501

        self._enhanced_plus = enhanced_plus

    @property
    def enhanced(self):
        """Gets the enhanced of this CucmLicenseCountJson.  # noqa: E501


        :return: The enhanced of this CucmLicenseCountJson.  # noqa: E501
        :rtype: int
        """
        return self._enhanced

    @enhanced.setter
    def enhanced(self, enhanced):
        """Sets the enhanced of this CucmLicenseCountJson.


        :param enhanced: The enhanced of this CucmLicenseCountJson.  # noqa: E501
        :type: int
        """
        if enhanced is None:
            raise ValueError("Invalid value for `enhanced`, must not be `None`")  # noqa: E501

        self._enhanced = enhanced

    @property
    def basic(self):
        """Gets the basic of this CucmLicenseCountJson.  # noqa: E501


        :return: The basic of this CucmLicenseCountJson.  # noqa: E501
        :rtype: int
        """
        return self._basic

    @basic.setter
    def basic(self, basic):
        """Sets the basic of this CucmLicenseCountJson.


        :param basic: The basic of this CucmLicenseCountJson.  # noqa: E501
        :type: int
        """
        if basic is None:
            raise ValueError("Invalid value for `basic`, must not be `None`")  # noqa: E501

        self._basic = basic

    @property
    def total_licenses(self):
        """Gets the total_licenses of this CucmLicenseCountJson.  # noqa: E501


        :return: The total_licenses of this CucmLicenseCountJson.  # noqa: E501
        :rtype: int
        """
        return self._total_licenses

    @total_licenses.setter
    def total_licenses(self, total_licenses):
        """Sets the total_licenses of this CucmLicenseCountJson.


        :param total_licenses: The total_licenses of this CucmLicenseCountJson.  # noqa: E501
        :type: int
        """
        if total_licenses is None:
            raise ValueError("Invalid value for `total_licenses`, must not be `None`")  # noqa: E501

        self._total_licenses = total_licenses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CucmLicenseCountJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CucmLicenseCountJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
