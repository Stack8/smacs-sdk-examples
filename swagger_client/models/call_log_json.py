# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CallLogJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'calling_party_number': 'str',
        'calling_party_unicode_login_user_id': 'str',
        'date_time_disconnect': 'str',
        'date_time_origination': 'str',
        'dest_call_log_cause': 'CallLogCauseJson',
        'dest_device_name': 'str',
        'dest_device_owner': 'str',
        'duration_in_seconds': 'int',
        'final_called_party_number': 'str',
        'final_called_party_unicode_login_user_id': 'str',
        'last_redirect_dn': 'str',
        'orig_call_log_cause': 'CallLogCauseJson',
        'orig_device_name': 'str',
        'orig_device_owner': 'str',
        'original_called_party_number': 'str',
        'dest_cause': 'CallLogCauseJson',
        'orig_cause': 'CallLogCauseJson'
    }

    attribute_map = {
        'calling_party_number': 'callingPartyNumber',
        'calling_party_unicode_login_user_id': 'callingPartyUnicodeLoginUserID',
        'date_time_disconnect': 'dateTimeDisconnect',
        'date_time_origination': 'dateTimeOrigination',
        'dest_call_log_cause': 'destCallLogCause',
        'dest_device_name': 'destDeviceName',
        'dest_device_owner': 'destDeviceOwner',
        'duration_in_seconds': 'durationInSeconds',
        'final_called_party_number': 'finalCalledPartyNumber',
        'final_called_party_unicode_login_user_id': 'finalCalledPartyUnicodeLoginUserID',
        'last_redirect_dn': 'lastRedirectDn',
        'orig_call_log_cause': 'origCallLogCause',
        'orig_device_name': 'origDeviceName',
        'orig_device_owner': 'origDeviceOwner',
        'original_called_party_number': 'originalCalledPartyNumber',
        'dest_cause': 'destCause',
        'orig_cause': 'origCause'
    }

    def __init__(self, calling_party_number=None, calling_party_unicode_login_user_id=None, date_time_disconnect=None, date_time_origination=None, dest_call_log_cause=None, dest_device_name=None, dest_device_owner=None, duration_in_seconds=None, final_called_party_number=None, final_called_party_unicode_login_user_id=None, last_redirect_dn=None, orig_call_log_cause=None, orig_device_name=None, orig_device_owner=None, original_called_party_number=None, dest_cause=None, orig_cause=None):  # noqa: E501
        """CallLogJson - a model defined in Swagger"""  # noqa: E501
        self._calling_party_number = None
        self._calling_party_unicode_login_user_id = None
        self._date_time_disconnect = None
        self._date_time_origination = None
        self._dest_call_log_cause = None
        self._dest_device_name = None
        self._dest_device_owner = None
        self._duration_in_seconds = None
        self._final_called_party_number = None
        self._final_called_party_unicode_login_user_id = None
        self._last_redirect_dn = None
        self._orig_call_log_cause = None
        self._orig_device_name = None
        self._orig_device_owner = None
        self._original_called_party_number = None
        self._dest_cause = None
        self._orig_cause = None
        self.discriminator = None
        self.calling_party_number = calling_party_number
        self.calling_party_unicode_login_user_id = calling_party_unicode_login_user_id
        self.date_time_disconnect = date_time_disconnect
        self.date_time_origination = date_time_origination
        if dest_call_log_cause is not None:
            self.dest_call_log_cause = dest_call_log_cause
        self.dest_device_name = dest_device_name
        self.dest_device_owner = dest_device_owner
        self.duration_in_seconds = duration_in_seconds
        self.final_called_party_number = final_called_party_number
        self.final_called_party_unicode_login_user_id = final_called_party_unicode_login_user_id
        self.last_redirect_dn = last_redirect_dn
        if orig_call_log_cause is not None:
            self.orig_call_log_cause = orig_call_log_cause
        self.orig_device_name = orig_device_name
        self.orig_device_owner = orig_device_owner
        self.original_called_party_number = original_called_party_number
        if dest_cause is not None:
            self.dest_cause = dest_cause
        if orig_cause is not None:
            self.orig_cause = orig_cause

    @property
    def calling_party_number(self):
        """Gets the calling_party_number of this CallLogJson.  # noqa: E501


        :return: The calling_party_number of this CallLogJson.  # noqa: E501
        :rtype: str
        """
        return self._calling_party_number

    @calling_party_number.setter
    def calling_party_number(self, calling_party_number):
        """Sets the calling_party_number of this CallLogJson.


        :param calling_party_number: The calling_party_number of this CallLogJson.  # noqa: E501
        :type: str
        """
        if calling_party_number is None:
            raise ValueError("Invalid value for `calling_party_number`, must not be `None`")  # noqa: E501

        self._calling_party_number = calling_party_number

    @property
    def calling_party_unicode_login_user_id(self):
        """Gets the calling_party_unicode_login_user_id of this CallLogJson.  # noqa: E501


        :return: The calling_party_unicode_login_user_id of this CallLogJson.  # noqa: E501
        :rtype: str
        """
        return self._calling_party_unicode_login_user_id

    @calling_party_unicode_login_user_id.setter
    def calling_party_unicode_login_user_id(self, calling_party_unicode_login_user_id):
        """Sets the calling_party_unicode_login_user_id of this CallLogJson.


        :param calling_party_unicode_login_user_id: The calling_party_unicode_login_user_id of this CallLogJson.  # noqa: E501
        :type: str
        """
        if calling_party_unicode_login_user_id is None:
            raise ValueError("Invalid value for `calling_party_unicode_login_user_id`, must not be `None`")  # noqa: E501

        self._calling_party_unicode_login_user_id = calling_party_unicode_login_user_id

    @property
    def date_time_disconnect(self):
        """Gets the date_time_disconnect of this CallLogJson.  # noqa: E501


        :return: The date_time_disconnect of this CallLogJson.  # noqa: E501
        :rtype: str
        """
        return self._date_time_disconnect

    @date_time_disconnect.setter
    def date_time_disconnect(self, date_time_disconnect):
        """Sets the date_time_disconnect of this CallLogJson.


        :param date_time_disconnect: The date_time_disconnect of this CallLogJson.  # noqa: E501
        :type: str
        """
        if date_time_disconnect is None:
            raise ValueError("Invalid value for `date_time_disconnect`, must not be `None`")  # noqa: E501

        self._date_time_disconnect = date_time_disconnect

    @property
    def date_time_origination(self):
        """Gets the date_time_origination of this CallLogJson.  # noqa: E501


        :return: The date_time_origination of this CallLogJson.  # noqa: E501
        :rtype: str
        """
        return self._date_time_origination

    @date_time_origination.setter
    def date_time_origination(self, date_time_origination):
        """Sets the date_time_origination of this CallLogJson.


        :param date_time_origination: The date_time_origination of this CallLogJson.  # noqa: E501
        :type: str
        """
        if date_time_origination is None:
            raise ValueError("Invalid value for `date_time_origination`, must not be `None`")  # noqa: E501

        self._date_time_origination = date_time_origination

    @property
    def dest_call_log_cause(self):
        """Gets the dest_call_log_cause of this CallLogJson.  # noqa: E501


        :return: The dest_call_log_cause of this CallLogJson.  # noqa: E501
        :rtype: CallLogCauseJson
        """
        return self._dest_call_log_cause

    @dest_call_log_cause.setter
    def dest_call_log_cause(self, dest_call_log_cause):
        """Sets the dest_call_log_cause of this CallLogJson.


        :param dest_call_log_cause: The dest_call_log_cause of this CallLogJson.  # noqa: E501
        :type: CallLogCauseJson
        """

        self._dest_call_log_cause = dest_call_log_cause

    @property
    def dest_device_name(self):
        """Gets the dest_device_name of this CallLogJson.  # noqa: E501


        :return: The dest_device_name of this CallLogJson.  # noqa: E501
        :rtype: str
        """
        return self._dest_device_name

    @dest_device_name.setter
    def dest_device_name(self, dest_device_name):
        """Sets the dest_device_name of this CallLogJson.


        :param dest_device_name: The dest_device_name of this CallLogJson.  # noqa: E501
        :type: str
        """
        if dest_device_name is None:
            raise ValueError("Invalid value for `dest_device_name`, must not be `None`")  # noqa: E501

        self._dest_device_name = dest_device_name

    @property
    def dest_device_owner(self):
        """Gets the dest_device_owner of this CallLogJson.  # noqa: E501


        :return: The dest_device_owner of this CallLogJson.  # noqa: E501
        :rtype: str
        """
        return self._dest_device_owner

    @dest_device_owner.setter
    def dest_device_owner(self, dest_device_owner):
        """Sets the dest_device_owner of this CallLogJson.


        :param dest_device_owner: The dest_device_owner of this CallLogJson.  # noqa: E501
        :type: str
        """
        if dest_device_owner is None:
            raise ValueError("Invalid value for `dest_device_owner`, must not be `None`")  # noqa: E501

        self._dest_device_owner = dest_device_owner

    @property
    def duration_in_seconds(self):
        """Gets the duration_in_seconds of this CallLogJson.  # noqa: E501


        :return: The duration_in_seconds of this CallLogJson.  # noqa: E501
        :rtype: int
        """
        return self._duration_in_seconds

    @duration_in_seconds.setter
    def duration_in_seconds(self, duration_in_seconds):
        """Sets the duration_in_seconds of this CallLogJson.


        :param duration_in_seconds: The duration_in_seconds of this CallLogJson.  # noqa: E501
        :type: int
        """
        if duration_in_seconds is None:
            raise ValueError("Invalid value for `duration_in_seconds`, must not be `None`")  # noqa: E501

        self._duration_in_seconds = duration_in_seconds

    @property
    def final_called_party_number(self):
        """Gets the final_called_party_number of this CallLogJson.  # noqa: E501


        :return: The final_called_party_number of this CallLogJson.  # noqa: E501
        :rtype: str
        """
        return self._final_called_party_number

    @final_called_party_number.setter
    def final_called_party_number(self, final_called_party_number):
        """Sets the final_called_party_number of this CallLogJson.


        :param final_called_party_number: The final_called_party_number of this CallLogJson.  # noqa: E501
        :type: str
        """
        if final_called_party_number is None:
            raise ValueError("Invalid value for `final_called_party_number`, must not be `None`")  # noqa: E501

        self._final_called_party_number = final_called_party_number

    @property
    def final_called_party_unicode_login_user_id(self):
        """Gets the final_called_party_unicode_login_user_id of this CallLogJson.  # noqa: E501


        :return: The final_called_party_unicode_login_user_id of this CallLogJson.  # noqa: E501
        :rtype: str
        """
        return self._final_called_party_unicode_login_user_id

    @final_called_party_unicode_login_user_id.setter
    def final_called_party_unicode_login_user_id(self, final_called_party_unicode_login_user_id):
        """Sets the final_called_party_unicode_login_user_id of this CallLogJson.


        :param final_called_party_unicode_login_user_id: The final_called_party_unicode_login_user_id of this CallLogJson.  # noqa: E501
        :type: str
        """
        if final_called_party_unicode_login_user_id is None:
            raise ValueError("Invalid value for `final_called_party_unicode_login_user_id`, must not be `None`")  # noqa: E501

        self._final_called_party_unicode_login_user_id = final_called_party_unicode_login_user_id

    @property
    def last_redirect_dn(self):
        """Gets the last_redirect_dn of this CallLogJson.  # noqa: E501


        :return: The last_redirect_dn of this CallLogJson.  # noqa: E501
        :rtype: str
        """
        return self._last_redirect_dn

    @last_redirect_dn.setter
    def last_redirect_dn(self, last_redirect_dn):
        """Sets the last_redirect_dn of this CallLogJson.


        :param last_redirect_dn: The last_redirect_dn of this CallLogJson.  # noqa: E501
        :type: str
        """
        if last_redirect_dn is None:
            raise ValueError("Invalid value for `last_redirect_dn`, must not be `None`")  # noqa: E501

        self._last_redirect_dn = last_redirect_dn

    @property
    def orig_call_log_cause(self):
        """Gets the orig_call_log_cause of this CallLogJson.  # noqa: E501


        :return: The orig_call_log_cause of this CallLogJson.  # noqa: E501
        :rtype: CallLogCauseJson
        """
        return self._orig_call_log_cause

    @orig_call_log_cause.setter
    def orig_call_log_cause(self, orig_call_log_cause):
        """Sets the orig_call_log_cause of this CallLogJson.


        :param orig_call_log_cause: The orig_call_log_cause of this CallLogJson.  # noqa: E501
        :type: CallLogCauseJson
        """

        self._orig_call_log_cause = orig_call_log_cause

    @property
    def orig_device_name(self):
        """Gets the orig_device_name of this CallLogJson.  # noqa: E501


        :return: The orig_device_name of this CallLogJson.  # noqa: E501
        :rtype: str
        """
        return self._orig_device_name

    @orig_device_name.setter
    def orig_device_name(self, orig_device_name):
        """Sets the orig_device_name of this CallLogJson.


        :param orig_device_name: The orig_device_name of this CallLogJson.  # noqa: E501
        :type: str
        """
        if orig_device_name is None:
            raise ValueError("Invalid value for `orig_device_name`, must not be `None`")  # noqa: E501

        self._orig_device_name = orig_device_name

    @property
    def orig_device_owner(self):
        """Gets the orig_device_owner of this CallLogJson.  # noqa: E501


        :return: The orig_device_owner of this CallLogJson.  # noqa: E501
        :rtype: str
        """
        return self._orig_device_owner

    @orig_device_owner.setter
    def orig_device_owner(self, orig_device_owner):
        """Sets the orig_device_owner of this CallLogJson.


        :param orig_device_owner: The orig_device_owner of this CallLogJson.  # noqa: E501
        :type: str
        """
        if orig_device_owner is None:
            raise ValueError("Invalid value for `orig_device_owner`, must not be `None`")  # noqa: E501

        self._orig_device_owner = orig_device_owner

    @property
    def original_called_party_number(self):
        """Gets the original_called_party_number of this CallLogJson.  # noqa: E501


        :return: The original_called_party_number of this CallLogJson.  # noqa: E501
        :rtype: str
        """
        return self._original_called_party_number

    @original_called_party_number.setter
    def original_called_party_number(self, original_called_party_number):
        """Sets the original_called_party_number of this CallLogJson.


        :param original_called_party_number: The original_called_party_number of this CallLogJson.  # noqa: E501
        :type: str
        """
        if original_called_party_number is None:
            raise ValueError("Invalid value for `original_called_party_number`, must not be `None`")  # noqa: E501

        self._original_called_party_number = original_called_party_number

    @property
    def dest_cause(self):
        """Gets the dest_cause of this CallLogJson.  # noqa: E501


        :return: The dest_cause of this CallLogJson.  # noqa: E501
        :rtype: CallLogCauseJson
        """
        return self._dest_cause

    @dest_cause.setter
    def dest_cause(self, dest_cause):
        """Sets the dest_cause of this CallLogJson.


        :param dest_cause: The dest_cause of this CallLogJson.  # noqa: E501
        :type: CallLogCauseJson
        """

        self._dest_cause = dest_cause

    @property
    def orig_cause(self):
        """Gets the orig_cause of this CallLogJson.  # noqa: E501


        :return: The orig_cause of this CallLogJson.  # noqa: E501
        :rtype: CallLogCauseJson
        """
        return self._orig_cause

    @orig_cause.setter
    def orig_cause(self, orig_cause):
        """Sets the orig_cause of this CallLogJson.


        :param orig_cause: The orig_cause of this CallLogJson.  # noqa: E501
        :type: CallLogCauseJson
        """

        self._orig_cause = orig_cause

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CallLogJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CallLogJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
