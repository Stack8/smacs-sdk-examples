# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceModelMetadataJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'model': 'str',
        'name_format': 'str',
        'sccp_setting': 'DeviceModelProtocolMetadataJson',
        'sip_setting': 'DeviceModelProtocolMetadataJson',
        'remote_destination_setting': 'DeviceModelProtocolMetadataJson',
        'unspecified_setting': 'DeviceModelProtocolMetadataJson'
    }

    attribute_map = {
        'model': 'model',
        'name_format': 'nameFormat',
        'sccp_setting': 'sccpSetting',
        'sip_setting': 'sipSetting',
        'remote_destination_setting': 'remoteDestinationSetting',
        'unspecified_setting': 'unspecifiedSetting'
    }

    def __init__(self, model=None, name_format=None, sccp_setting=None, sip_setting=None, remote_destination_setting=None, unspecified_setting=None):  # noqa: E501
        """DeviceModelMetadataJson - a model defined in Swagger"""  # noqa: E501
        self._model = None
        self._name_format = None
        self._sccp_setting = None
        self._sip_setting = None
        self._remote_destination_setting = None
        self._unspecified_setting = None
        self.discriminator = None
        self.model = model
        self.name_format = name_format
        if sccp_setting is not None:
            self.sccp_setting = sccp_setting
        if sip_setting is not None:
            self.sip_setting = sip_setting
        if remote_destination_setting is not None:
            self.remote_destination_setting = remote_destination_setting
        if unspecified_setting is not None:
            self.unspecified_setting = unspecified_setting

    @property
    def model(self):
        """Gets the model of this DeviceModelMetadataJson.  # noqa: E501


        :return: The model of this DeviceModelMetadataJson.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeviceModelMetadataJson.


        :param model: The model of this DeviceModelMetadataJson.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def name_format(self):
        """Gets the name_format of this DeviceModelMetadataJson.  # noqa: E501


        :return: The name_format of this DeviceModelMetadataJson.  # noqa: E501
        :rtype: str
        """
        return self._name_format

    @name_format.setter
    def name_format(self, name_format):
        """Sets the name_format of this DeviceModelMetadataJson.


        :param name_format: The name_format of this DeviceModelMetadataJson.  # noqa: E501
        :type: str
        """
        if name_format is None:
            raise ValueError("Invalid value for `name_format`, must not be `None`")  # noqa: E501

        self._name_format = name_format

    @property
    def sccp_setting(self):
        """Gets the sccp_setting of this DeviceModelMetadataJson.  # noqa: E501


        :return: The sccp_setting of this DeviceModelMetadataJson.  # noqa: E501
        :rtype: DeviceModelProtocolMetadataJson
        """
        return self._sccp_setting

    @sccp_setting.setter
    def sccp_setting(self, sccp_setting):
        """Sets the sccp_setting of this DeviceModelMetadataJson.


        :param sccp_setting: The sccp_setting of this DeviceModelMetadataJson.  # noqa: E501
        :type: DeviceModelProtocolMetadataJson
        """

        self._sccp_setting = sccp_setting

    @property
    def sip_setting(self):
        """Gets the sip_setting of this DeviceModelMetadataJson.  # noqa: E501


        :return: The sip_setting of this DeviceModelMetadataJson.  # noqa: E501
        :rtype: DeviceModelProtocolMetadataJson
        """
        return self._sip_setting

    @sip_setting.setter
    def sip_setting(self, sip_setting):
        """Sets the sip_setting of this DeviceModelMetadataJson.


        :param sip_setting: The sip_setting of this DeviceModelMetadataJson.  # noqa: E501
        :type: DeviceModelProtocolMetadataJson
        """

        self._sip_setting = sip_setting

    @property
    def remote_destination_setting(self):
        """Gets the remote_destination_setting of this DeviceModelMetadataJson.  # noqa: E501


        :return: The remote_destination_setting of this DeviceModelMetadataJson.  # noqa: E501
        :rtype: DeviceModelProtocolMetadataJson
        """
        return self._remote_destination_setting

    @remote_destination_setting.setter
    def remote_destination_setting(self, remote_destination_setting):
        """Sets the remote_destination_setting of this DeviceModelMetadataJson.


        :param remote_destination_setting: The remote_destination_setting of this DeviceModelMetadataJson.  # noqa: E501
        :type: DeviceModelProtocolMetadataJson
        """

        self._remote_destination_setting = remote_destination_setting

    @property
    def unspecified_setting(self):
        """Gets the unspecified_setting of this DeviceModelMetadataJson.  # noqa: E501


        :return: The unspecified_setting of this DeviceModelMetadataJson.  # noqa: E501
        :rtype: DeviceModelProtocolMetadataJson
        """
        return self._unspecified_setting

    @unspecified_setting.setter
    def unspecified_setting(self, unspecified_setting):
        """Sets the unspecified_setting of this DeviceModelMetadataJson.


        :param unspecified_setting: The unspecified_setting of this DeviceModelMetadataJson.  # noqa: E501
        :type: DeviceModelProtocolMetadataJson
        """

        self._unspecified_setting = unspecified_setting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceModelMetadataJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceModelMetadataJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
