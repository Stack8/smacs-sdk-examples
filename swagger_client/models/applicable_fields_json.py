# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ApplicableFieldsJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'label': 'bool',
        'internal_caller_id': 'bool',
        'external_caller_id': 'bool',
        'external_caller_id_number': 'bool',
        'ring_idle': 'bool',
        'ring_active': 'bool',
        'max_number_of_calls': 'bool',
        'busy_trigger': 'bool',
        'call_recording_option': 'bool',
        'call_recording_profile': 'bool',
        'call_recording_media_source': 'bool',
        'associated_end_users': 'bool',
        'monitoring_css_name': 'bool'
    }

    attribute_map = {
        'label': 'label',
        'internal_caller_id': 'internalCallerId',
        'external_caller_id': 'externalCallerId',
        'external_caller_id_number': 'externalCallerIdNumber',
        'ring_idle': 'ringIdle',
        'ring_active': 'ringActive',
        'max_number_of_calls': 'maxNumberOfCalls',
        'busy_trigger': 'busyTrigger',
        'call_recording_option': 'callRecordingOption',
        'call_recording_profile': 'callRecordingProfile',
        'call_recording_media_source': 'callRecordingMediaSource',
        'associated_end_users': 'associatedEndUsers',
        'monitoring_css_name': 'monitoringCssName'
    }

    def __init__(self, label=None, internal_caller_id=None, external_caller_id=None, external_caller_id_number=None, ring_idle=None, ring_active=None, max_number_of_calls=None, busy_trigger=None, call_recording_option=None, call_recording_profile=None, call_recording_media_source=None, associated_end_users=None, monitoring_css_name=None):  # noqa: E501
        """ApplicableFieldsJson - a model defined in Swagger"""  # noqa: E501
        self._label = None
        self._internal_caller_id = None
        self._external_caller_id = None
        self._external_caller_id_number = None
        self._ring_idle = None
        self._ring_active = None
        self._max_number_of_calls = None
        self._busy_trigger = None
        self._call_recording_option = None
        self._call_recording_profile = None
        self._call_recording_media_source = None
        self._associated_end_users = None
        self._monitoring_css_name = None
        self.discriminator = None
        self.label = label
        self.internal_caller_id = internal_caller_id
        self.external_caller_id = external_caller_id
        self.external_caller_id_number = external_caller_id_number
        self.ring_idle = ring_idle
        self.ring_active = ring_active
        self.max_number_of_calls = max_number_of_calls
        self.busy_trigger = busy_trigger
        self.call_recording_option = call_recording_option
        self.call_recording_profile = call_recording_profile
        self.call_recording_media_source = call_recording_media_source
        self.associated_end_users = associated_end_users
        self.monitoring_css_name = monitoring_css_name

    @property
    def label(self):
        """Gets the label of this ApplicableFieldsJson.  # noqa: E501


        :return: The label of this ApplicableFieldsJson.  # noqa: E501
        :rtype: bool
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this ApplicableFieldsJson.


        :param label: The label of this ApplicableFieldsJson.  # noqa: E501
        :type: bool
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def internal_caller_id(self):
        """Gets the internal_caller_id of this ApplicableFieldsJson.  # noqa: E501


        :return: The internal_caller_id of this ApplicableFieldsJson.  # noqa: E501
        :rtype: bool
        """
        return self._internal_caller_id

    @internal_caller_id.setter
    def internal_caller_id(self, internal_caller_id):
        """Sets the internal_caller_id of this ApplicableFieldsJson.


        :param internal_caller_id: The internal_caller_id of this ApplicableFieldsJson.  # noqa: E501
        :type: bool
        """
        if internal_caller_id is None:
            raise ValueError("Invalid value for `internal_caller_id`, must not be `None`")  # noqa: E501

        self._internal_caller_id = internal_caller_id

    @property
    def external_caller_id(self):
        """Gets the external_caller_id of this ApplicableFieldsJson.  # noqa: E501


        :return: The external_caller_id of this ApplicableFieldsJson.  # noqa: E501
        :rtype: bool
        """
        return self._external_caller_id

    @external_caller_id.setter
    def external_caller_id(self, external_caller_id):
        """Sets the external_caller_id of this ApplicableFieldsJson.


        :param external_caller_id: The external_caller_id of this ApplicableFieldsJson.  # noqa: E501
        :type: bool
        """
        if external_caller_id is None:
            raise ValueError("Invalid value for `external_caller_id`, must not be `None`")  # noqa: E501

        self._external_caller_id = external_caller_id

    @property
    def external_caller_id_number(self):
        """Gets the external_caller_id_number of this ApplicableFieldsJson.  # noqa: E501


        :return: The external_caller_id_number of this ApplicableFieldsJson.  # noqa: E501
        :rtype: bool
        """
        return self._external_caller_id_number

    @external_caller_id_number.setter
    def external_caller_id_number(self, external_caller_id_number):
        """Sets the external_caller_id_number of this ApplicableFieldsJson.


        :param external_caller_id_number: The external_caller_id_number of this ApplicableFieldsJson.  # noqa: E501
        :type: bool
        """
        if external_caller_id_number is None:
            raise ValueError("Invalid value for `external_caller_id_number`, must not be `None`")  # noqa: E501

        self._external_caller_id_number = external_caller_id_number

    @property
    def ring_idle(self):
        """Gets the ring_idle of this ApplicableFieldsJson.  # noqa: E501


        :return: The ring_idle of this ApplicableFieldsJson.  # noqa: E501
        :rtype: bool
        """
        return self._ring_idle

    @ring_idle.setter
    def ring_idle(self, ring_idle):
        """Sets the ring_idle of this ApplicableFieldsJson.


        :param ring_idle: The ring_idle of this ApplicableFieldsJson.  # noqa: E501
        :type: bool
        """
        if ring_idle is None:
            raise ValueError("Invalid value for `ring_idle`, must not be `None`")  # noqa: E501

        self._ring_idle = ring_idle

    @property
    def ring_active(self):
        """Gets the ring_active of this ApplicableFieldsJson.  # noqa: E501


        :return: The ring_active of this ApplicableFieldsJson.  # noqa: E501
        :rtype: bool
        """
        return self._ring_active

    @ring_active.setter
    def ring_active(self, ring_active):
        """Sets the ring_active of this ApplicableFieldsJson.


        :param ring_active: The ring_active of this ApplicableFieldsJson.  # noqa: E501
        :type: bool
        """
        if ring_active is None:
            raise ValueError("Invalid value for `ring_active`, must not be `None`")  # noqa: E501

        self._ring_active = ring_active

    @property
    def max_number_of_calls(self):
        """Gets the max_number_of_calls of this ApplicableFieldsJson.  # noqa: E501


        :return: The max_number_of_calls of this ApplicableFieldsJson.  # noqa: E501
        :rtype: bool
        """
        return self._max_number_of_calls

    @max_number_of_calls.setter
    def max_number_of_calls(self, max_number_of_calls):
        """Sets the max_number_of_calls of this ApplicableFieldsJson.


        :param max_number_of_calls: The max_number_of_calls of this ApplicableFieldsJson.  # noqa: E501
        :type: bool
        """
        if max_number_of_calls is None:
            raise ValueError("Invalid value for `max_number_of_calls`, must not be `None`")  # noqa: E501

        self._max_number_of_calls = max_number_of_calls

    @property
    def busy_trigger(self):
        """Gets the busy_trigger of this ApplicableFieldsJson.  # noqa: E501


        :return: The busy_trigger of this ApplicableFieldsJson.  # noqa: E501
        :rtype: bool
        """
        return self._busy_trigger

    @busy_trigger.setter
    def busy_trigger(self, busy_trigger):
        """Sets the busy_trigger of this ApplicableFieldsJson.


        :param busy_trigger: The busy_trigger of this ApplicableFieldsJson.  # noqa: E501
        :type: bool
        """
        if busy_trigger is None:
            raise ValueError("Invalid value for `busy_trigger`, must not be `None`")  # noqa: E501

        self._busy_trigger = busy_trigger

    @property
    def call_recording_option(self):
        """Gets the call_recording_option of this ApplicableFieldsJson.  # noqa: E501


        :return: The call_recording_option of this ApplicableFieldsJson.  # noqa: E501
        :rtype: bool
        """
        return self._call_recording_option

    @call_recording_option.setter
    def call_recording_option(self, call_recording_option):
        """Sets the call_recording_option of this ApplicableFieldsJson.


        :param call_recording_option: The call_recording_option of this ApplicableFieldsJson.  # noqa: E501
        :type: bool
        """
        if call_recording_option is None:
            raise ValueError("Invalid value for `call_recording_option`, must not be `None`")  # noqa: E501

        self._call_recording_option = call_recording_option

    @property
    def call_recording_profile(self):
        """Gets the call_recording_profile of this ApplicableFieldsJson.  # noqa: E501


        :return: The call_recording_profile of this ApplicableFieldsJson.  # noqa: E501
        :rtype: bool
        """
        return self._call_recording_profile

    @call_recording_profile.setter
    def call_recording_profile(self, call_recording_profile):
        """Sets the call_recording_profile of this ApplicableFieldsJson.


        :param call_recording_profile: The call_recording_profile of this ApplicableFieldsJson.  # noqa: E501
        :type: bool
        """
        if call_recording_profile is None:
            raise ValueError("Invalid value for `call_recording_profile`, must not be `None`")  # noqa: E501

        self._call_recording_profile = call_recording_profile

    @property
    def call_recording_media_source(self):
        """Gets the call_recording_media_source of this ApplicableFieldsJson.  # noqa: E501


        :return: The call_recording_media_source of this ApplicableFieldsJson.  # noqa: E501
        :rtype: bool
        """
        return self._call_recording_media_source

    @call_recording_media_source.setter
    def call_recording_media_source(self, call_recording_media_source):
        """Sets the call_recording_media_source of this ApplicableFieldsJson.


        :param call_recording_media_source: The call_recording_media_source of this ApplicableFieldsJson.  # noqa: E501
        :type: bool
        """
        if call_recording_media_source is None:
            raise ValueError("Invalid value for `call_recording_media_source`, must not be `None`")  # noqa: E501

        self._call_recording_media_source = call_recording_media_source

    @property
    def associated_end_users(self):
        """Gets the associated_end_users of this ApplicableFieldsJson.  # noqa: E501


        :return: The associated_end_users of this ApplicableFieldsJson.  # noqa: E501
        :rtype: bool
        """
        return self._associated_end_users

    @associated_end_users.setter
    def associated_end_users(self, associated_end_users):
        """Sets the associated_end_users of this ApplicableFieldsJson.


        :param associated_end_users: The associated_end_users of this ApplicableFieldsJson.  # noqa: E501
        :type: bool
        """
        if associated_end_users is None:
            raise ValueError("Invalid value for `associated_end_users`, must not be `None`")  # noqa: E501

        self._associated_end_users = associated_end_users

    @property
    def monitoring_css_name(self):
        """Gets the monitoring_css_name of this ApplicableFieldsJson.  # noqa: E501


        :return: The monitoring_css_name of this ApplicableFieldsJson.  # noqa: E501
        :rtype: bool
        """
        return self._monitoring_css_name

    @monitoring_css_name.setter
    def monitoring_css_name(self, monitoring_css_name):
        """Sets the monitoring_css_name of this ApplicableFieldsJson.


        :param monitoring_css_name: The monitoring_css_name of this ApplicableFieldsJson.  # noqa: E501
        :type: bool
        """
        if monitoring_css_name is None:
            raise ValueError("Invalid value for `monitoring_css_name`, must not be `None`")  # noqa: E501

        self._monitoring_css_name = monitoring_css_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ApplicableFieldsJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApplicableFieldsJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
