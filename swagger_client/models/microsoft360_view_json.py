# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Microsoft360ViewJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'microsoft365_user': 'Microsoft365UserJson',
        'teams_line_status': 'str',
        'teams_line': 'MicrosoftTeamsLineJson',
        'teams_audio_conferencing_status': 'str',
        'teams_audio_conferencing': 'MicrosoftTeamsAudioConferencingJson',
        'photo_base64': 'str'
    }

    attribute_map = {
        'microsoft365_user': 'microsoft365User',
        'teams_line_status': 'teamsLineStatus',
        'teams_line': 'teamsLine',
        'teams_audio_conferencing_status': 'teamsAudioConferencingStatus',
        'teams_audio_conferencing': 'teamsAudioConferencing',
        'photo_base64': 'photoBase64'
    }

    def __init__(self, microsoft365_user=None, teams_line_status=None, teams_line=None, teams_audio_conferencing_status=None, teams_audio_conferencing=None, photo_base64=None):  # noqa: E501
        """Microsoft360ViewJson - a model defined in Swagger"""  # noqa: E501
        self._microsoft365_user = None
        self._teams_line_status = None
        self._teams_line = None
        self._teams_audio_conferencing_status = None
        self._teams_audio_conferencing = None
        self._photo_base64 = None
        self.discriminator = None
        self.microsoft365_user = microsoft365_user
        self.teams_line_status = teams_line_status
        if teams_line is not None:
            self.teams_line = teams_line
        self.teams_audio_conferencing_status = teams_audio_conferencing_status
        if teams_audio_conferencing is not None:
            self.teams_audio_conferencing = teams_audio_conferencing
        self.photo_base64 = photo_base64

    @property
    def microsoft365_user(self):
        """Gets the microsoft365_user of this Microsoft360ViewJson.  # noqa: E501


        :return: The microsoft365_user of this Microsoft360ViewJson.  # noqa: E501
        :rtype: Microsoft365UserJson
        """
        return self._microsoft365_user

    @microsoft365_user.setter
    def microsoft365_user(self, microsoft365_user):
        """Sets the microsoft365_user of this Microsoft360ViewJson.


        :param microsoft365_user: The microsoft365_user of this Microsoft360ViewJson.  # noqa: E501
        :type: Microsoft365UserJson
        """
        if microsoft365_user is None:
            raise ValueError("Invalid value for `microsoft365_user`, must not be `None`")  # noqa: E501

        self._microsoft365_user = microsoft365_user

    @property
    def teams_line_status(self):
        """Gets the teams_line_status of this Microsoft360ViewJson.  # noqa: E501


        :return: The teams_line_status of this Microsoft360ViewJson.  # noqa: E501
        :rtype: str
        """
        return self._teams_line_status

    @teams_line_status.setter
    def teams_line_status(self, teams_line_status):
        """Sets the teams_line_status of this Microsoft360ViewJson.


        :param teams_line_status: The teams_line_status of this Microsoft360ViewJson.  # noqa: E501
        :type: str
        """
        if teams_line_status is None:
            raise ValueError("Invalid value for `teams_line_status`, must not be `None`")  # noqa: E501
        allowed_values = ["UNLICENSED", "LICENSING_IN_PROGRESS", "LICENSED"]  # noqa: E501
        if teams_line_status not in allowed_values:
            raise ValueError(
                "Invalid value for `teams_line_status` ({0}), must be one of {1}"  # noqa: E501
                .format(teams_line_status, allowed_values)
            )

        self._teams_line_status = teams_line_status

    @property
    def teams_line(self):
        """Gets the teams_line of this Microsoft360ViewJson.  # noqa: E501


        :return: The teams_line of this Microsoft360ViewJson.  # noqa: E501
        :rtype: MicrosoftTeamsLineJson
        """
        return self._teams_line

    @teams_line.setter
    def teams_line(self, teams_line):
        """Sets the teams_line of this Microsoft360ViewJson.


        :param teams_line: The teams_line of this Microsoft360ViewJson.  # noqa: E501
        :type: MicrosoftTeamsLineJson
        """

        self._teams_line = teams_line

    @property
    def teams_audio_conferencing_status(self):
        """Gets the teams_audio_conferencing_status of this Microsoft360ViewJson.  # noqa: E501


        :return: The teams_audio_conferencing_status of this Microsoft360ViewJson.  # noqa: E501
        :rtype: str
        """
        return self._teams_audio_conferencing_status

    @teams_audio_conferencing_status.setter
    def teams_audio_conferencing_status(self, teams_audio_conferencing_status):
        """Sets the teams_audio_conferencing_status of this Microsoft360ViewJson.


        :param teams_audio_conferencing_status: The teams_audio_conferencing_status of this Microsoft360ViewJson.  # noqa: E501
        :type: str
        """
        if teams_audio_conferencing_status is None:
            raise ValueError("Invalid value for `teams_audio_conferencing_status`, must not be `None`")  # noqa: E501
        allowed_values = ["UNLICENSED", "LICENSING_IN_PROGRESS", "LICENSED"]  # noqa: E501
        if teams_audio_conferencing_status not in allowed_values:
            raise ValueError(
                "Invalid value for `teams_audio_conferencing_status` ({0}), must be one of {1}"  # noqa: E501
                .format(teams_audio_conferencing_status, allowed_values)
            )

        self._teams_audio_conferencing_status = teams_audio_conferencing_status

    @property
    def teams_audio_conferencing(self):
        """Gets the teams_audio_conferencing of this Microsoft360ViewJson.  # noqa: E501


        :return: The teams_audio_conferencing of this Microsoft360ViewJson.  # noqa: E501
        :rtype: MicrosoftTeamsAudioConferencingJson
        """
        return self._teams_audio_conferencing

    @teams_audio_conferencing.setter
    def teams_audio_conferencing(self, teams_audio_conferencing):
        """Sets the teams_audio_conferencing of this Microsoft360ViewJson.


        :param teams_audio_conferencing: The teams_audio_conferencing of this Microsoft360ViewJson.  # noqa: E501
        :type: MicrosoftTeamsAudioConferencingJson
        """

        self._teams_audio_conferencing = teams_audio_conferencing

    @property
    def photo_base64(self):
        """Gets the photo_base64 of this Microsoft360ViewJson.  # noqa: E501


        :return: The photo_base64 of this Microsoft360ViewJson.  # noqa: E501
        :rtype: str
        """
        return self._photo_base64

    @photo_base64.setter
    def photo_base64(self, photo_base64):
        """Sets the photo_base64 of this Microsoft360ViewJson.


        :param photo_base64: The photo_base64 of this Microsoft360ViewJson.  # noqa: E501
        :type: str
        """
        if photo_base64 is None:
            raise ValueError("Invalid value for `photo_base64`, must not be `None`")  # noqa: E501

        self._photo_base64 = photo_base64

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Microsoft360ViewJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Microsoft360ViewJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
