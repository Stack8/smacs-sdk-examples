# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UcMetadataCacheJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cucm_metadata_cache': 'dict(str, CucmMetadataJson)',
        'cucm_device_model_metadata_cache': 'dict(str, dict(str, DeviceModelMetadataJson))',
        'unity_metadata_cache': 'dict(str, UnityMetadataJson)',
        'pcce_metadata_cache': 'dict(str, PcceMetadataJson)',
        'uccx_metadata_cache': 'dict(str, UccxMetadataJson)'
    }

    attribute_map = {
        'cucm_metadata_cache': 'cucmMetadataCache',
        'cucm_device_model_metadata_cache': 'cucmDeviceModelMetadataCache',
        'unity_metadata_cache': 'unityMetadataCache',
        'pcce_metadata_cache': 'pcceMetadataCache',
        'uccx_metadata_cache': 'uccxMetadataCache'
    }

    def __init__(self, cucm_metadata_cache=None, cucm_device_model_metadata_cache=None, unity_metadata_cache=None, pcce_metadata_cache=None, uccx_metadata_cache=None):  # noqa: E501
        """UcMetadataCacheJson - a model defined in Swagger"""  # noqa: E501
        self._cucm_metadata_cache = None
        self._cucm_device_model_metadata_cache = None
        self._unity_metadata_cache = None
        self._pcce_metadata_cache = None
        self._uccx_metadata_cache = None
        self.discriminator = None
        self.cucm_metadata_cache = cucm_metadata_cache
        self.cucm_device_model_metadata_cache = cucm_device_model_metadata_cache
        self.unity_metadata_cache = unity_metadata_cache
        self.pcce_metadata_cache = pcce_metadata_cache
        self.uccx_metadata_cache = uccx_metadata_cache

    @property
    def cucm_metadata_cache(self):
        """Gets the cucm_metadata_cache of this UcMetadataCacheJson.  # noqa: E501


        :return: The cucm_metadata_cache of this UcMetadataCacheJson.  # noqa: E501
        :rtype: dict(str, CucmMetadataJson)
        """
        return self._cucm_metadata_cache

    @cucm_metadata_cache.setter
    def cucm_metadata_cache(self, cucm_metadata_cache):
        """Sets the cucm_metadata_cache of this UcMetadataCacheJson.


        :param cucm_metadata_cache: The cucm_metadata_cache of this UcMetadataCacheJson.  # noqa: E501
        :type: dict(str, CucmMetadataJson)
        """
        if cucm_metadata_cache is None:
            raise ValueError("Invalid value for `cucm_metadata_cache`, must not be `None`")  # noqa: E501

        self._cucm_metadata_cache = cucm_metadata_cache

    @property
    def cucm_device_model_metadata_cache(self):
        """Gets the cucm_device_model_metadata_cache of this UcMetadataCacheJson.  # noqa: E501


        :return: The cucm_device_model_metadata_cache of this UcMetadataCacheJson.  # noqa: E501
        :rtype: dict(str, dict(str, DeviceModelMetadataJson))
        """
        return self._cucm_device_model_metadata_cache

    @cucm_device_model_metadata_cache.setter
    def cucm_device_model_metadata_cache(self, cucm_device_model_metadata_cache):
        """Sets the cucm_device_model_metadata_cache of this UcMetadataCacheJson.


        :param cucm_device_model_metadata_cache: The cucm_device_model_metadata_cache of this UcMetadataCacheJson.  # noqa: E501
        :type: dict(str, dict(str, DeviceModelMetadataJson))
        """
        if cucm_device_model_metadata_cache is None:
            raise ValueError("Invalid value for `cucm_device_model_metadata_cache`, must not be `None`")  # noqa: E501

        self._cucm_device_model_metadata_cache = cucm_device_model_metadata_cache

    @property
    def unity_metadata_cache(self):
        """Gets the unity_metadata_cache of this UcMetadataCacheJson.  # noqa: E501


        :return: The unity_metadata_cache of this UcMetadataCacheJson.  # noqa: E501
        :rtype: dict(str, UnityMetadataJson)
        """
        return self._unity_metadata_cache

    @unity_metadata_cache.setter
    def unity_metadata_cache(self, unity_metadata_cache):
        """Sets the unity_metadata_cache of this UcMetadataCacheJson.


        :param unity_metadata_cache: The unity_metadata_cache of this UcMetadataCacheJson.  # noqa: E501
        :type: dict(str, UnityMetadataJson)
        """
        if unity_metadata_cache is None:
            raise ValueError("Invalid value for `unity_metadata_cache`, must not be `None`")  # noqa: E501

        self._unity_metadata_cache = unity_metadata_cache

    @property
    def pcce_metadata_cache(self):
        """Gets the pcce_metadata_cache of this UcMetadataCacheJson.  # noqa: E501


        :return: The pcce_metadata_cache of this UcMetadataCacheJson.  # noqa: E501
        :rtype: dict(str, PcceMetadataJson)
        """
        return self._pcce_metadata_cache

    @pcce_metadata_cache.setter
    def pcce_metadata_cache(self, pcce_metadata_cache):
        """Sets the pcce_metadata_cache of this UcMetadataCacheJson.


        :param pcce_metadata_cache: The pcce_metadata_cache of this UcMetadataCacheJson.  # noqa: E501
        :type: dict(str, PcceMetadataJson)
        """
        if pcce_metadata_cache is None:
            raise ValueError("Invalid value for `pcce_metadata_cache`, must not be `None`")  # noqa: E501

        self._pcce_metadata_cache = pcce_metadata_cache

    @property
    def uccx_metadata_cache(self):
        """Gets the uccx_metadata_cache of this UcMetadataCacheJson.  # noqa: E501


        :return: The uccx_metadata_cache of this UcMetadataCacheJson.  # noqa: E501
        :rtype: dict(str, UccxMetadataJson)
        """
        return self._uccx_metadata_cache

    @uccx_metadata_cache.setter
    def uccx_metadata_cache(self, uccx_metadata_cache):
        """Sets the uccx_metadata_cache of this UcMetadataCacheJson.


        :param uccx_metadata_cache: The uccx_metadata_cache of this UcMetadataCacheJson.  # noqa: E501
        :type: dict(str, UccxMetadataJson)
        """
        if uccx_metadata_cache is None:
            raise ValueError("Invalid value for `uccx_metadata_cache`, must not be `None`")  # noqa: E501

        self._uccx_metadata_cache = uccx_metadata_cache

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UcMetadataCacheJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UcMetadataCacheJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
