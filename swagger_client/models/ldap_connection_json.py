# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LdapConnectionJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'username': 'str',
        'password': 'str',
        'user_base_dn': 'str',
        'group_base_dn': 'str',
        'connect_timeout': 'int',
        'read_timeout': 'int'
    }

    attribute_map = {
        'url': 'url',
        'username': 'username',
        'password': 'password',
        'user_base_dn': 'userBaseDn',
        'group_base_dn': 'groupBaseDn',
        'connect_timeout': 'connectTimeout',
        'read_timeout': 'readTimeout'
    }

    def __init__(self, url=None, username=None, password=None, user_base_dn=None, group_base_dn=None, connect_timeout=None, read_timeout=None):  # noqa: E501
        """LdapConnectionJson - a model defined in Swagger"""  # noqa: E501
        self._url = None
        self._username = None
        self._password = None
        self._user_base_dn = None
        self._group_base_dn = None
        self._connect_timeout = None
        self._read_timeout = None
        self.discriminator = None
        self.url = url
        self.username = username
        if password is not None:
            self.password = password
        self.user_base_dn = user_base_dn
        self.group_base_dn = group_base_dn
        if connect_timeout is not None:
            self.connect_timeout = connect_timeout
        if read_timeout is not None:
            self.read_timeout = read_timeout

    @property
    def url(self):
        """Gets the url of this LdapConnectionJson.  # noqa: E501


        :return: The url of this LdapConnectionJson.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this LdapConnectionJson.


        :param url: The url of this LdapConnectionJson.  # noqa: E501
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def username(self):
        """Gets the username of this LdapConnectionJson.  # noqa: E501


        :return: The username of this LdapConnectionJson.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this LdapConnectionJson.


        :param username: The username of this LdapConnectionJson.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this LdapConnectionJson.  # noqa: E501


        :return: The password of this LdapConnectionJson.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LdapConnectionJson.


        :param password: The password of this LdapConnectionJson.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def user_base_dn(self):
        """Gets the user_base_dn of this LdapConnectionJson.  # noqa: E501


        :return: The user_base_dn of this LdapConnectionJson.  # noqa: E501
        :rtype: str
        """
        return self._user_base_dn

    @user_base_dn.setter
    def user_base_dn(self, user_base_dn):
        """Sets the user_base_dn of this LdapConnectionJson.


        :param user_base_dn: The user_base_dn of this LdapConnectionJson.  # noqa: E501
        :type: str
        """
        if user_base_dn is None:
            raise ValueError("Invalid value for `user_base_dn`, must not be `None`")  # noqa: E501

        self._user_base_dn = user_base_dn

    @property
    def group_base_dn(self):
        """Gets the group_base_dn of this LdapConnectionJson.  # noqa: E501


        :return: The group_base_dn of this LdapConnectionJson.  # noqa: E501
        :rtype: str
        """
        return self._group_base_dn

    @group_base_dn.setter
    def group_base_dn(self, group_base_dn):
        """Sets the group_base_dn of this LdapConnectionJson.


        :param group_base_dn: The group_base_dn of this LdapConnectionJson.  # noqa: E501
        :type: str
        """
        if group_base_dn is None:
            raise ValueError("Invalid value for `group_base_dn`, must not be `None`")  # noqa: E501

        self._group_base_dn = group_base_dn

    @property
    def connect_timeout(self):
        """Gets the connect_timeout of this LdapConnectionJson.  # noqa: E501


        :return: The connect_timeout of this LdapConnectionJson.  # noqa: E501
        :rtype: int
        """
        return self._connect_timeout

    @connect_timeout.setter
    def connect_timeout(self, connect_timeout):
        """Sets the connect_timeout of this LdapConnectionJson.


        :param connect_timeout: The connect_timeout of this LdapConnectionJson.  # noqa: E501
        :type: int
        """

        self._connect_timeout = connect_timeout

    @property
    def read_timeout(self):
        """Gets the read_timeout of this LdapConnectionJson.  # noqa: E501


        :return: The read_timeout of this LdapConnectionJson.  # noqa: E501
        :rtype: int
        """
        return self._read_timeout

    @read_timeout.setter
    def read_timeout(self, read_timeout):
        """Sets the read_timeout of this LdapConnectionJson.


        :param read_timeout: The read_timeout of this LdapConnectionJson.  # noqa: E501
        :type: int
        """

        self._read_timeout = read_timeout

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LdapConnectionJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapConnectionJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
