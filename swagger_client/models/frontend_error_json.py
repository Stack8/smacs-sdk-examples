# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FrontendErrorJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'current_user': 'str',
        'current_url': 'str',
        'current_user_role': 'str',
        'user_agent': 'str',
        'error_type': 'str',
        'build_version': 'str',
        'cluster': 'str',
        'stacktrace': 'str',
        'error_summary': 'str'
    }

    attribute_map = {
        'current_user': 'currentUser',
        'current_url': 'currentUrl',
        'current_user_role': 'currentUserRole',
        'user_agent': 'userAgent',
        'error_type': 'errorType',
        'build_version': 'buildVersion',
        'cluster': 'cluster',
        'stacktrace': 'stacktrace',
        'error_summary': 'errorSummary'
    }

    def __init__(self, current_user=None, current_url=None, current_user_role=None, user_agent=None, error_type=None, build_version=None, cluster=None, stacktrace=None, error_summary=None):  # noqa: E501
        """FrontendErrorJson - a model defined in Swagger"""  # noqa: E501
        self._current_user = None
        self._current_url = None
        self._current_user_role = None
        self._user_agent = None
        self._error_type = None
        self._build_version = None
        self._cluster = None
        self._stacktrace = None
        self._error_summary = None
        self.discriminator = None
        if current_user is not None:
            self.current_user = current_user
        if current_url is not None:
            self.current_url = current_url
        if current_user_role is not None:
            self.current_user_role = current_user_role
        if user_agent is not None:
            self.user_agent = user_agent
        if error_type is not None:
            self.error_type = error_type
        if build_version is not None:
            self.build_version = build_version
        if cluster is not None:
            self.cluster = cluster
        if stacktrace is not None:
            self.stacktrace = stacktrace
        if error_summary is not None:
            self.error_summary = error_summary

    @property
    def current_user(self):
        """Gets the current_user of this FrontendErrorJson.  # noqa: E501


        :return: The current_user of this FrontendErrorJson.  # noqa: E501
        :rtype: str
        """
        return self._current_user

    @current_user.setter
    def current_user(self, current_user):
        """Sets the current_user of this FrontendErrorJson.


        :param current_user: The current_user of this FrontendErrorJson.  # noqa: E501
        :type: str
        """

        self._current_user = current_user

    @property
    def current_url(self):
        """Gets the current_url of this FrontendErrorJson.  # noqa: E501


        :return: The current_url of this FrontendErrorJson.  # noqa: E501
        :rtype: str
        """
        return self._current_url

    @current_url.setter
    def current_url(self, current_url):
        """Sets the current_url of this FrontendErrorJson.


        :param current_url: The current_url of this FrontendErrorJson.  # noqa: E501
        :type: str
        """

        self._current_url = current_url

    @property
    def current_user_role(self):
        """Gets the current_user_role of this FrontendErrorJson.  # noqa: E501


        :return: The current_user_role of this FrontendErrorJson.  # noqa: E501
        :rtype: str
        """
        return self._current_user_role

    @current_user_role.setter
    def current_user_role(self, current_user_role):
        """Sets the current_user_role of this FrontendErrorJson.


        :param current_user_role: The current_user_role of this FrontendErrorJson.  # noqa: E501
        :type: str
        """

        self._current_user_role = current_user_role

    @property
    def user_agent(self):
        """Gets the user_agent of this FrontendErrorJson.  # noqa: E501


        :return: The user_agent of this FrontendErrorJson.  # noqa: E501
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent):
        """Sets the user_agent of this FrontendErrorJson.


        :param user_agent: The user_agent of this FrontendErrorJson.  # noqa: E501
        :type: str
        """

        self._user_agent = user_agent

    @property
    def error_type(self):
        """Gets the error_type of this FrontendErrorJson.  # noqa: E501


        :return: The error_type of this FrontendErrorJson.  # noqa: E501
        :rtype: str
        """
        return self._error_type

    @error_type.setter
    def error_type(self, error_type):
        """Sets the error_type of this FrontendErrorJson.


        :param error_type: The error_type of this FrontendErrorJson.  # noqa: E501
        :type: str
        """

        self._error_type = error_type

    @property
    def build_version(self):
        """Gets the build_version of this FrontendErrorJson.  # noqa: E501


        :return: The build_version of this FrontendErrorJson.  # noqa: E501
        :rtype: str
        """
        return self._build_version

    @build_version.setter
    def build_version(self, build_version):
        """Sets the build_version of this FrontendErrorJson.


        :param build_version: The build_version of this FrontendErrorJson.  # noqa: E501
        :type: str
        """

        self._build_version = build_version

    @property
    def cluster(self):
        """Gets the cluster of this FrontendErrorJson.  # noqa: E501


        :return: The cluster of this FrontendErrorJson.  # noqa: E501
        :rtype: str
        """
        return self._cluster

    @cluster.setter
    def cluster(self, cluster):
        """Sets the cluster of this FrontendErrorJson.


        :param cluster: The cluster of this FrontendErrorJson.  # noqa: E501
        :type: str
        """

        self._cluster = cluster

    @property
    def stacktrace(self):
        """Gets the stacktrace of this FrontendErrorJson.  # noqa: E501


        :return: The stacktrace of this FrontendErrorJson.  # noqa: E501
        :rtype: str
        """
        return self._stacktrace

    @stacktrace.setter
    def stacktrace(self, stacktrace):
        """Sets the stacktrace of this FrontendErrorJson.


        :param stacktrace: The stacktrace of this FrontendErrorJson.  # noqa: E501
        :type: str
        """

        self._stacktrace = stacktrace

    @property
    def error_summary(self):
        """Gets the error_summary of this FrontendErrorJson.  # noqa: E501


        :return: The error_summary of this FrontendErrorJson.  # noqa: E501
        :rtype: str
        """
        return self._error_summary

    @error_summary.setter
    def error_summary(self, error_summary):
        """Sets the error_summary of this FrontendErrorJson.


        :param error_summary: The error_summary of this FrontendErrorJson.  # noqa: E501
        :type: str
        """

        self._error_summary = error_summary

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FrontendErrorJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FrontendErrorJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
