# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LdapConfigurationJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_base_dn': 'str',
        'group_base_dn': 'str',
        'username': 'str',
        'password': 'str',
        'connect_timeout': 'int',
        'read_timeout': 'int',
        'urls': 'list[str]',
        'search_time_limit': 'int',
        'search_page_size': 'int',
        'user_id_attribute_name': 'str',
        'group_attribute_name': 'str',
        'site_attribute_name': 'str',
        'photo_attribute_name': 'str',
        'extension_attribute_name': 'str',
        'e164_number_attribute_name': 'str',
        'additional_attribute_names': 'list[str]',
        'write_to_site_enabled': 'bool'
    }

    attribute_map = {
        'user_base_dn': 'userBaseDn',
        'group_base_dn': 'groupBaseDn',
        'username': 'username',
        'password': 'password',
        'connect_timeout': 'connectTimeout',
        'read_timeout': 'readTimeout',
        'urls': 'urls',
        'search_time_limit': 'searchTimeLimit',
        'search_page_size': 'searchPageSize',
        'user_id_attribute_name': 'userIdAttributeName',
        'group_attribute_name': 'groupAttributeName',
        'site_attribute_name': 'siteAttributeName',
        'photo_attribute_name': 'photoAttributeName',
        'extension_attribute_name': 'extensionAttributeName',
        'e164_number_attribute_name': 'e164NumberAttributeName',
        'additional_attribute_names': 'additionalAttributeNames',
        'write_to_site_enabled': 'writeToSiteEnabled'
    }

    def __init__(self, user_base_dn=None, group_base_dn=None, username=None, password=None, connect_timeout=None, read_timeout=None, urls=None, search_time_limit=None, search_page_size=None, user_id_attribute_name=None, group_attribute_name=None, site_attribute_name=None, photo_attribute_name=None, extension_attribute_name=None, e164_number_attribute_name=None, additional_attribute_names=None, write_to_site_enabled=None):  # noqa: E501
        """LdapConfigurationJson - a model defined in Swagger"""  # noqa: E501
        self._user_base_dn = None
        self._group_base_dn = None
        self._username = None
        self._password = None
        self._connect_timeout = None
        self._read_timeout = None
        self._urls = None
        self._search_time_limit = None
        self._search_page_size = None
        self._user_id_attribute_name = None
        self._group_attribute_name = None
        self._site_attribute_name = None
        self._photo_attribute_name = None
        self._extension_attribute_name = None
        self._e164_number_attribute_name = None
        self._additional_attribute_names = None
        self._write_to_site_enabled = None
        self.discriminator = None
        self.user_base_dn = user_base_dn
        self.group_base_dn = group_base_dn
        self.username = username
        if password is not None:
            self.password = password
        self.connect_timeout = connect_timeout
        self.read_timeout = read_timeout
        self.urls = urls
        self.search_time_limit = search_time_limit
        self.search_page_size = search_page_size
        self.user_id_attribute_name = user_id_attribute_name
        self.group_attribute_name = group_attribute_name
        if site_attribute_name is not None:
            self.site_attribute_name = site_attribute_name
        if photo_attribute_name is not None:
            self.photo_attribute_name = photo_attribute_name
        if extension_attribute_name is not None:
            self.extension_attribute_name = extension_attribute_name
        if e164_number_attribute_name is not None:
            self.e164_number_attribute_name = e164_number_attribute_name
        self.additional_attribute_names = additional_attribute_names
        self.write_to_site_enabled = write_to_site_enabled

    @property
    def user_base_dn(self):
        """Gets the user_base_dn of this LdapConfigurationJson.  # noqa: E501


        :return: The user_base_dn of this LdapConfigurationJson.  # noqa: E501
        :rtype: str
        """
        return self._user_base_dn

    @user_base_dn.setter
    def user_base_dn(self, user_base_dn):
        """Sets the user_base_dn of this LdapConfigurationJson.


        :param user_base_dn: The user_base_dn of this LdapConfigurationJson.  # noqa: E501
        :type: str
        """
        if user_base_dn is None:
            raise ValueError("Invalid value for `user_base_dn`, must not be `None`")  # noqa: E501

        self._user_base_dn = user_base_dn

    @property
    def group_base_dn(self):
        """Gets the group_base_dn of this LdapConfigurationJson.  # noqa: E501


        :return: The group_base_dn of this LdapConfigurationJson.  # noqa: E501
        :rtype: str
        """
        return self._group_base_dn

    @group_base_dn.setter
    def group_base_dn(self, group_base_dn):
        """Sets the group_base_dn of this LdapConfigurationJson.


        :param group_base_dn: The group_base_dn of this LdapConfigurationJson.  # noqa: E501
        :type: str
        """
        if group_base_dn is None:
            raise ValueError("Invalid value for `group_base_dn`, must not be `None`")  # noqa: E501

        self._group_base_dn = group_base_dn

    @property
    def username(self):
        """Gets the username of this LdapConfigurationJson.  # noqa: E501


        :return: The username of this LdapConfigurationJson.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this LdapConfigurationJson.


        :param username: The username of this LdapConfigurationJson.  # noqa: E501
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username

    @property
    def password(self):
        """Gets the password of this LdapConfigurationJson.  # noqa: E501


        :return: The password of this LdapConfigurationJson.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this LdapConfigurationJson.


        :param password: The password of this LdapConfigurationJson.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def connect_timeout(self):
        """Gets the connect_timeout of this LdapConfigurationJson.  # noqa: E501


        :return: The connect_timeout of this LdapConfigurationJson.  # noqa: E501
        :rtype: int
        """
        return self._connect_timeout

    @connect_timeout.setter
    def connect_timeout(self, connect_timeout):
        """Sets the connect_timeout of this LdapConfigurationJson.


        :param connect_timeout: The connect_timeout of this LdapConfigurationJson.  # noqa: E501
        :type: int
        """
        if connect_timeout is None:
            raise ValueError("Invalid value for `connect_timeout`, must not be `None`")  # noqa: E501

        self._connect_timeout = connect_timeout

    @property
    def read_timeout(self):
        """Gets the read_timeout of this LdapConfigurationJson.  # noqa: E501


        :return: The read_timeout of this LdapConfigurationJson.  # noqa: E501
        :rtype: int
        """
        return self._read_timeout

    @read_timeout.setter
    def read_timeout(self, read_timeout):
        """Sets the read_timeout of this LdapConfigurationJson.


        :param read_timeout: The read_timeout of this LdapConfigurationJson.  # noqa: E501
        :type: int
        """
        if read_timeout is None:
            raise ValueError("Invalid value for `read_timeout`, must not be `None`")  # noqa: E501

        self._read_timeout = read_timeout

    @property
    def urls(self):
        """Gets the urls of this LdapConfigurationJson.  # noqa: E501


        :return: The urls of this LdapConfigurationJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls):
        """Sets the urls of this LdapConfigurationJson.


        :param urls: The urls of this LdapConfigurationJson.  # noqa: E501
        :type: list[str]
        """
        if urls is None:
            raise ValueError("Invalid value for `urls`, must not be `None`")  # noqa: E501

        self._urls = urls

    @property
    def search_time_limit(self):
        """Gets the search_time_limit of this LdapConfigurationJson.  # noqa: E501


        :return: The search_time_limit of this LdapConfigurationJson.  # noqa: E501
        :rtype: int
        """
        return self._search_time_limit

    @search_time_limit.setter
    def search_time_limit(self, search_time_limit):
        """Sets the search_time_limit of this LdapConfigurationJson.


        :param search_time_limit: The search_time_limit of this LdapConfigurationJson.  # noqa: E501
        :type: int
        """
        if search_time_limit is None:
            raise ValueError("Invalid value for `search_time_limit`, must not be `None`")  # noqa: E501

        self._search_time_limit = search_time_limit

    @property
    def search_page_size(self):
        """Gets the search_page_size of this LdapConfigurationJson.  # noqa: E501


        :return: The search_page_size of this LdapConfigurationJson.  # noqa: E501
        :rtype: int
        """
        return self._search_page_size

    @search_page_size.setter
    def search_page_size(self, search_page_size):
        """Sets the search_page_size of this LdapConfigurationJson.


        :param search_page_size: The search_page_size of this LdapConfigurationJson.  # noqa: E501
        :type: int
        """
        if search_page_size is None:
            raise ValueError("Invalid value for `search_page_size`, must not be `None`")  # noqa: E501

        self._search_page_size = search_page_size

    @property
    def user_id_attribute_name(self):
        """Gets the user_id_attribute_name of this LdapConfigurationJson.  # noqa: E501


        :return: The user_id_attribute_name of this LdapConfigurationJson.  # noqa: E501
        :rtype: str
        """
        return self._user_id_attribute_name

    @user_id_attribute_name.setter
    def user_id_attribute_name(self, user_id_attribute_name):
        """Sets the user_id_attribute_name of this LdapConfigurationJson.


        :param user_id_attribute_name: The user_id_attribute_name of this LdapConfigurationJson.  # noqa: E501
        :type: str
        """
        if user_id_attribute_name is None:
            raise ValueError("Invalid value for `user_id_attribute_name`, must not be `None`")  # noqa: E501

        self._user_id_attribute_name = user_id_attribute_name

    @property
    def group_attribute_name(self):
        """Gets the group_attribute_name of this LdapConfigurationJson.  # noqa: E501


        :return: The group_attribute_name of this LdapConfigurationJson.  # noqa: E501
        :rtype: str
        """
        return self._group_attribute_name

    @group_attribute_name.setter
    def group_attribute_name(self, group_attribute_name):
        """Sets the group_attribute_name of this LdapConfigurationJson.


        :param group_attribute_name: The group_attribute_name of this LdapConfigurationJson.  # noqa: E501
        :type: str
        """
        if group_attribute_name is None:
            raise ValueError("Invalid value for `group_attribute_name`, must not be `None`")  # noqa: E501

        self._group_attribute_name = group_attribute_name

    @property
    def site_attribute_name(self):
        """Gets the site_attribute_name of this LdapConfigurationJson.  # noqa: E501


        :return: The site_attribute_name of this LdapConfigurationJson.  # noqa: E501
        :rtype: str
        """
        return self._site_attribute_name

    @site_attribute_name.setter
    def site_attribute_name(self, site_attribute_name):
        """Sets the site_attribute_name of this LdapConfigurationJson.


        :param site_attribute_name: The site_attribute_name of this LdapConfigurationJson.  # noqa: E501
        :type: str
        """

        self._site_attribute_name = site_attribute_name

    @property
    def photo_attribute_name(self):
        """Gets the photo_attribute_name of this LdapConfigurationJson.  # noqa: E501


        :return: The photo_attribute_name of this LdapConfigurationJson.  # noqa: E501
        :rtype: str
        """
        return self._photo_attribute_name

    @photo_attribute_name.setter
    def photo_attribute_name(self, photo_attribute_name):
        """Sets the photo_attribute_name of this LdapConfigurationJson.


        :param photo_attribute_name: The photo_attribute_name of this LdapConfigurationJson.  # noqa: E501
        :type: str
        """

        self._photo_attribute_name = photo_attribute_name

    @property
    def extension_attribute_name(self):
        """Gets the extension_attribute_name of this LdapConfigurationJson.  # noqa: E501


        :return: The extension_attribute_name of this LdapConfigurationJson.  # noqa: E501
        :rtype: str
        """
        return self._extension_attribute_name

    @extension_attribute_name.setter
    def extension_attribute_name(self, extension_attribute_name):
        """Sets the extension_attribute_name of this LdapConfigurationJson.


        :param extension_attribute_name: The extension_attribute_name of this LdapConfigurationJson.  # noqa: E501
        :type: str
        """

        self._extension_attribute_name = extension_attribute_name

    @property
    def e164_number_attribute_name(self):
        """Gets the e164_number_attribute_name of this LdapConfigurationJson.  # noqa: E501


        :return: The e164_number_attribute_name of this LdapConfigurationJson.  # noqa: E501
        :rtype: str
        """
        return self._e164_number_attribute_name

    @e164_number_attribute_name.setter
    def e164_number_attribute_name(self, e164_number_attribute_name):
        """Sets the e164_number_attribute_name of this LdapConfigurationJson.


        :param e164_number_attribute_name: The e164_number_attribute_name of this LdapConfigurationJson.  # noqa: E501
        :type: str
        """

        self._e164_number_attribute_name = e164_number_attribute_name

    @property
    def additional_attribute_names(self):
        """Gets the additional_attribute_names of this LdapConfigurationJson.  # noqa: E501


        :return: The additional_attribute_names of this LdapConfigurationJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._additional_attribute_names

    @additional_attribute_names.setter
    def additional_attribute_names(self, additional_attribute_names):
        """Sets the additional_attribute_names of this LdapConfigurationJson.


        :param additional_attribute_names: The additional_attribute_names of this LdapConfigurationJson.  # noqa: E501
        :type: list[str]
        """
        if additional_attribute_names is None:
            raise ValueError("Invalid value for `additional_attribute_names`, must not be `None`")  # noqa: E501

        self._additional_attribute_names = additional_attribute_names

    @property
    def write_to_site_enabled(self):
        """Gets the write_to_site_enabled of this LdapConfigurationJson.  # noqa: E501


        :return: The write_to_site_enabled of this LdapConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._write_to_site_enabled

    @write_to_site_enabled.setter
    def write_to_site_enabled(self, write_to_site_enabled):
        """Sets the write_to_site_enabled of this LdapConfigurationJson.


        :param write_to_site_enabled: The write_to_site_enabled of this LdapConfigurationJson.  # noqa: E501
        :type: bool
        """
        if write_to_site_enabled is None:
            raise ValueError("Invalid value for `write_to_site_enabled`, must not be `None`")  # noqa: E501

        self._write_to_site_enabled = write_to_site_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LdapConfigurationJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapConfigurationJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
