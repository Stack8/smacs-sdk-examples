# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MsGraphRegistrationDetailsJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant': 'str',
        'client_id': 'str',
        'client_secret': 'str',
        'environment_type': 'str'
    }

    attribute_map = {
        'tenant': 'tenant',
        'client_id': 'clientId',
        'client_secret': 'clientSecret',
        'environment_type': 'environmentType'
    }

    def __init__(self, tenant=None, client_id=None, client_secret=None, environment_type=None):  # noqa: E501
        """MsGraphRegistrationDetailsJson - a model defined in Swagger"""  # noqa: E501
        self._tenant = None
        self._client_id = None
        self._client_secret = None
        self._environment_type = None
        self.discriminator = None
        self.tenant = tenant
        self.client_id = client_id
        if client_secret is not None:
            self.client_secret = client_secret
        self.environment_type = environment_type

    @property
    def tenant(self):
        """Gets the tenant of this MsGraphRegistrationDetailsJson.  # noqa: E501


        :return: The tenant of this MsGraphRegistrationDetailsJson.  # noqa: E501
        :rtype: str
        """
        return self._tenant

    @tenant.setter
    def tenant(self, tenant):
        """Sets the tenant of this MsGraphRegistrationDetailsJson.


        :param tenant: The tenant of this MsGraphRegistrationDetailsJson.  # noqa: E501
        :type: str
        """
        if tenant is None:
            raise ValueError("Invalid value for `tenant`, must not be `None`")  # noqa: E501

        self._tenant = tenant

    @property
    def client_id(self):
        """Gets the client_id of this MsGraphRegistrationDetailsJson.  # noqa: E501


        :return: The client_id of this MsGraphRegistrationDetailsJson.  # noqa: E501
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this MsGraphRegistrationDetailsJson.


        :param client_id: The client_id of this MsGraphRegistrationDetailsJson.  # noqa: E501
        :type: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")  # noqa: E501

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this MsGraphRegistrationDetailsJson.  # noqa: E501


        :return: The client_secret of this MsGraphRegistrationDetailsJson.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this MsGraphRegistrationDetailsJson.


        :param client_secret: The client_secret of this MsGraphRegistrationDetailsJson.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def environment_type(self):
        """Gets the environment_type of this MsGraphRegistrationDetailsJson.  # noqa: E501


        :return: The environment_type of this MsGraphRegistrationDetailsJson.  # noqa: E501
        :rtype: str
        """
        return self._environment_type

    @environment_type.setter
    def environment_type(self, environment_type):
        """Sets the environment_type of this MsGraphRegistrationDetailsJson.


        :param environment_type: The environment_type of this MsGraphRegistrationDetailsJson.  # noqa: E501
        :type: str
        """
        if environment_type is None:
            raise ValueError("Invalid value for `environment_type`, must not be `None`")  # noqa: E501
        allowed_values = ["Commercial", "GCC High"]  # noqa: E501
        if environment_type not in allowed_values:
            raise ValueError(
                "Invalid value for `environment_type` ({0}), must be one of {1}"  # noqa: E501
                .format(environment_type, allowed_values)
            )

        self._environment_type = environment_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MsGraphRegistrationDetailsJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MsGraphRegistrationDetailsJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
