# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ProvisioningScheduleJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'ldap_filter': 'str',
        'daily_job_time': 'str',
        'periodic_job_minutes': 'int',
        'options': 'ZeroTouchProvisioningOptionsJson'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'ldap_filter': 'ldapFilter',
        'daily_job_time': 'dailyJobTime',
        'periodic_job_minutes': 'periodicJobMinutes',
        'options': 'options'
    }

    def __init__(self, id=None, name=None, ldap_filter=None, daily_job_time=None, periodic_job_minutes=None, options=None):  # noqa: E501
        """ProvisioningScheduleJson - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._ldap_filter = None
        self._daily_job_time = None
        self._periodic_job_minutes = None
        self._options = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.ldap_filter = ldap_filter
        if daily_job_time is not None:
            self.daily_job_time = daily_job_time
        if periodic_job_minutes is not None:
            self.periodic_job_minutes = periodic_job_minutes
        if options is not None:
            self.options = options

    @property
    def id(self):
        """Gets the id of this ProvisioningScheduleJson.  # noqa: E501


        :return: The id of this ProvisioningScheduleJson.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProvisioningScheduleJson.


        :param id: The id of this ProvisioningScheduleJson.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ProvisioningScheduleJson.  # noqa: E501


        :return: The name of this ProvisioningScheduleJson.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProvisioningScheduleJson.


        :param name: The name of this ProvisioningScheduleJson.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def ldap_filter(self):
        """Gets the ldap_filter of this ProvisioningScheduleJson.  # noqa: E501


        :return: The ldap_filter of this ProvisioningScheduleJson.  # noqa: E501
        :rtype: str
        """
        return self._ldap_filter

    @ldap_filter.setter
    def ldap_filter(self, ldap_filter):
        """Sets the ldap_filter of this ProvisioningScheduleJson.


        :param ldap_filter: The ldap_filter of this ProvisioningScheduleJson.  # noqa: E501
        :type: str
        """
        if ldap_filter is None:
            raise ValueError("Invalid value for `ldap_filter`, must not be `None`")  # noqa: E501

        self._ldap_filter = ldap_filter

    @property
    def daily_job_time(self):
        """Gets the daily_job_time of this ProvisioningScheduleJson.  # noqa: E501


        :return: The daily_job_time of this ProvisioningScheduleJson.  # noqa: E501
        :rtype: str
        """
        return self._daily_job_time

    @daily_job_time.setter
    def daily_job_time(self, daily_job_time):
        """Sets the daily_job_time of this ProvisioningScheduleJson.


        :param daily_job_time: The daily_job_time of this ProvisioningScheduleJson.  # noqa: E501
        :type: str
        """

        self._daily_job_time = daily_job_time

    @property
    def periodic_job_minutes(self):
        """Gets the periodic_job_minutes of this ProvisioningScheduleJson.  # noqa: E501


        :return: The periodic_job_minutes of this ProvisioningScheduleJson.  # noqa: E501
        :rtype: int
        """
        return self._periodic_job_minutes

    @periodic_job_minutes.setter
    def periodic_job_minutes(self, periodic_job_minutes):
        """Sets the periodic_job_minutes of this ProvisioningScheduleJson.


        :param periodic_job_minutes: The periodic_job_minutes of this ProvisioningScheduleJson.  # noqa: E501
        :type: int
        """

        self._periodic_job_minutes = periodic_job_minutes

    @property
    def options(self):
        """Gets the options of this ProvisioningScheduleJson.  # noqa: E501


        :return: The options of this ProvisioningScheduleJson.  # noqa: E501
        :rtype: ZeroTouchProvisioningOptionsJson
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this ProvisioningScheduleJson.


        :param options: The options of this ProvisioningScheduleJson.  # noqa: E501
        :type: ZeroTouchProvisioningOptionsJson
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ProvisioningScheduleJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProvisioningScheduleJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
