# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GlobalConfigurationJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'change_site_enabled': 'bool',
        'reset_pin_on_next_login_enabled': 'bool',
        'show_add_user_page': 'bool',
        'days_to_keep_audit_records': 'int',
        'unified_fx_url': 'str',
        'self_serve_snr_edit_enabled': 'bool',
        'self_serve_call_forward_edit_enabled': 'bool',
        'self_serve_speed_dial_edit_enabled': 'bool',
        'automatic_phone_template_selection_enabled': 'bool',
        'self_serve_deskphone_provisioning_enabled': 'bool',
        'display_enhanced_line_mode': 'bool',
        'french_enabled': 'bool',
        'helpdesk_beta_enabled': 'bool',
        'show_auto_answer': 'bool',
        'ignore_line_associations': 'bool',
        'max_owned_devices': 'int',
        'disable_powershell_caching': 'bool',
        'azure_ad_group_lookup_enabled': 'bool'
    }

    attribute_map = {
        'change_site_enabled': 'changeSiteEnabled',
        'reset_pin_on_next_login_enabled': 'resetPinOnNextLoginEnabled',
        'show_add_user_page': 'showAddUserPage',
        'days_to_keep_audit_records': 'daysToKeepAuditRecords',
        'unified_fx_url': 'unifiedFxUrl',
        'self_serve_snr_edit_enabled': 'selfServeSnrEditEnabled',
        'self_serve_call_forward_edit_enabled': 'selfServeCallForwardEditEnabled',
        'self_serve_speed_dial_edit_enabled': 'selfServeSpeedDialEditEnabled',
        'automatic_phone_template_selection_enabled': 'automaticPhoneTemplateSelectionEnabled',
        'self_serve_deskphone_provisioning_enabled': 'selfServeDeskphoneProvisioningEnabled',
        'display_enhanced_line_mode': 'displayEnhancedLineMode',
        'french_enabled': 'frenchEnabled',
        'helpdesk_beta_enabled': 'helpdeskBetaEnabled',
        'show_auto_answer': 'showAutoAnswer',
        'ignore_line_associations': 'ignoreLineAssociations',
        'max_owned_devices': 'maxOwnedDevices',
        'disable_powershell_caching': 'disablePowershellCaching',
        'azure_ad_group_lookup_enabled': 'azureAdGroupLookupEnabled'
    }

    def __init__(self, change_site_enabled=None, reset_pin_on_next_login_enabled=None, show_add_user_page=None, days_to_keep_audit_records=None, unified_fx_url=None, self_serve_snr_edit_enabled=None, self_serve_call_forward_edit_enabled=None, self_serve_speed_dial_edit_enabled=None, automatic_phone_template_selection_enabled=None, self_serve_deskphone_provisioning_enabled=None, display_enhanced_line_mode=None, french_enabled=None, helpdesk_beta_enabled=None, show_auto_answer=None, ignore_line_associations=None, max_owned_devices=None, disable_powershell_caching=None, azure_ad_group_lookup_enabled=None):  # noqa: E501
        """GlobalConfigurationJson - a model defined in Swagger"""  # noqa: E501
        self._change_site_enabled = None
        self._reset_pin_on_next_login_enabled = None
        self._show_add_user_page = None
        self._days_to_keep_audit_records = None
        self._unified_fx_url = None
        self._self_serve_snr_edit_enabled = None
        self._self_serve_call_forward_edit_enabled = None
        self._self_serve_speed_dial_edit_enabled = None
        self._automatic_phone_template_selection_enabled = None
        self._self_serve_deskphone_provisioning_enabled = None
        self._display_enhanced_line_mode = None
        self._french_enabled = None
        self._helpdesk_beta_enabled = None
        self._show_auto_answer = None
        self._ignore_line_associations = None
        self._max_owned_devices = None
        self._disable_powershell_caching = None
        self._azure_ad_group_lookup_enabled = None
        self.discriminator = None
        self.change_site_enabled = change_site_enabled
        self.reset_pin_on_next_login_enabled = reset_pin_on_next_login_enabled
        self.show_add_user_page = show_add_user_page
        self.days_to_keep_audit_records = days_to_keep_audit_records
        self.unified_fx_url = unified_fx_url
        self.self_serve_snr_edit_enabled = self_serve_snr_edit_enabled
        self.self_serve_call_forward_edit_enabled = self_serve_call_forward_edit_enabled
        self.self_serve_speed_dial_edit_enabled = self_serve_speed_dial_edit_enabled
        self.automatic_phone_template_selection_enabled = automatic_phone_template_selection_enabled
        self.self_serve_deskphone_provisioning_enabled = self_serve_deskphone_provisioning_enabled
        self.display_enhanced_line_mode = display_enhanced_line_mode
        self.french_enabled = french_enabled
        self.helpdesk_beta_enabled = helpdesk_beta_enabled
        self.show_auto_answer = show_auto_answer
        self.ignore_line_associations = ignore_line_associations
        self.max_owned_devices = max_owned_devices
        self.disable_powershell_caching = disable_powershell_caching
        self.azure_ad_group_lookup_enabled = azure_ad_group_lookup_enabled

    @property
    def change_site_enabled(self):
        """Gets the change_site_enabled of this GlobalConfigurationJson.  # noqa: E501


        :return: The change_site_enabled of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._change_site_enabled

    @change_site_enabled.setter
    def change_site_enabled(self, change_site_enabled):
        """Sets the change_site_enabled of this GlobalConfigurationJson.


        :param change_site_enabled: The change_site_enabled of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if change_site_enabled is None:
            raise ValueError("Invalid value for `change_site_enabled`, must not be `None`")  # noqa: E501

        self._change_site_enabled = change_site_enabled

    @property
    def reset_pin_on_next_login_enabled(self):
        """Gets the reset_pin_on_next_login_enabled of this GlobalConfigurationJson.  # noqa: E501


        :return: The reset_pin_on_next_login_enabled of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._reset_pin_on_next_login_enabled

    @reset_pin_on_next_login_enabled.setter
    def reset_pin_on_next_login_enabled(self, reset_pin_on_next_login_enabled):
        """Sets the reset_pin_on_next_login_enabled of this GlobalConfigurationJson.


        :param reset_pin_on_next_login_enabled: The reset_pin_on_next_login_enabled of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if reset_pin_on_next_login_enabled is None:
            raise ValueError("Invalid value for `reset_pin_on_next_login_enabled`, must not be `None`")  # noqa: E501

        self._reset_pin_on_next_login_enabled = reset_pin_on_next_login_enabled

    @property
    def show_add_user_page(self):
        """Gets the show_add_user_page of this GlobalConfigurationJson.  # noqa: E501


        :return: The show_add_user_page of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._show_add_user_page

    @show_add_user_page.setter
    def show_add_user_page(self, show_add_user_page):
        """Sets the show_add_user_page of this GlobalConfigurationJson.


        :param show_add_user_page: The show_add_user_page of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if show_add_user_page is None:
            raise ValueError("Invalid value for `show_add_user_page`, must not be `None`")  # noqa: E501

        self._show_add_user_page = show_add_user_page

    @property
    def days_to_keep_audit_records(self):
        """Gets the days_to_keep_audit_records of this GlobalConfigurationJson.  # noqa: E501


        :return: The days_to_keep_audit_records of this GlobalConfigurationJson.  # noqa: E501
        :rtype: int
        """
        return self._days_to_keep_audit_records

    @days_to_keep_audit_records.setter
    def days_to_keep_audit_records(self, days_to_keep_audit_records):
        """Sets the days_to_keep_audit_records of this GlobalConfigurationJson.


        :param days_to_keep_audit_records: The days_to_keep_audit_records of this GlobalConfigurationJson.  # noqa: E501
        :type: int
        """
        if days_to_keep_audit_records is None:
            raise ValueError("Invalid value for `days_to_keep_audit_records`, must not be `None`")  # noqa: E501

        self._days_to_keep_audit_records = days_to_keep_audit_records

    @property
    def unified_fx_url(self):
        """Gets the unified_fx_url of this GlobalConfigurationJson.  # noqa: E501


        :return: The unified_fx_url of this GlobalConfigurationJson.  # noqa: E501
        :rtype: str
        """
        return self._unified_fx_url

    @unified_fx_url.setter
    def unified_fx_url(self, unified_fx_url):
        """Sets the unified_fx_url of this GlobalConfigurationJson.


        :param unified_fx_url: The unified_fx_url of this GlobalConfigurationJson.  # noqa: E501
        :type: str
        """
        if unified_fx_url is None:
            raise ValueError("Invalid value for `unified_fx_url`, must not be `None`")  # noqa: E501

        self._unified_fx_url = unified_fx_url

    @property
    def self_serve_snr_edit_enabled(self):
        """Gets the self_serve_snr_edit_enabled of this GlobalConfigurationJson.  # noqa: E501


        :return: The self_serve_snr_edit_enabled of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._self_serve_snr_edit_enabled

    @self_serve_snr_edit_enabled.setter
    def self_serve_snr_edit_enabled(self, self_serve_snr_edit_enabled):
        """Sets the self_serve_snr_edit_enabled of this GlobalConfigurationJson.


        :param self_serve_snr_edit_enabled: The self_serve_snr_edit_enabled of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if self_serve_snr_edit_enabled is None:
            raise ValueError("Invalid value for `self_serve_snr_edit_enabled`, must not be `None`")  # noqa: E501

        self._self_serve_snr_edit_enabled = self_serve_snr_edit_enabled

    @property
    def self_serve_call_forward_edit_enabled(self):
        """Gets the self_serve_call_forward_edit_enabled of this GlobalConfigurationJson.  # noqa: E501


        :return: The self_serve_call_forward_edit_enabled of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._self_serve_call_forward_edit_enabled

    @self_serve_call_forward_edit_enabled.setter
    def self_serve_call_forward_edit_enabled(self, self_serve_call_forward_edit_enabled):
        """Sets the self_serve_call_forward_edit_enabled of this GlobalConfigurationJson.


        :param self_serve_call_forward_edit_enabled: The self_serve_call_forward_edit_enabled of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if self_serve_call_forward_edit_enabled is None:
            raise ValueError("Invalid value for `self_serve_call_forward_edit_enabled`, must not be `None`")  # noqa: E501

        self._self_serve_call_forward_edit_enabled = self_serve_call_forward_edit_enabled

    @property
    def self_serve_speed_dial_edit_enabled(self):
        """Gets the self_serve_speed_dial_edit_enabled of this GlobalConfigurationJson.  # noqa: E501


        :return: The self_serve_speed_dial_edit_enabled of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._self_serve_speed_dial_edit_enabled

    @self_serve_speed_dial_edit_enabled.setter
    def self_serve_speed_dial_edit_enabled(self, self_serve_speed_dial_edit_enabled):
        """Sets the self_serve_speed_dial_edit_enabled of this GlobalConfigurationJson.


        :param self_serve_speed_dial_edit_enabled: The self_serve_speed_dial_edit_enabled of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if self_serve_speed_dial_edit_enabled is None:
            raise ValueError("Invalid value for `self_serve_speed_dial_edit_enabled`, must not be `None`")  # noqa: E501

        self._self_serve_speed_dial_edit_enabled = self_serve_speed_dial_edit_enabled

    @property
    def automatic_phone_template_selection_enabled(self):
        """Gets the automatic_phone_template_selection_enabled of this GlobalConfigurationJson.  # noqa: E501


        :return: The automatic_phone_template_selection_enabled of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_phone_template_selection_enabled

    @automatic_phone_template_selection_enabled.setter
    def automatic_phone_template_selection_enabled(self, automatic_phone_template_selection_enabled):
        """Sets the automatic_phone_template_selection_enabled of this GlobalConfigurationJson.


        :param automatic_phone_template_selection_enabled: The automatic_phone_template_selection_enabled of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if automatic_phone_template_selection_enabled is None:
            raise ValueError("Invalid value for `automatic_phone_template_selection_enabled`, must not be `None`")  # noqa: E501

        self._automatic_phone_template_selection_enabled = automatic_phone_template_selection_enabled

    @property
    def self_serve_deskphone_provisioning_enabled(self):
        """Gets the self_serve_deskphone_provisioning_enabled of this GlobalConfigurationJson.  # noqa: E501


        :return: The self_serve_deskphone_provisioning_enabled of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._self_serve_deskphone_provisioning_enabled

    @self_serve_deskphone_provisioning_enabled.setter
    def self_serve_deskphone_provisioning_enabled(self, self_serve_deskphone_provisioning_enabled):
        """Sets the self_serve_deskphone_provisioning_enabled of this GlobalConfigurationJson.


        :param self_serve_deskphone_provisioning_enabled: The self_serve_deskphone_provisioning_enabled of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if self_serve_deskphone_provisioning_enabled is None:
            raise ValueError("Invalid value for `self_serve_deskphone_provisioning_enabled`, must not be `None`")  # noqa: E501

        self._self_serve_deskphone_provisioning_enabled = self_serve_deskphone_provisioning_enabled

    @property
    def display_enhanced_line_mode(self):
        """Gets the display_enhanced_line_mode of this GlobalConfigurationJson.  # noqa: E501


        :return: The display_enhanced_line_mode of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._display_enhanced_line_mode

    @display_enhanced_line_mode.setter
    def display_enhanced_line_mode(self, display_enhanced_line_mode):
        """Sets the display_enhanced_line_mode of this GlobalConfigurationJson.


        :param display_enhanced_line_mode: The display_enhanced_line_mode of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if display_enhanced_line_mode is None:
            raise ValueError("Invalid value for `display_enhanced_line_mode`, must not be `None`")  # noqa: E501

        self._display_enhanced_line_mode = display_enhanced_line_mode

    @property
    def french_enabled(self):
        """Gets the french_enabled of this GlobalConfigurationJson.  # noqa: E501


        :return: The french_enabled of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._french_enabled

    @french_enabled.setter
    def french_enabled(self, french_enabled):
        """Sets the french_enabled of this GlobalConfigurationJson.


        :param french_enabled: The french_enabled of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if french_enabled is None:
            raise ValueError("Invalid value for `french_enabled`, must not be `None`")  # noqa: E501

        self._french_enabled = french_enabled

    @property
    def helpdesk_beta_enabled(self):
        """Gets the helpdesk_beta_enabled of this GlobalConfigurationJson.  # noqa: E501


        :return: The helpdesk_beta_enabled of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._helpdesk_beta_enabled

    @helpdesk_beta_enabled.setter
    def helpdesk_beta_enabled(self, helpdesk_beta_enabled):
        """Sets the helpdesk_beta_enabled of this GlobalConfigurationJson.


        :param helpdesk_beta_enabled: The helpdesk_beta_enabled of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if helpdesk_beta_enabled is None:
            raise ValueError("Invalid value for `helpdesk_beta_enabled`, must not be `None`")  # noqa: E501

        self._helpdesk_beta_enabled = helpdesk_beta_enabled

    @property
    def show_auto_answer(self):
        """Gets the show_auto_answer of this GlobalConfigurationJson.  # noqa: E501


        :return: The show_auto_answer of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._show_auto_answer

    @show_auto_answer.setter
    def show_auto_answer(self, show_auto_answer):
        """Sets the show_auto_answer of this GlobalConfigurationJson.


        :param show_auto_answer: The show_auto_answer of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if show_auto_answer is None:
            raise ValueError("Invalid value for `show_auto_answer`, must not be `None`")  # noqa: E501

        self._show_auto_answer = show_auto_answer

    @property
    def ignore_line_associations(self):
        """Gets the ignore_line_associations of this GlobalConfigurationJson.  # noqa: E501


        :return: The ignore_line_associations of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_line_associations

    @ignore_line_associations.setter
    def ignore_line_associations(self, ignore_line_associations):
        """Sets the ignore_line_associations of this GlobalConfigurationJson.


        :param ignore_line_associations: The ignore_line_associations of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if ignore_line_associations is None:
            raise ValueError("Invalid value for `ignore_line_associations`, must not be `None`")  # noqa: E501

        self._ignore_line_associations = ignore_line_associations

    @property
    def max_owned_devices(self):
        """Gets the max_owned_devices of this GlobalConfigurationJson.  # noqa: E501


        :return: The max_owned_devices of this GlobalConfigurationJson.  # noqa: E501
        :rtype: int
        """
        return self._max_owned_devices

    @max_owned_devices.setter
    def max_owned_devices(self, max_owned_devices):
        """Sets the max_owned_devices of this GlobalConfigurationJson.


        :param max_owned_devices: The max_owned_devices of this GlobalConfigurationJson.  # noqa: E501
        :type: int
        """
        if max_owned_devices is None:
            raise ValueError("Invalid value for `max_owned_devices`, must not be `None`")  # noqa: E501

        self._max_owned_devices = max_owned_devices

    @property
    def disable_powershell_caching(self):
        """Gets the disable_powershell_caching of this GlobalConfigurationJson.  # noqa: E501


        :return: The disable_powershell_caching of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._disable_powershell_caching

    @disable_powershell_caching.setter
    def disable_powershell_caching(self, disable_powershell_caching):
        """Sets the disable_powershell_caching of this GlobalConfigurationJson.


        :param disable_powershell_caching: The disable_powershell_caching of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if disable_powershell_caching is None:
            raise ValueError("Invalid value for `disable_powershell_caching`, must not be `None`")  # noqa: E501

        self._disable_powershell_caching = disable_powershell_caching

    @property
    def azure_ad_group_lookup_enabled(self):
        """Gets the azure_ad_group_lookup_enabled of this GlobalConfigurationJson.  # noqa: E501


        :return: The azure_ad_group_lookup_enabled of this GlobalConfigurationJson.  # noqa: E501
        :rtype: bool
        """
        return self._azure_ad_group_lookup_enabled

    @azure_ad_group_lookup_enabled.setter
    def azure_ad_group_lookup_enabled(self, azure_ad_group_lookup_enabled):
        """Sets the azure_ad_group_lookup_enabled of this GlobalConfigurationJson.


        :param azure_ad_group_lookup_enabled: The azure_ad_group_lookup_enabled of this GlobalConfigurationJson.  # noqa: E501
        :type: bool
        """
        if azure_ad_group_lookup_enabled is None:
            raise ValueError("Invalid value for `azure_ad_group_lookup_enabled`, must not be `None`")  # noqa: E501

        self._azure_ad_group_lookup_enabled = azure_ad_group_lookup_enabled

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GlobalConfigurationJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GlobalConfigurationJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
