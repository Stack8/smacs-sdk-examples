# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class JobStatusJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'job_id': 'int',
        'job_state': 'str',
        'error': 'str',
        'last_run_time': 'str',
        'next_run_time': 'str'
    }

    attribute_map = {
        'job_id': 'jobId',
        'job_state': 'jobState',
        'error': 'error',
        'last_run_time': 'lastRunTime',
        'next_run_time': 'nextRunTime'
    }

    def __init__(self, job_id=None, job_state=None, error=None, last_run_time=None, next_run_time=None):  # noqa: E501
        """JobStatusJson - a model defined in Swagger"""  # noqa: E501
        self._job_id = None
        self._job_state = None
        self._error = None
        self._last_run_time = None
        self._next_run_time = None
        self.discriminator = None
        if job_id is not None:
            self.job_id = job_id
        if job_state is not None:
            self.job_state = job_state
        if error is not None:
            self.error = error
        if last_run_time is not None:
            self.last_run_time = last_run_time
        if next_run_time is not None:
            self.next_run_time = next_run_time

    @property
    def job_id(self):
        """Gets the job_id of this JobStatusJson.  # noqa: E501


        :return: The job_id of this JobStatusJson.  # noqa: E501
        :rtype: int
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this JobStatusJson.


        :param job_id: The job_id of this JobStatusJson.  # noqa: E501
        :type: int
        """

        self._job_id = job_id

    @property
    def job_state(self):
        """Gets the job_state of this JobStatusJson.  # noqa: E501


        :return: The job_state of this JobStatusJson.  # noqa: E501
        :rtype: str
        """
        return self._job_state

    @job_state.setter
    def job_state(self, job_state):
        """Sets the job_state of this JobStatusJson.


        :param job_state: The job_state of this JobStatusJson.  # noqa: E501
        :type: str
        """
        allowed_values = ["idle", "running", "queued"]  # noqa: E501
        if job_state not in allowed_values:
            raise ValueError(
                "Invalid value for `job_state` ({0}), must be one of {1}"  # noqa: E501
                .format(job_state, allowed_values)
            )

        self._job_state = job_state

    @property
    def error(self):
        """Gets the error of this JobStatusJson.  # noqa: E501


        :return: The error of this JobStatusJson.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this JobStatusJson.


        :param error: The error of this JobStatusJson.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def last_run_time(self):
        """Gets the last_run_time of this JobStatusJson.  # noqa: E501


        :return: The last_run_time of this JobStatusJson.  # noqa: E501
        :rtype: str
        """
        return self._last_run_time

    @last_run_time.setter
    def last_run_time(self, last_run_time):
        """Sets the last_run_time of this JobStatusJson.


        :param last_run_time: The last_run_time of this JobStatusJson.  # noqa: E501
        :type: str
        """

        self._last_run_time = last_run_time

    @property
    def next_run_time(self):
        """Gets the next_run_time of this JobStatusJson.  # noqa: E501


        :return: The next_run_time of this JobStatusJson.  # noqa: E501
        :rtype: str
        """
        return self._next_run_time

    @next_run_time.setter
    def next_run_time(self, next_run_time):
        """Sets the next_run_time of this JobStatusJson.


        :param next_run_time: The next_run_time of this JobStatusJson.  # noqa: E501
        :type: str
        """

        self._next_run_time = next_run_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(JobStatusJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, JobStatusJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
