# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'user_id': 'str',
        'type': 'str',
        'tags': 'dict(str, str)',
        'server': 'str',
        'timestamp': 'str',
        'category': 'str',
        'response': 'str',
        'error_message': 'str',
        'error_details': 'str',
        'before_json': 'str',
        'after_json': 'str'
    }

    attribute_map = {
        'id': 'id',
        'user_id': 'userId',
        'type': 'type',
        'tags': 'tags',
        'server': 'server',
        'timestamp': 'timestamp',
        'category': 'category',
        'response': 'response',
        'error_message': 'errorMessage',
        'error_details': 'errorDetails',
        'before_json': 'beforeJson',
        'after_json': 'afterJson'
    }

    def __init__(self, id=None, user_id=None, type=None, tags=None, server=None, timestamp=None, category=None, response=None, error_message=None, error_details=None, before_json=None, after_json=None):  # noqa: E501
        """AuditJson - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._user_id = None
        self._type = None
        self._tags = None
        self._server = None
        self._timestamp = None
        self._category = None
        self._response = None
        self._error_message = None
        self._error_details = None
        self._before_json = None
        self._after_json = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if user_id is not None:
            self.user_id = user_id
        if type is not None:
            self.type = type
        if tags is not None:
            self.tags = tags
        if server is not None:
            self.server = server
        if timestamp is not None:
            self.timestamp = timestamp
        if category is not None:
            self.category = category
        if response is not None:
            self.response = response
        if error_message is not None:
            self.error_message = error_message
        if error_details is not None:
            self.error_details = error_details
        if before_json is not None:
            self.before_json = before_json
        if after_json is not None:
            self.after_json = after_json

    @property
    def id(self):
        """Gets the id of this AuditJson.  # noqa: E501


        :return: The id of this AuditJson.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AuditJson.


        :param id: The id of this AuditJson.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def user_id(self):
        """Gets the user_id of this AuditJson.  # noqa: E501


        :return: The user_id of this AuditJson.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AuditJson.


        :param user_id: The user_id of this AuditJson.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def type(self):
        """Gets the type of this AuditJson.  # noqa: E501


        :return: The type of this AuditJson.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuditJson.


        :param type: The type of this AuditJson.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def tags(self):
        """Gets the tags of this AuditJson.  # noqa: E501


        :return: The tags of this AuditJson.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this AuditJson.


        :param tags: The tags of this AuditJson.  # noqa: E501
        :type: dict(str, str)
        """

        self._tags = tags

    @property
    def server(self):
        """Gets the server of this AuditJson.  # noqa: E501


        :return: The server of this AuditJson.  # noqa: E501
        :rtype: str
        """
        return self._server

    @server.setter
    def server(self, server):
        """Sets the server of this AuditJson.


        :param server: The server of this AuditJson.  # noqa: E501
        :type: str
        """

        self._server = server

    @property
    def timestamp(self):
        """Gets the timestamp of this AuditJson.  # noqa: E501


        :return: The timestamp of this AuditJson.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this AuditJson.


        :param timestamp: The timestamp of this AuditJson.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def category(self):
        """Gets the category of this AuditJson.  # noqa: E501


        :return: The category of this AuditJson.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AuditJson.


        :param category: The category of this AuditJson.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def response(self):
        """Gets the response of this AuditJson.  # noqa: E501


        :return: The response of this AuditJson.  # noqa: E501
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this AuditJson.


        :param response: The response of this AuditJson.  # noqa: E501
        :type: str
        """

        self._response = response

    @property
    def error_message(self):
        """Gets the error_message of this AuditJson.  # noqa: E501


        :return: The error_message of this AuditJson.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this AuditJson.


        :param error_message: The error_message of this AuditJson.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def error_details(self):
        """Gets the error_details of this AuditJson.  # noqa: E501


        :return: The error_details of this AuditJson.  # noqa: E501
        :rtype: str
        """
        return self._error_details

    @error_details.setter
    def error_details(self, error_details):
        """Sets the error_details of this AuditJson.


        :param error_details: The error_details of this AuditJson.  # noqa: E501
        :type: str
        """

        self._error_details = error_details

    @property
    def before_json(self):
        """Gets the before_json of this AuditJson.  # noqa: E501


        :return: The before_json of this AuditJson.  # noqa: E501
        :rtype: str
        """
        return self._before_json

    @before_json.setter
    def before_json(self, before_json):
        """Sets the before_json of this AuditJson.


        :param before_json: The before_json of this AuditJson.  # noqa: E501
        :type: str
        """

        self._before_json = before_json

    @property
    def after_json(self):
        """Gets the after_json of this AuditJson.  # noqa: E501


        :return: The after_json of this AuditJson.  # noqa: E501
        :rtype: str
        """
        return self._after_json

    @after_json.setter
    def after_json(self, after_json):
        """Sets the after_json of this AuditJson.


        :param after_json: The after_json of this AuditJson.  # noqa: E501
        :type: str
        """

        self._after_json = after_json

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
