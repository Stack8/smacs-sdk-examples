# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhoneButtonTemplateInventoryJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'model': 'str',
        'protocol': 'str',
        'standard_template': 'bool',
        'cucm_device_default': 'bool',
        'cucm_id': 'int',
        'phone_refs': 'int'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'model': 'model',
        'protocol': 'protocol',
        'standard_template': 'standardTemplate',
        'cucm_device_default': 'cucmDeviceDefault',
        'cucm_id': 'cucmId',
        'phone_refs': 'phoneRefs'
    }

    def __init__(self, id=None, name=None, model=None, protocol=None, standard_template=None, cucm_device_default=None, cucm_id=None, phone_refs=None):  # noqa: E501
        """PhoneButtonTemplateInventoryJson - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._model = None
        self._protocol = None
        self._standard_template = None
        self._cucm_device_default = None
        self._cucm_id = None
        self._phone_refs = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if model is not None:
            self.model = model
        if protocol is not None:
            self.protocol = protocol
        if standard_template is not None:
            self.standard_template = standard_template
        if cucm_device_default is not None:
            self.cucm_device_default = cucm_device_default
        if cucm_id is not None:
            self.cucm_id = cucm_id
        if phone_refs is not None:
            self.phone_refs = phone_refs

    @property
    def id(self):
        """Gets the id of this PhoneButtonTemplateInventoryJson.  # noqa: E501


        :return: The id of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PhoneButtonTemplateInventoryJson.


        :param id: The id of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this PhoneButtonTemplateInventoryJson.  # noqa: E501


        :return: The name of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PhoneButtonTemplateInventoryJson.


        :param name: The name of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def model(self):
        """Gets the model of this PhoneButtonTemplateInventoryJson.  # noqa: E501


        :return: The model of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this PhoneButtonTemplateInventoryJson.


        :param model: The model of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def protocol(self):
        """Gets the protocol of this PhoneButtonTemplateInventoryJson.  # noqa: E501


        :return: The protocol of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this PhoneButtonTemplateInventoryJson.


        :param protocol: The protocol of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def standard_template(self):
        """Gets the standard_template of this PhoneButtonTemplateInventoryJson.  # noqa: E501


        :return: The standard_template of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :rtype: bool
        """
        return self._standard_template

    @standard_template.setter
    def standard_template(self, standard_template):
        """Sets the standard_template of this PhoneButtonTemplateInventoryJson.


        :param standard_template: The standard_template of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :type: bool
        """

        self._standard_template = standard_template

    @property
    def cucm_device_default(self):
        """Gets the cucm_device_default of this PhoneButtonTemplateInventoryJson.  # noqa: E501


        :return: The cucm_device_default of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :rtype: bool
        """
        return self._cucm_device_default

    @cucm_device_default.setter
    def cucm_device_default(self, cucm_device_default):
        """Sets the cucm_device_default of this PhoneButtonTemplateInventoryJson.


        :param cucm_device_default: The cucm_device_default of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :type: bool
        """

        self._cucm_device_default = cucm_device_default

    @property
    def cucm_id(self):
        """Gets the cucm_id of this PhoneButtonTemplateInventoryJson.  # noqa: E501


        :return: The cucm_id of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :rtype: int
        """
        return self._cucm_id

    @cucm_id.setter
    def cucm_id(self, cucm_id):
        """Sets the cucm_id of this PhoneButtonTemplateInventoryJson.


        :param cucm_id: The cucm_id of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :type: int
        """

        self._cucm_id = cucm_id

    @property
    def phone_refs(self):
        """Gets the phone_refs of this PhoneButtonTemplateInventoryJson.  # noqa: E501


        :return: The phone_refs of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :rtype: int
        """
        return self._phone_refs

    @phone_refs.setter
    def phone_refs(self, phone_refs):
        """Sets the phone_refs of this PhoneButtonTemplateInventoryJson.


        :param phone_refs: The phone_refs of this PhoneButtonTemplateInventoryJson.  # noqa: E501
        :type: int
        """

        self._phone_refs = phone_refs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneButtonTemplateInventoryJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneButtonTemplateInventoryJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
