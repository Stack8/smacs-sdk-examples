# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhoneButtonTemplateJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'model': 'str',
        'protocol': 'str',
        'standard_template': 'bool',
        'buttons': 'list[TemplateButtonJson]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'model': 'model',
        'protocol': 'protocol',
        'standard_template': 'standardTemplate',
        'buttons': 'buttons'
    }

    def __init__(self, id=None, name=None, model=None, protocol=None, standard_template=None, buttons=None):  # noqa: E501
        """PhoneButtonTemplateJson - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._model = None
        self._protocol = None
        self._standard_template = None
        self._buttons = None
        self.discriminator = None
        self.id = id
        self.name = name
        self.model = model
        self.protocol = protocol
        if standard_template is not None:
            self.standard_template = standard_template
        if buttons is not None:
            self.buttons = buttons

    @property
    def id(self):
        """Gets the id of this PhoneButtonTemplateJson.  # noqa: E501


        :return: The id of this PhoneButtonTemplateJson.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PhoneButtonTemplateJson.


        :param id: The id of this PhoneButtonTemplateJson.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this PhoneButtonTemplateJson.  # noqa: E501


        :return: The name of this PhoneButtonTemplateJson.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PhoneButtonTemplateJson.


        :param name: The name of this PhoneButtonTemplateJson.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def model(self):
        """Gets the model of this PhoneButtonTemplateJson.  # noqa: E501


        :return: The model of this PhoneButtonTemplateJson.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this PhoneButtonTemplateJson.


        :param model: The model of this PhoneButtonTemplateJson.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def protocol(self):
        """Gets the protocol of this PhoneButtonTemplateJson.  # noqa: E501


        :return: The protocol of this PhoneButtonTemplateJson.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this PhoneButtonTemplateJson.


        :param protocol: The protocol of this PhoneButtonTemplateJson.  # noqa: E501
        :type: str
        """
        if protocol is None:
            raise ValueError("Invalid value for `protocol`, must not be `None`")  # noqa: E501

        self._protocol = protocol

    @property
    def standard_template(self):
        """Gets the standard_template of this PhoneButtonTemplateJson.  # noqa: E501


        :return: The standard_template of this PhoneButtonTemplateJson.  # noqa: E501
        :rtype: bool
        """
        return self._standard_template

    @standard_template.setter
    def standard_template(self, standard_template):
        """Sets the standard_template of this PhoneButtonTemplateJson.


        :param standard_template: The standard_template of this PhoneButtonTemplateJson.  # noqa: E501
        :type: bool
        """

        self._standard_template = standard_template

    @property
    def buttons(self):
        """Gets the buttons of this PhoneButtonTemplateJson.  # noqa: E501


        :return: The buttons of this PhoneButtonTemplateJson.  # noqa: E501
        :rtype: list[TemplateButtonJson]
        """
        return self._buttons

    @buttons.setter
    def buttons(self, buttons):
        """Sets the buttons of this PhoneButtonTemplateJson.


        :param buttons: The buttons of this PhoneButtonTemplateJson.  # noqa: E501
        :type: list[TemplateButtonJson]
        """

        self._buttons = buttons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneButtonTemplateJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneButtonTemplateJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
