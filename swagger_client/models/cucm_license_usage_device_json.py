# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CucmLicenseUsageDeviceJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'device_name': 'str',
        'device_model_name': 'str',
        'duration': 'int',
        'last_used': 'str',
        'is_deletion_candidate': 'bool',
        'server_id': 'int',
        'server_description': 'str',
        'model_moniker': 'str',
        'license_usage': 'str',
        'current_license': 'str',
        'recently_created_date': 'str',
        'recently_deleted': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'device_name': 'deviceName',
        'device_model_name': 'deviceModelName',
        'duration': 'duration',
        'last_used': 'lastUsed',
        'is_deletion_candidate': 'isDeletionCandidate',
        'server_id': 'serverId',
        'server_description': 'serverDescription',
        'model_moniker': 'modelMoniker',
        'license_usage': 'licenseUsage',
        'current_license': 'currentLicense',
        'recently_created_date': 'recentlyCreatedDate',
        'recently_deleted': 'recentlyDeleted'
    }

    def __init__(self, id=None, device_name=None, device_model_name=None, duration=None, last_used=None, is_deletion_candidate=None, server_id=None, server_description=None, model_moniker=None, license_usage=None, current_license=None, recently_created_date=None, recently_deleted=None):  # noqa: E501
        """CucmLicenseUsageDeviceJson - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._device_name = None
        self._device_model_name = None
        self._duration = None
        self._last_used = None
        self._is_deletion_candidate = None
        self._server_id = None
        self._server_description = None
        self._model_moniker = None
        self._license_usage = None
        self._current_license = None
        self._recently_created_date = None
        self._recently_deleted = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if device_name is not None:
            self.device_name = device_name
        if device_model_name is not None:
            self.device_model_name = device_model_name
        if duration is not None:
            self.duration = duration
        if last_used is not None:
            self.last_used = last_used
        if is_deletion_candidate is not None:
            self.is_deletion_candidate = is_deletion_candidate
        if server_id is not None:
            self.server_id = server_id
        if server_description is not None:
            self.server_description = server_description
        if model_moniker is not None:
            self.model_moniker = model_moniker
        if license_usage is not None:
            self.license_usage = license_usage
        if current_license is not None:
            self.current_license = current_license
        if recently_created_date is not None:
            self.recently_created_date = recently_created_date
        if recently_deleted is not None:
            self.recently_deleted = recently_deleted

    @property
    def id(self):
        """Gets the id of this CucmLicenseUsageDeviceJson.  # noqa: E501


        :return: The id of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CucmLicenseUsageDeviceJson.


        :param id: The id of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def device_name(self):
        """Gets the device_name of this CucmLicenseUsageDeviceJson.  # noqa: E501


        :return: The device_name of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name):
        """Sets the device_name of this CucmLicenseUsageDeviceJson.


        :param device_name: The device_name of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :type: str
        """

        self._device_name = device_name

    @property
    def device_model_name(self):
        """Gets the device_model_name of this CucmLicenseUsageDeviceJson.  # noqa: E501


        :return: The device_model_name of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :rtype: str
        """
        return self._device_model_name

    @device_model_name.setter
    def device_model_name(self, device_model_name):
        """Sets the device_model_name of this CucmLicenseUsageDeviceJson.


        :param device_model_name: The device_model_name of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :type: str
        """

        self._device_model_name = device_model_name

    @property
    def duration(self):
        """Gets the duration of this CucmLicenseUsageDeviceJson.  # noqa: E501


        :return: The duration of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this CucmLicenseUsageDeviceJson.


        :param duration: The duration of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def last_used(self):
        """Gets the last_used of this CucmLicenseUsageDeviceJson.  # noqa: E501


        :return: The last_used of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :rtype: str
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used):
        """Sets the last_used of this CucmLicenseUsageDeviceJson.


        :param last_used: The last_used of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :type: str
        """

        self._last_used = last_used

    @property
    def is_deletion_candidate(self):
        """Gets the is_deletion_candidate of this CucmLicenseUsageDeviceJson.  # noqa: E501


        :return: The is_deletion_candidate of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :rtype: bool
        """
        return self._is_deletion_candidate

    @is_deletion_candidate.setter
    def is_deletion_candidate(self, is_deletion_candidate):
        """Sets the is_deletion_candidate of this CucmLicenseUsageDeviceJson.


        :param is_deletion_candidate: The is_deletion_candidate of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :type: bool
        """

        self._is_deletion_candidate = is_deletion_candidate

    @property
    def server_id(self):
        """Gets the server_id of this CucmLicenseUsageDeviceJson.  # noqa: E501


        :return: The server_id of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :rtype: int
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id):
        """Sets the server_id of this CucmLicenseUsageDeviceJson.


        :param server_id: The server_id of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :type: int
        """

        self._server_id = server_id

    @property
    def server_description(self):
        """Gets the server_description of this CucmLicenseUsageDeviceJson.  # noqa: E501


        :return: The server_description of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :rtype: str
        """
        return self._server_description

    @server_description.setter
    def server_description(self, server_description):
        """Sets the server_description of this CucmLicenseUsageDeviceJson.


        :param server_description: The server_description of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :type: str
        """

        self._server_description = server_description

    @property
    def model_moniker(self):
        """Gets the model_moniker of this CucmLicenseUsageDeviceJson.  # noqa: E501


        :return: The model_moniker of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :rtype: str
        """
        return self._model_moniker

    @model_moniker.setter
    def model_moniker(self, model_moniker):
        """Sets the model_moniker of this CucmLicenseUsageDeviceJson.


        :param model_moniker: The model_moniker of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :type: str
        """

        self._model_moniker = model_moniker

    @property
    def license_usage(self):
        """Gets the license_usage of this CucmLicenseUsageDeviceJson.  # noqa: E501


        :return: The license_usage of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :rtype: str
        """
        return self._license_usage

    @license_usage.setter
    def license_usage(self, license_usage):
        """Sets the license_usage of this CucmLicenseUsageDeviceJson.


        :param license_usage: The license_usage of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :type: str
        """

        self._license_usage = license_usage

    @property
    def current_license(self):
        """Gets the current_license of this CucmLicenseUsageDeviceJson.  # noqa: E501


        :return: The current_license of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :rtype: str
        """
        return self._current_license

    @current_license.setter
    def current_license(self, current_license):
        """Sets the current_license of this CucmLicenseUsageDeviceJson.


        :param current_license: The current_license of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :type: str
        """

        self._current_license = current_license

    @property
    def recently_created_date(self):
        """Gets the recently_created_date of this CucmLicenseUsageDeviceJson.  # noqa: E501


        :return: The recently_created_date of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :rtype: str
        """
        return self._recently_created_date

    @recently_created_date.setter
    def recently_created_date(self, recently_created_date):
        """Sets the recently_created_date of this CucmLicenseUsageDeviceJson.


        :param recently_created_date: The recently_created_date of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :type: str
        """

        self._recently_created_date = recently_created_date

    @property
    def recently_deleted(self):
        """Gets the recently_deleted of this CucmLicenseUsageDeviceJson.  # noqa: E501


        :return: The recently_deleted of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :rtype: bool
        """
        return self._recently_deleted

    @recently_deleted.setter
    def recently_deleted(self, recently_deleted):
        """Sets the recently_deleted of this CucmLicenseUsageDeviceJson.


        :param recently_deleted: The recently_deleted of this CucmLicenseUsageDeviceJson.  # noqa: E501
        :type: bool
        """

        self._recently_deleted = recently_deleted

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CucmLicenseUsageDeviceJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CucmLicenseUsageDeviceJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
