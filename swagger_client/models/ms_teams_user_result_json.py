# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MsTeamsUserResultJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ref': 'MsTeamsUserRefJson',
        'line_uri': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'user_principal_name': 'str'
    }

    attribute_map = {
        'ref': 'ref',
        'line_uri': 'lineUri',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'user_principal_name': 'userPrincipalName'
    }

    def __init__(self, ref=None, line_uri=None, first_name=None, last_name=None, user_principal_name=None):  # noqa: E501
        """MsTeamsUserResultJson - a model defined in Swagger"""  # noqa: E501
        self._ref = None
        self._line_uri = None
        self._first_name = None
        self._last_name = None
        self._user_principal_name = None
        self.discriminator = None
        self.ref = ref
        self.line_uri = line_uri
        self.first_name = first_name
        self.last_name = last_name
        self.user_principal_name = user_principal_name

    @property
    def ref(self):
        """Gets the ref of this MsTeamsUserResultJson.  # noqa: E501


        :return: The ref of this MsTeamsUserResultJson.  # noqa: E501
        :rtype: MsTeamsUserRefJson
        """
        return self._ref

    @ref.setter
    def ref(self, ref):
        """Sets the ref of this MsTeamsUserResultJson.


        :param ref: The ref of this MsTeamsUserResultJson.  # noqa: E501
        :type: MsTeamsUserRefJson
        """
        if ref is None:
            raise ValueError("Invalid value for `ref`, must not be `None`")  # noqa: E501

        self._ref = ref

    @property
    def line_uri(self):
        """Gets the line_uri of this MsTeamsUserResultJson.  # noqa: E501


        :return: The line_uri of this MsTeamsUserResultJson.  # noqa: E501
        :rtype: str
        """
        return self._line_uri

    @line_uri.setter
    def line_uri(self, line_uri):
        """Sets the line_uri of this MsTeamsUserResultJson.


        :param line_uri: The line_uri of this MsTeamsUserResultJson.  # noqa: E501
        :type: str
        """
        if line_uri is None:
            raise ValueError("Invalid value for `line_uri`, must not be `None`")  # noqa: E501

        self._line_uri = line_uri

    @property
    def first_name(self):
        """Gets the first_name of this MsTeamsUserResultJson.  # noqa: E501


        :return: The first_name of this MsTeamsUserResultJson.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this MsTeamsUserResultJson.


        :param first_name: The first_name of this MsTeamsUserResultJson.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this MsTeamsUserResultJson.  # noqa: E501


        :return: The last_name of this MsTeamsUserResultJson.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this MsTeamsUserResultJson.


        :param last_name: The last_name of this MsTeamsUserResultJson.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def user_principal_name(self):
        """Gets the user_principal_name of this MsTeamsUserResultJson.  # noqa: E501


        :return: The user_principal_name of this MsTeamsUserResultJson.  # noqa: E501
        :rtype: str
        """
        return self._user_principal_name

    @user_principal_name.setter
    def user_principal_name(self, user_principal_name):
        """Sets the user_principal_name of this MsTeamsUserResultJson.


        :param user_principal_name: The user_principal_name of this MsTeamsUserResultJson.  # noqa: E501
        :type: str
        """
        if user_principal_name is None:
            raise ValueError("Invalid value for `user_principal_name`, must not be `None`")  # noqa: E501

        self._user_principal_name = user_principal_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MsTeamsUserResultJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MsTeamsUserResultJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
