# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeviceUtilizationRefreshJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'delete_files': 'bool',
        'allow_recent_files': 'bool',
        'sync_devices': 'bool'
    }

    attribute_map = {
        'delete_files': 'deleteFiles',
        'allow_recent_files': 'allowRecentFiles',
        'sync_devices': 'syncDevices'
    }

    def __init__(self, delete_files=None, allow_recent_files=None, sync_devices=None):  # noqa: E501
        """DeviceUtilizationRefreshJson - a model defined in Swagger"""  # noqa: E501
        self._delete_files = None
        self._allow_recent_files = None
        self._sync_devices = None
        self.discriminator = None
        if delete_files is not None:
            self.delete_files = delete_files
        if allow_recent_files is not None:
            self.allow_recent_files = allow_recent_files
        if sync_devices is not None:
            self.sync_devices = sync_devices

    @property
    def delete_files(self):
        """Gets the delete_files of this DeviceUtilizationRefreshJson.  # noqa: E501


        :return: The delete_files of this DeviceUtilizationRefreshJson.  # noqa: E501
        :rtype: bool
        """
        return self._delete_files

    @delete_files.setter
    def delete_files(self, delete_files):
        """Sets the delete_files of this DeviceUtilizationRefreshJson.


        :param delete_files: The delete_files of this DeviceUtilizationRefreshJson.  # noqa: E501
        :type: bool
        """

        self._delete_files = delete_files

    @property
    def allow_recent_files(self):
        """Gets the allow_recent_files of this DeviceUtilizationRefreshJson.  # noqa: E501


        :return: The allow_recent_files of this DeviceUtilizationRefreshJson.  # noqa: E501
        :rtype: bool
        """
        return self._allow_recent_files

    @allow_recent_files.setter
    def allow_recent_files(self, allow_recent_files):
        """Sets the allow_recent_files of this DeviceUtilizationRefreshJson.


        :param allow_recent_files: The allow_recent_files of this DeviceUtilizationRefreshJson.  # noqa: E501
        :type: bool
        """

        self._allow_recent_files = allow_recent_files

    @property
    def sync_devices(self):
        """Gets the sync_devices of this DeviceUtilizationRefreshJson.  # noqa: E501


        :return: The sync_devices of this DeviceUtilizationRefreshJson.  # noqa: E501
        :rtype: bool
        """
        return self._sync_devices

    @sync_devices.setter
    def sync_devices(self, sync_devices):
        """Sets the sync_devices of this DeviceUtilizationRefreshJson.


        :param sync_devices: The sync_devices of this DeviceUtilizationRefreshJson.  # noqa: E501
        :type: bool
        """

        self._sync_devices = sync_devices

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeviceUtilizationRefreshJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeviceUtilizationRefreshJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
