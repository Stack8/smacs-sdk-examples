# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LineAppearanceReportJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'common_settings': 'LineFeatureJson',
        'phones_line_report_jsons': 'list[PhonesLineReportJson]',
        'extension_mobility_line_report_jsons': 'list[ExtensionMobilityLineReportJson]',
        'snr_profile_line_report_jsons': 'list[SnrProfileLineReportJson]'
    }

    attribute_map = {
        'common_settings': 'commonSettings',
        'phones_line_report_jsons': 'phonesLineReportJsons',
        'extension_mobility_line_report_jsons': 'extensionMobilityLineReportJsons',
        'snr_profile_line_report_jsons': 'snrProfileLineReportJsons'
    }

    def __init__(self, common_settings=None, phones_line_report_jsons=None, extension_mobility_line_report_jsons=None, snr_profile_line_report_jsons=None):  # noqa: E501
        """LineAppearanceReportJson - a model defined in Swagger"""  # noqa: E501
        self._common_settings = None
        self._phones_line_report_jsons = None
        self._extension_mobility_line_report_jsons = None
        self._snr_profile_line_report_jsons = None
        self.discriminator = None
        self.common_settings = common_settings
        self.phones_line_report_jsons = phones_line_report_jsons
        self.extension_mobility_line_report_jsons = extension_mobility_line_report_jsons
        self.snr_profile_line_report_jsons = snr_profile_line_report_jsons

    @property
    def common_settings(self):
        """Gets the common_settings of this LineAppearanceReportJson.  # noqa: E501


        :return: The common_settings of this LineAppearanceReportJson.  # noqa: E501
        :rtype: LineFeatureJson
        """
        return self._common_settings

    @common_settings.setter
    def common_settings(self, common_settings):
        """Sets the common_settings of this LineAppearanceReportJson.


        :param common_settings: The common_settings of this LineAppearanceReportJson.  # noqa: E501
        :type: LineFeatureJson
        """
        if common_settings is None:
            raise ValueError("Invalid value for `common_settings`, must not be `None`")  # noqa: E501

        self._common_settings = common_settings

    @property
    def phones_line_report_jsons(self):
        """Gets the phones_line_report_jsons of this LineAppearanceReportJson.  # noqa: E501


        :return: The phones_line_report_jsons of this LineAppearanceReportJson.  # noqa: E501
        :rtype: list[PhonesLineReportJson]
        """
        return self._phones_line_report_jsons

    @phones_line_report_jsons.setter
    def phones_line_report_jsons(self, phones_line_report_jsons):
        """Sets the phones_line_report_jsons of this LineAppearanceReportJson.


        :param phones_line_report_jsons: The phones_line_report_jsons of this LineAppearanceReportJson.  # noqa: E501
        :type: list[PhonesLineReportJson]
        """
        if phones_line_report_jsons is None:
            raise ValueError("Invalid value for `phones_line_report_jsons`, must not be `None`")  # noqa: E501

        self._phones_line_report_jsons = phones_line_report_jsons

    @property
    def extension_mobility_line_report_jsons(self):
        """Gets the extension_mobility_line_report_jsons of this LineAppearanceReportJson.  # noqa: E501


        :return: The extension_mobility_line_report_jsons of this LineAppearanceReportJson.  # noqa: E501
        :rtype: list[ExtensionMobilityLineReportJson]
        """
        return self._extension_mobility_line_report_jsons

    @extension_mobility_line_report_jsons.setter
    def extension_mobility_line_report_jsons(self, extension_mobility_line_report_jsons):
        """Sets the extension_mobility_line_report_jsons of this LineAppearanceReportJson.


        :param extension_mobility_line_report_jsons: The extension_mobility_line_report_jsons of this LineAppearanceReportJson.  # noqa: E501
        :type: list[ExtensionMobilityLineReportJson]
        """
        if extension_mobility_line_report_jsons is None:
            raise ValueError("Invalid value for `extension_mobility_line_report_jsons`, must not be `None`")  # noqa: E501

        self._extension_mobility_line_report_jsons = extension_mobility_line_report_jsons

    @property
    def snr_profile_line_report_jsons(self):
        """Gets the snr_profile_line_report_jsons of this LineAppearanceReportJson.  # noqa: E501


        :return: The snr_profile_line_report_jsons of this LineAppearanceReportJson.  # noqa: E501
        :rtype: list[SnrProfileLineReportJson]
        """
        return self._snr_profile_line_report_jsons

    @snr_profile_line_report_jsons.setter
    def snr_profile_line_report_jsons(self, snr_profile_line_report_jsons):
        """Sets the snr_profile_line_report_jsons of this LineAppearanceReportJson.


        :param snr_profile_line_report_jsons: The snr_profile_line_report_jsons of this LineAppearanceReportJson.  # noqa: E501
        :type: list[SnrProfileLineReportJson]
        """
        if snr_profile_line_report_jsons is None:
            raise ValueError("Invalid value for `snr_profile_line_report_jsons`, must not be `None`")  # noqa: E501

        self._snr_profile_line_report_jsons = snr_profile_line_report_jsons

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LineAppearanceReportJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LineAppearanceReportJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
