# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AuditCriteriaJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_time': 'str',
        'end_time': 'str',
        'performed_by': 'str',
        'category': 'str',
        'type': 'str',
        'tag': 'str',
        'server_name': 'str',
        'response': 'str',
        'page': 'int',
        'page_size': 'int'
    }

    attribute_map = {
        'start_time': 'startTime',
        'end_time': 'endTime',
        'performed_by': 'performedBy',
        'category': 'category',
        'type': 'type',
        'tag': 'tag',
        'server_name': 'serverName',
        'response': 'response',
        'page': 'page',
        'page_size': 'pageSize'
    }

    def __init__(self, start_time=None, end_time=None, performed_by=None, category=None, type=None, tag=None, server_name=None, response=None, page=None, page_size=None):  # noqa: E501
        """AuditCriteriaJson - a model defined in Swagger"""  # noqa: E501
        self._start_time = None
        self._end_time = None
        self._performed_by = None
        self._category = None
        self._type = None
        self._tag = None
        self._server_name = None
        self._response = None
        self._page = None
        self._page_size = None
        self.discriminator = None
        if start_time is not None:
            self.start_time = start_time
        if end_time is not None:
            self.end_time = end_time
        if performed_by is not None:
            self.performed_by = performed_by
        if category is not None:
            self.category = category
        if type is not None:
            self.type = type
        if tag is not None:
            self.tag = tag
        if server_name is not None:
            self.server_name = server_name
        if response is not None:
            self.response = response
        if page is not None:
            self.page = page
        if page_size is not None:
            self.page_size = page_size

    @property
    def start_time(self):
        """Gets the start_time of this AuditCriteriaJson.  # noqa: E501


        :return: The start_time of this AuditCriteriaJson.  # noqa: E501
        :rtype: str
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this AuditCriteriaJson.


        :param start_time: The start_time of this AuditCriteriaJson.  # noqa: E501
        :type: str
        """

        self._start_time = start_time

    @property
    def end_time(self):
        """Gets the end_time of this AuditCriteriaJson.  # noqa: E501


        :return: The end_time of this AuditCriteriaJson.  # noqa: E501
        :rtype: str
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this AuditCriteriaJson.


        :param end_time: The end_time of this AuditCriteriaJson.  # noqa: E501
        :type: str
        """

        self._end_time = end_time

    @property
    def performed_by(self):
        """Gets the performed_by of this AuditCriteriaJson.  # noqa: E501


        :return: The performed_by of this AuditCriteriaJson.  # noqa: E501
        :rtype: str
        """
        return self._performed_by

    @performed_by.setter
    def performed_by(self, performed_by):
        """Sets the performed_by of this AuditCriteriaJson.


        :param performed_by: The performed_by of this AuditCriteriaJson.  # noqa: E501
        :type: str
        """

        self._performed_by = performed_by

    @property
    def category(self):
        """Gets the category of this AuditCriteriaJson.  # noqa: E501


        :return: The category of this AuditCriteriaJson.  # noqa: E501
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this AuditCriteriaJson.


        :param category: The category of this AuditCriteriaJson.  # noqa: E501
        :type: str
        """

        self._category = category

    @property
    def type(self):
        """Gets the type of this AuditCriteriaJson.  # noqa: E501


        :return: The type of this AuditCriteriaJson.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AuditCriteriaJson.


        :param type: The type of this AuditCriteriaJson.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def tag(self):
        """Gets the tag of this AuditCriteriaJson.  # noqa: E501


        :return: The tag of this AuditCriteriaJson.  # noqa: E501
        :rtype: str
        """
        return self._tag

    @tag.setter
    def tag(self, tag):
        """Sets the tag of this AuditCriteriaJson.


        :param tag: The tag of this AuditCriteriaJson.  # noqa: E501
        :type: str
        """

        self._tag = tag

    @property
    def server_name(self):
        """Gets the server_name of this AuditCriteriaJson.  # noqa: E501


        :return: The server_name of this AuditCriteriaJson.  # noqa: E501
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name):
        """Sets the server_name of this AuditCriteriaJson.


        :param server_name: The server_name of this AuditCriteriaJson.  # noqa: E501
        :type: str
        """

        self._server_name = server_name

    @property
    def response(self):
        """Gets the response of this AuditCriteriaJson.  # noqa: E501


        :return: The response of this AuditCriteriaJson.  # noqa: E501
        :rtype: str
        """
        return self._response

    @response.setter
    def response(self, response):
        """Sets the response of this AuditCriteriaJson.


        :param response: The response of this AuditCriteriaJson.  # noqa: E501
        :type: str
        """

        self._response = response

    @property
    def page(self):
        """Gets the page of this AuditCriteriaJson.  # noqa: E501


        :return: The page of this AuditCriteriaJson.  # noqa: E501
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this AuditCriteriaJson.


        :param page: The page of this AuditCriteriaJson.  # noqa: E501
        :type: int
        """

        self._page = page

    @property
    def page_size(self):
        """Gets the page_size of this AuditCriteriaJson.  # noqa: E501


        :return: The page_size of this AuditCriteriaJson.  # noqa: E501
        :rtype: int
        """
        return self._page_size

    @page_size.setter
    def page_size(self, page_size):
        """Sets the page_size of this AuditCriteriaJson.


        :param page_size: The page_size of this AuditCriteriaJson.  # noqa: E501
        :type: int
        """

        self._page_size = page_size

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AuditCriteriaJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AuditCriteriaJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
