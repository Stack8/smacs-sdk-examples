# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeprovisioningScheduleJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'daily_job_time': 'str',
        'periodic_job_minutes': 'int',
        'make_deskphones_public_enabled': 'bool',
        'keep_voicemail_enabled': 'bool',
        'remove365_licenses': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'daily_job_time': 'dailyJobTime',
        'periodic_job_minutes': 'periodicJobMinutes',
        'make_deskphones_public_enabled': 'makeDeskphonesPublicEnabled',
        'keep_voicemail_enabled': 'keepVoicemailEnabled',
        'remove365_licenses': 'remove365Licenses'
    }

    def __init__(self, id=None, name=None, daily_job_time=None, periodic_job_minutes=None, make_deskphones_public_enabled=None, keep_voicemail_enabled=None, remove365_licenses=None):  # noqa: E501
        """DeprovisioningScheduleJson - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._daily_job_time = None
        self._periodic_job_minutes = None
        self._make_deskphones_public_enabled = None
        self._keep_voicemail_enabled = None
        self._remove365_licenses = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        if daily_job_time is not None:
            self.daily_job_time = daily_job_time
        if periodic_job_minutes is not None:
            self.periodic_job_minutes = periodic_job_minutes
        if make_deskphones_public_enabled is not None:
            self.make_deskphones_public_enabled = make_deskphones_public_enabled
        if keep_voicemail_enabled is not None:
            self.keep_voicemail_enabled = keep_voicemail_enabled
        if remove365_licenses is not None:
            self.remove365_licenses = remove365_licenses

    @property
    def id(self):
        """Gets the id of this DeprovisioningScheduleJson.  # noqa: E501


        :return: The id of this DeprovisioningScheduleJson.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DeprovisioningScheduleJson.


        :param id: The id of this DeprovisioningScheduleJson.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DeprovisioningScheduleJson.  # noqa: E501


        :return: The name of this DeprovisioningScheduleJson.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DeprovisioningScheduleJson.


        :param name: The name of this DeprovisioningScheduleJson.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def daily_job_time(self):
        """Gets the daily_job_time of this DeprovisioningScheduleJson.  # noqa: E501


        :return: The daily_job_time of this DeprovisioningScheduleJson.  # noqa: E501
        :rtype: str
        """
        return self._daily_job_time

    @daily_job_time.setter
    def daily_job_time(self, daily_job_time):
        """Sets the daily_job_time of this DeprovisioningScheduleJson.


        :param daily_job_time: The daily_job_time of this DeprovisioningScheduleJson.  # noqa: E501
        :type: str
        """

        self._daily_job_time = daily_job_time

    @property
    def periodic_job_minutes(self):
        """Gets the periodic_job_minutes of this DeprovisioningScheduleJson.  # noqa: E501


        :return: The periodic_job_minutes of this DeprovisioningScheduleJson.  # noqa: E501
        :rtype: int
        """
        return self._periodic_job_minutes

    @periodic_job_minutes.setter
    def periodic_job_minutes(self, periodic_job_minutes):
        """Sets the periodic_job_minutes of this DeprovisioningScheduleJson.


        :param periodic_job_minutes: The periodic_job_minutes of this DeprovisioningScheduleJson.  # noqa: E501
        :type: int
        """

        self._periodic_job_minutes = periodic_job_minutes

    @property
    def make_deskphones_public_enabled(self):
        """Gets the make_deskphones_public_enabled of this DeprovisioningScheduleJson.  # noqa: E501


        :return: The make_deskphones_public_enabled of this DeprovisioningScheduleJson.  # noqa: E501
        :rtype: bool
        """
        return self._make_deskphones_public_enabled

    @make_deskphones_public_enabled.setter
    def make_deskphones_public_enabled(self, make_deskphones_public_enabled):
        """Sets the make_deskphones_public_enabled of this DeprovisioningScheduleJson.


        :param make_deskphones_public_enabled: The make_deskphones_public_enabled of this DeprovisioningScheduleJson.  # noqa: E501
        :type: bool
        """

        self._make_deskphones_public_enabled = make_deskphones_public_enabled

    @property
    def keep_voicemail_enabled(self):
        """Gets the keep_voicemail_enabled of this DeprovisioningScheduleJson.  # noqa: E501


        :return: The keep_voicemail_enabled of this DeprovisioningScheduleJson.  # noqa: E501
        :rtype: bool
        """
        return self._keep_voicemail_enabled

    @keep_voicemail_enabled.setter
    def keep_voicemail_enabled(self, keep_voicemail_enabled):
        """Sets the keep_voicemail_enabled of this DeprovisioningScheduleJson.


        :param keep_voicemail_enabled: The keep_voicemail_enabled of this DeprovisioningScheduleJson.  # noqa: E501
        :type: bool
        """

        self._keep_voicemail_enabled = keep_voicemail_enabled

    @property
    def remove365_licenses(self):
        """Gets the remove365_licenses of this DeprovisioningScheduleJson.  # noqa: E501


        :return: The remove365_licenses of this DeprovisioningScheduleJson.  # noqa: E501
        :rtype: bool
        """
        return self._remove365_licenses

    @remove365_licenses.setter
    def remove365_licenses(self, remove365_licenses):
        """Sets the remove365_licenses of this DeprovisioningScheduleJson.


        :param remove365_licenses: The remove365_licenses of this DeprovisioningScheduleJson.  # noqa: E501
        :type: bool
        """

        self._remove365_licenses = remove365_licenses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeprovisioningScheduleJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeprovisioningScheduleJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
