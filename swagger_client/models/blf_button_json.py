# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BlfButtonJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'dn': 'DirectoryNumberRefJson',
        'destination': 'str',
        'label': 'str',
        'call_pickup': 'bool'
    }

    attribute_map = {
        'type': 'type',
        'dn': 'dn',
        'destination': 'destination',
        'label': 'label',
        'call_pickup': 'callPickup'
    }

    def __init__(self, type=None, dn=None, destination=None, label=None, call_pickup=None):  # noqa: E501
        """BlfButtonJson - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._dn = None
        self._destination = None
        self._label = None
        self._call_pickup = None
        self.discriminator = None
        self.type = type
        if dn is not None:
            self.dn = dn
        self.destination = destination
        self.label = label
        self.call_pickup = call_pickup

    @property
    def type(self):
        """Gets the type of this BlfButtonJson.  # noqa: E501


        :return: The type of this BlfButtonJson.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BlfButtonJson.


        :param type: The type of this BlfButtonJson.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def dn(self):
        """Gets the dn of this BlfButtonJson.  # noqa: E501


        :return: The dn of this BlfButtonJson.  # noqa: E501
        :rtype: DirectoryNumberRefJson
        """
        return self._dn

    @dn.setter
    def dn(self, dn):
        """Sets the dn of this BlfButtonJson.


        :param dn: The dn of this BlfButtonJson.  # noqa: E501
        :type: DirectoryNumberRefJson
        """

        self._dn = dn

    @property
    def destination(self):
        """Gets the destination of this BlfButtonJson.  # noqa: E501


        :return: The destination of this BlfButtonJson.  # noqa: E501
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this BlfButtonJson.


        :param destination: The destination of this BlfButtonJson.  # noqa: E501
        :type: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")  # noqa: E501

        self._destination = destination

    @property
    def label(self):
        """Gets the label of this BlfButtonJson.  # noqa: E501


        :return: The label of this BlfButtonJson.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this BlfButtonJson.


        :param label: The label of this BlfButtonJson.  # noqa: E501
        :type: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")  # noqa: E501

        self._label = label

    @property
    def call_pickup(self):
        """Gets the call_pickup of this BlfButtonJson.  # noqa: E501


        :return: The call_pickup of this BlfButtonJson.  # noqa: E501
        :rtype: bool
        """
        return self._call_pickup

    @call_pickup.setter
    def call_pickup(self, call_pickup):
        """Sets the call_pickup of this BlfButtonJson.


        :param call_pickup: The call_pickup of this BlfButtonJson.  # noqa: E501
        :type: bool
        """
        if call_pickup is None:
            raise ValueError("Invalid value for `call_pickup`, must not be `None`")  # noqa: E501

        self._call_pickup = call_pickup

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BlfButtonJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlfButtonJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
