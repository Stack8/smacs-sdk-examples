# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhoneInventoryJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'device_pool': 'str',
        'device_pool_id': 'str',
        'cluster_name': 'str',
        'cluster_id': 'str',
        'total_count': 'int',
        'not_found_count': 'int',
        'registered_count': 'int',
        'unregistered_count': 'int'
    }

    attribute_map = {
        'device_pool': 'devicePool',
        'device_pool_id': 'devicePoolId',
        'cluster_name': 'clusterName',
        'cluster_id': 'clusterId',
        'total_count': 'totalCount',
        'not_found_count': 'notFoundCount',
        'registered_count': 'registeredCount',
        'unregistered_count': 'unregisteredCount'
    }

    def __init__(self, device_pool=None, device_pool_id=None, cluster_name=None, cluster_id=None, total_count=None, not_found_count=None, registered_count=None, unregistered_count=None):  # noqa: E501
        """PhoneInventoryJson - a model defined in Swagger"""  # noqa: E501
        self._device_pool = None
        self._device_pool_id = None
        self._cluster_name = None
        self._cluster_id = None
        self._total_count = None
        self._not_found_count = None
        self._registered_count = None
        self._unregistered_count = None
        self.discriminator = None
        if device_pool is not None:
            self.device_pool = device_pool
        if device_pool_id is not None:
            self.device_pool_id = device_pool_id
        if cluster_name is not None:
            self.cluster_name = cluster_name
        if cluster_id is not None:
            self.cluster_id = cluster_id
        if total_count is not None:
            self.total_count = total_count
        if not_found_count is not None:
            self.not_found_count = not_found_count
        if registered_count is not None:
            self.registered_count = registered_count
        if unregistered_count is not None:
            self.unregistered_count = unregistered_count

    @property
    def device_pool(self):
        """Gets the device_pool of this PhoneInventoryJson.  # noqa: E501


        :return: The device_pool of this PhoneInventoryJson.  # noqa: E501
        :rtype: str
        """
        return self._device_pool

    @device_pool.setter
    def device_pool(self, device_pool):
        """Sets the device_pool of this PhoneInventoryJson.


        :param device_pool: The device_pool of this PhoneInventoryJson.  # noqa: E501
        :type: str
        """

        self._device_pool = device_pool

    @property
    def device_pool_id(self):
        """Gets the device_pool_id of this PhoneInventoryJson.  # noqa: E501


        :return: The device_pool_id of this PhoneInventoryJson.  # noqa: E501
        :rtype: str
        """
        return self._device_pool_id

    @device_pool_id.setter
    def device_pool_id(self, device_pool_id):
        """Sets the device_pool_id of this PhoneInventoryJson.


        :param device_pool_id: The device_pool_id of this PhoneInventoryJson.  # noqa: E501
        :type: str
        """

        self._device_pool_id = device_pool_id

    @property
    def cluster_name(self):
        """Gets the cluster_name of this PhoneInventoryJson.  # noqa: E501


        :return: The cluster_name of this PhoneInventoryJson.  # noqa: E501
        :rtype: str
        """
        return self._cluster_name

    @cluster_name.setter
    def cluster_name(self, cluster_name):
        """Sets the cluster_name of this PhoneInventoryJson.


        :param cluster_name: The cluster_name of this PhoneInventoryJson.  # noqa: E501
        :type: str
        """

        self._cluster_name = cluster_name

    @property
    def cluster_id(self):
        """Gets the cluster_id of this PhoneInventoryJson.  # noqa: E501


        :return: The cluster_id of this PhoneInventoryJson.  # noqa: E501
        :rtype: str
        """
        return self._cluster_id

    @cluster_id.setter
    def cluster_id(self, cluster_id):
        """Sets the cluster_id of this PhoneInventoryJson.


        :param cluster_id: The cluster_id of this PhoneInventoryJson.  # noqa: E501
        :type: str
        """

        self._cluster_id = cluster_id

    @property
    def total_count(self):
        """Gets the total_count of this PhoneInventoryJson.  # noqa: E501


        :return: The total_count of this PhoneInventoryJson.  # noqa: E501
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this PhoneInventoryJson.


        :param total_count: The total_count of this PhoneInventoryJson.  # noqa: E501
        :type: int
        """

        self._total_count = total_count

    @property
    def not_found_count(self):
        """Gets the not_found_count of this PhoneInventoryJson.  # noqa: E501


        :return: The not_found_count of this PhoneInventoryJson.  # noqa: E501
        :rtype: int
        """
        return self._not_found_count

    @not_found_count.setter
    def not_found_count(self, not_found_count):
        """Sets the not_found_count of this PhoneInventoryJson.


        :param not_found_count: The not_found_count of this PhoneInventoryJson.  # noqa: E501
        :type: int
        """

        self._not_found_count = not_found_count

    @property
    def registered_count(self):
        """Gets the registered_count of this PhoneInventoryJson.  # noqa: E501


        :return: The registered_count of this PhoneInventoryJson.  # noqa: E501
        :rtype: int
        """
        return self._registered_count

    @registered_count.setter
    def registered_count(self, registered_count):
        """Sets the registered_count of this PhoneInventoryJson.


        :param registered_count: The registered_count of this PhoneInventoryJson.  # noqa: E501
        :type: int
        """

        self._registered_count = registered_count

    @property
    def unregistered_count(self):
        """Gets the unregistered_count of this PhoneInventoryJson.  # noqa: E501


        :return: The unregistered_count of this PhoneInventoryJson.  # noqa: E501
        :rtype: int
        """
        return self._unregistered_count

    @unregistered_count.setter
    def unregistered_count(self, unregistered_count):
        """Sets the unregistered_count of this PhoneInventoryJson.


        :param unregistered_count: The unregistered_count of this PhoneInventoryJson.  # noqa: E501
        :type: int
        """

        self._unregistered_count = unregistered_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneInventoryJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneInventoryJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
