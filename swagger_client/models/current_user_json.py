# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CurrentUserJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user_id': 'str',
        'role': 'str',
        'privileges': 'list[str]',
        'sso_authenticated': 'bool'
    }

    attribute_map = {
        'user_id': 'userId',
        'role': 'role',
        'privileges': 'privileges',
        'sso_authenticated': 'ssoAuthenticated'
    }

    def __init__(self, user_id=None, role=None, privileges=None, sso_authenticated=None):  # noqa: E501
        """CurrentUserJson - a model defined in Swagger"""  # noqa: E501
        self._user_id = None
        self._role = None
        self._privileges = None
        self._sso_authenticated = None
        self.discriminator = None
        if user_id is not None:
            self.user_id = user_id
        if role is not None:
            self.role = role
        if privileges is not None:
            self.privileges = privileges
        if sso_authenticated is not None:
            self.sso_authenticated = sso_authenticated

    @property
    def user_id(self):
        """Gets the user_id of this CurrentUserJson.  # noqa: E501


        :return: The user_id of this CurrentUserJson.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this CurrentUserJson.


        :param user_id: The user_id of this CurrentUserJson.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def role(self):
        """Gets the role of this CurrentUserJson.  # noqa: E501


        :return: The role of this CurrentUserJson.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this CurrentUserJson.


        :param role: The role of this CurrentUserJson.  # noqa: E501
        :type: str
        """

        self._role = role

    @property
    def privileges(self):
        """Gets the privileges of this CurrentUserJson.  # noqa: E501


        :return: The privileges of this CurrentUserJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._privileges

    @privileges.setter
    def privileges(self, privileges):
        """Sets the privileges of this CurrentUserJson.


        :param privileges: The privileges of this CurrentUserJson.  # noqa: E501
        :type: list[str]
        """

        self._privileges = privileges

    @property
    def sso_authenticated(self):
        """Gets the sso_authenticated of this CurrentUserJson.  # noqa: E501


        :return: The sso_authenticated of this CurrentUserJson.  # noqa: E501
        :rtype: bool
        """
        return self._sso_authenticated

    @sso_authenticated.setter
    def sso_authenticated(self, sso_authenticated):
        """Sets the sso_authenticated of this CurrentUserJson.


        :param sso_authenticated: The sso_authenticated of this CurrentUserJson.  # noqa: E501
        :type: bool
        """

        self._sso_authenticated = sso_authenticated

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CurrentUserJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CurrentUserJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
