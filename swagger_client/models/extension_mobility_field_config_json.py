# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExtensionMobilityFieldConfigJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'TextFieldConfigJson',
        'description': 'TextFieldConfigJson',
        'preferred_protocol': 'str',
        'phone_services': 'MultiSelectFieldConfigJsonPhoneServiceSubscriptionJson',
        'softkey_template': 'SelectFieldConfigJson',
        'phone_model': 'SelectFieldConfigJson',
        'user_locale': 'SelectFieldConfigJson',
        'cross_cluster_css': 'SelectFieldConfigJson',
        'privacy': 'SelectFieldConfigJson',
        'feature_control_policy': 'SelectFieldConfigJson',
        'user_moh_audio_source': 'SelectFieldConfigJson',
        'always_use_prime_line': 'SelectFieldConfigJson',
        'always_use_prime_line_for_voice_message': 'SelectFieldConfigJson',
        'associated_end_users': 'CustomMultiSelectEndUserRefFieldConfigJson',
        'associated_end_users_cti': 'CustomMultiSelectEndUserRefFieldConfigJson',
        'associated_app_users_cti': 'CustomMultiSelectAppUserRefFieldConfigJson'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'preferred_protocol': 'preferredProtocol',
        'phone_services': 'phoneServices',
        'softkey_template': 'softkeyTemplate',
        'phone_model': 'phoneModel',
        'user_locale': 'userLocale',
        'cross_cluster_css': 'crossClusterCss',
        'privacy': 'privacy',
        'feature_control_policy': 'featureControlPolicy',
        'user_moh_audio_source': 'userMohAudioSource',
        'always_use_prime_line': 'alwaysUsePrimeLine',
        'always_use_prime_line_for_voice_message': 'alwaysUsePrimeLineForVoiceMessage',
        'associated_end_users': 'associatedEndUsers',
        'associated_end_users_cti': 'associatedEndUsersCti',
        'associated_app_users_cti': 'associatedAppUsersCti'
    }

    def __init__(self, name=None, description=None, preferred_protocol=None, phone_services=None, softkey_template=None, phone_model=None, user_locale=None, cross_cluster_css=None, privacy=None, feature_control_policy=None, user_moh_audio_source=None, always_use_prime_line=None, always_use_prime_line_for_voice_message=None, associated_end_users=None, associated_end_users_cti=None, associated_app_users_cti=None):  # noqa: E501
        """ExtensionMobilityFieldConfigJson - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._description = None
        self._preferred_protocol = None
        self._phone_services = None
        self._softkey_template = None
        self._phone_model = None
        self._user_locale = None
        self._cross_cluster_css = None
        self._privacy = None
        self._feature_control_policy = None
        self._user_moh_audio_source = None
        self._always_use_prime_line = None
        self._always_use_prime_line_for_voice_message = None
        self._associated_end_users = None
        self._associated_end_users_cti = None
        self._associated_app_users_cti = None
        self.discriminator = None
        self.name = name
        self.description = description
        self.preferred_protocol = preferred_protocol
        self.phone_services = phone_services
        self.softkey_template = softkey_template
        self.phone_model = phone_model
        self.user_locale = user_locale
        self.cross_cluster_css = cross_cluster_css
        self.privacy = privacy
        self.feature_control_policy = feature_control_policy
        self.user_moh_audio_source = user_moh_audio_source
        self.always_use_prime_line = always_use_prime_line
        self.always_use_prime_line_for_voice_message = always_use_prime_line_for_voice_message
        self.associated_end_users = associated_end_users
        self.associated_end_users_cti = associated_end_users_cti
        self.associated_app_users_cti = associated_app_users_cti

    @property
    def name(self):
        """Gets the name of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The name of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: TextFieldConfigJson
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExtensionMobilityFieldConfigJson.


        :param name: The name of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: TextFieldConfigJson
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The description of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: TextFieldConfigJson
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExtensionMobilityFieldConfigJson.


        :param description: The description of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: TextFieldConfigJson
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def preferred_protocol(self):
        """Gets the preferred_protocol of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The preferred_protocol of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: str
        """
        return self._preferred_protocol

    @preferred_protocol.setter
    def preferred_protocol(self, preferred_protocol):
        """Sets the preferred_protocol of this ExtensionMobilityFieldConfigJson.


        :param preferred_protocol: The preferred_protocol of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: str
        """
        if preferred_protocol is None:
            raise ValueError("Invalid value for `preferred_protocol`, must not be `None`")  # noqa: E501
        allowed_values = ["SCCP", "SIP", "NONE"]  # noqa: E501
        if preferred_protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `preferred_protocol` ({0}), must be one of {1}"  # noqa: E501
                .format(preferred_protocol, allowed_values)
            )

        self._preferred_protocol = preferred_protocol

    @property
    def phone_services(self):
        """Gets the phone_services of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The phone_services of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: MultiSelectFieldConfigJsonPhoneServiceSubscriptionJson
        """
        return self._phone_services

    @phone_services.setter
    def phone_services(self, phone_services):
        """Sets the phone_services of this ExtensionMobilityFieldConfigJson.


        :param phone_services: The phone_services of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: MultiSelectFieldConfigJsonPhoneServiceSubscriptionJson
        """
        if phone_services is None:
            raise ValueError("Invalid value for `phone_services`, must not be `None`")  # noqa: E501

        self._phone_services = phone_services

    @property
    def softkey_template(self):
        """Gets the softkey_template of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The softkey_template of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: SelectFieldConfigJson
        """
        return self._softkey_template

    @softkey_template.setter
    def softkey_template(self, softkey_template):
        """Sets the softkey_template of this ExtensionMobilityFieldConfigJson.


        :param softkey_template: The softkey_template of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: SelectFieldConfigJson
        """
        if softkey_template is None:
            raise ValueError("Invalid value for `softkey_template`, must not be `None`")  # noqa: E501

        self._softkey_template = softkey_template

    @property
    def phone_model(self):
        """Gets the phone_model of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The phone_model of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: SelectFieldConfigJson
        """
        return self._phone_model

    @phone_model.setter
    def phone_model(self, phone_model):
        """Sets the phone_model of this ExtensionMobilityFieldConfigJson.


        :param phone_model: The phone_model of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: SelectFieldConfigJson
        """
        if phone_model is None:
            raise ValueError("Invalid value for `phone_model`, must not be `None`")  # noqa: E501

        self._phone_model = phone_model

    @property
    def user_locale(self):
        """Gets the user_locale of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The user_locale of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: SelectFieldConfigJson
        """
        return self._user_locale

    @user_locale.setter
    def user_locale(self, user_locale):
        """Sets the user_locale of this ExtensionMobilityFieldConfigJson.


        :param user_locale: The user_locale of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: SelectFieldConfigJson
        """
        if user_locale is None:
            raise ValueError("Invalid value for `user_locale`, must not be `None`")  # noqa: E501

        self._user_locale = user_locale

    @property
    def cross_cluster_css(self):
        """Gets the cross_cluster_css of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The cross_cluster_css of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: SelectFieldConfigJson
        """
        return self._cross_cluster_css

    @cross_cluster_css.setter
    def cross_cluster_css(self, cross_cluster_css):
        """Sets the cross_cluster_css of this ExtensionMobilityFieldConfigJson.


        :param cross_cluster_css: The cross_cluster_css of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: SelectFieldConfigJson
        """
        if cross_cluster_css is None:
            raise ValueError("Invalid value for `cross_cluster_css`, must not be `None`")  # noqa: E501

        self._cross_cluster_css = cross_cluster_css

    @property
    def privacy(self):
        """Gets the privacy of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The privacy of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: SelectFieldConfigJson
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this ExtensionMobilityFieldConfigJson.


        :param privacy: The privacy of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: SelectFieldConfigJson
        """
        if privacy is None:
            raise ValueError("Invalid value for `privacy`, must not be `None`")  # noqa: E501

        self._privacy = privacy

    @property
    def feature_control_policy(self):
        """Gets the feature_control_policy of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The feature_control_policy of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: SelectFieldConfigJson
        """
        return self._feature_control_policy

    @feature_control_policy.setter
    def feature_control_policy(self, feature_control_policy):
        """Sets the feature_control_policy of this ExtensionMobilityFieldConfigJson.


        :param feature_control_policy: The feature_control_policy of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: SelectFieldConfigJson
        """
        if feature_control_policy is None:
            raise ValueError("Invalid value for `feature_control_policy`, must not be `None`")  # noqa: E501

        self._feature_control_policy = feature_control_policy

    @property
    def user_moh_audio_source(self):
        """Gets the user_moh_audio_source of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The user_moh_audio_source of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: SelectFieldConfigJson
        """
        return self._user_moh_audio_source

    @user_moh_audio_source.setter
    def user_moh_audio_source(self, user_moh_audio_source):
        """Sets the user_moh_audio_source of this ExtensionMobilityFieldConfigJson.


        :param user_moh_audio_source: The user_moh_audio_source of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: SelectFieldConfigJson
        """
        if user_moh_audio_source is None:
            raise ValueError("Invalid value for `user_moh_audio_source`, must not be `None`")  # noqa: E501

        self._user_moh_audio_source = user_moh_audio_source

    @property
    def always_use_prime_line(self):
        """Gets the always_use_prime_line of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The always_use_prime_line of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: SelectFieldConfigJson
        """
        return self._always_use_prime_line

    @always_use_prime_line.setter
    def always_use_prime_line(self, always_use_prime_line):
        """Sets the always_use_prime_line of this ExtensionMobilityFieldConfigJson.


        :param always_use_prime_line: The always_use_prime_line of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: SelectFieldConfigJson
        """
        if always_use_prime_line is None:
            raise ValueError("Invalid value for `always_use_prime_line`, must not be `None`")  # noqa: E501

        self._always_use_prime_line = always_use_prime_line

    @property
    def always_use_prime_line_for_voice_message(self):
        """Gets the always_use_prime_line_for_voice_message of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The always_use_prime_line_for_voice_message of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: SelectFieldConfigJson
        """
        return self._always_use_prime_line_for_voice_message

    @always_use_prime_line_for_voice_message.setter
    def always_use_prime_line_for_voice_message(self, always_use_prime_line_for_voice_message):
        """Sets the always_use_prime_line_for_voice_message of this ExtensionMobilityFieldConfigJson.


        :param always_use_prime_line_for_voice_message: The always_use_prime_line_for_voice_message of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: SelectFieldConfigJson
        """
        if always_use_prime_line_for_voice_message is None:
            raise ValueError("Invalid value for `always_use_prime_line_for_voice_message`, must not be `None`")  # noqa: E501

        self._always_use_prime_line_for_voice_message = always_use_prime_line_for_voice_message

    @property
    def associated_end_users(self):
        """Gets the associated_end_users of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The associated_end_users of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: CustomMultiSelectEndUserRefFieldConfigJson
        """
        return self._associated_end_users

    @associated_end_users.setter
    def associated_end_users(self, associated_end_users):
        """Sets the associated_end_users of this ExtensionMobilityFieldConfigJson.


        :param associated_end_users: The associated_end_users of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: CustomMultiSelectEndUserRefFieldConfigJson
        """
        if associated_end_users is None:
            raise ValueError("Invalid value for `associated_end_users`, must not be `None`")  # noqa: E501

        self._associated_end_users = associated_end_users

    @property
    def associated_end_users_cti(self):
        """Gets the associated_end_users_cti of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The associated_end_users_cti of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: CustomMultiSelectEndUserRefFieldConfigJson
        """
        return self._associated_end_users_cti

    @associated_end_users_cti.setter
    def associated_end_users_cti(self, associated_end_users_cti):
        """Sets the associated_end_users_cti of this ExtensionMobilityFieldConfigJson.


        :param associated_end_users_cti: The associated_end_users_cti of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: CustomMultiSelectEndUserRefFieldConfigJson
        """
        if associated_end_users_cti is None:
            raise ValueError("Invalid value for `associated_end_users_cti`, must not be `None`")  # noqa: E501

        self._associated_end_users_cti = associated_end_users_cti

    @property
    def associated_app_users_cti(self):
        """Gets the associated_app_users_cti of this ExtensionMobilityFieldConfigJson.  # noqa: E501


        :return: The associated_app_users_cti of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :rtype: CustomMultiSelectAppUserRefFieldConfigJson
        """
        return self._associated_app_users_cti

    @associated_app_users_cti.setter
    def associated_app_users_cti(self, associated_app_users_cti):
        """Sets the associated_app_users_cti of this ExtensionMobilityFieldConfigJson.


        :param associated_app_users_cti: The associated_app_users_cti of this ExtensionMobilityFieldConfigJson.  # noqa: E501
        :type: CustomMultiSelectAppUserRefFieldConfigJson
        """
        if associated_app_users_cti is None:
            raise ValueError("Invalid value for `associated_app_users_cti`, must not be `None`")  # noqa: E501

        self._associated_app_users_cti = associated_app_users_cti

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtensionMobilityFieldConfigJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtensionMobilityFieldConfigJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
