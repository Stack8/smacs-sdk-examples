# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ExtensionMobilityJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'description': 'str',
        'model': 'str',
        'protocol': 'str',
        'user_moh_source_name': 'str',
        'always_use_prime_line': 'str',
        'always_use_prime_line_for_voice_message': 'str',
        'softkey_template': 'str',
        'phone_button_template': 'PhoneButtonTemplateRefJson',
        'privacy': 'str',
        'feature_control_policy_name': 'str',
        'cross_cluster_css': 'str',
        'user_locale': 'str',
        'buttons': 'list[ButtonJson]',
        'cti_associated_app_users': 'list[AppUserRefJson]',
        'associated_end_users': 'list[EndUserRefJson]',
        'cti_associated_end_users': 'list[EndUserRefJson]',
        'service_subscriptions': 'list[PhoneServiceSubscriptionJson]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'description': 'description',
        'model': 'model',
        'protocol': 'protocol',
        'user_moh_source_name': 'userMohSourceName',
        'always_use_prime_line': 'alwaysUsePrimeLine',
        'always_use_prime_line_for_voice_message': 'alwaysUsePrimeLineForVoiceMessage',
        'softkey_template': 'softkeyTemplate',
        'phone_button_template': 'phoneButtonTemplate',
        'privacy': 'privacy',
        'feature_control_policy_name': 'featureControlPolicyName',
        'cross_cluster_css': 'crossClusterCss',
        'user_locale': 'userLocale',
        'buttons': 'buttons',
        'cti_associated_app_users': 'ctiAssociatedAppUsers',
        'associated_end_users': 'associatedEndUsers',
        'cti_associated_end_users': 'ctiAssociatedEndUsers',
        'service_subscriptions': 'serviceSubscriptions'
    }

    def __init__(self, id=None, name=None, description=None, model=None, protocol=None, user_moh_source_name=None, always_use_prime_line=None, always_use_prime_line_for_voice_message=None, softkey_template=None, phone_button_template=None, privacy=None, feature_control_policy_name=None, cross_cluster_css=None, user_locale=None, buttons=None, cti_associated_app_users=None, associated_end_users=None, cti_associated_end_users=None, service_subscriptions=None):  # noqa: E501
        """ExtensionMobilityJson - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._name = None
        self._description = None
        self._model = None
        self._protocol = None
        self._user_moh_source_name = None
        self._always_use_prime_line = None
        self._always_use_prime_line_for_voice_message = None
        self._softkey_template = None
        self._phone_button_template = None
        self._privacy = None
        self._feature_control_policy_name = None
        self._cross_cluster_css = None
        self._user_locale = None
        self._buttons = None
        self._cti_associated_app_users = None
        self._associated_end_users = None
        self._cti_associated_end_users = None
        self._service_subscriptions = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.name = name
        self.description = description
        self.model = model
        if protocol is not None:
            self.protocol = protocol
        self.user_moh_source_name = user_moh_source_name
        self.always_use_prime_line = always_use_prime_line
        self.always_use_prime_line_for_voice_message = always_use_prime_line_for_voice_message
        self.softkey_template = softkey_template
        self.phone_button_template = phone_button_template
        self.privacy = privacy
        self.feature_control_policy_name = feature_control_policy_name
        self.cross_cluster_css = cross_cluster_css
        self.user_locale = user_locale
        self.buttons = buttons
        self.cti_associated_app_users = cti_associated_app_users
        self.associated_end_users = associated_end_users
        self.cti_associated_end_users = cti_associated_end_users
        self.service_subscriptions = service_subscriptions

    @property
    def id(self):
        """Gets the id of this ExtensionMobilityJson.  # noqa: E501


        :return: The id of this ExtensionMobilityJson.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ExtensionMobilityJson.


        :param id: The id of this ExtensionMobilityJson.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this ExtensionMobilityJson.  # noqa: E501


        :return: The name of this ExtensionMobilityJson.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ExtensionMobilityJson.


        :param name: The name of this ExtensionMobilityJson.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this ExtensionMobilityJson.  # noqa: E501


        :return: The description of this ExtensionMobilityJson.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ExtensionMobilityJson.


        :param description: The description of this ExtensionMobilityJson.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def model(self):
        """Gets the model of this ExtensionMobilityJson.  # noqa: E501


        :return: The model of this ExtensionMobilityJson.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this ExtensionMobilityJson.


        :param model: The model of this ExtensionMobilityJson.  # noqa: E501
        :type: str
        """
        if model is None:
            raise ValueError("Invalid value for `model`, must not be `None`")  # noqa: E501

        self._model = model

    @property
    def protocol(self):
        """Gets the protocol of this ExtensionMobilityJson.  # noqa: E501


        :return: The protocol of this ExtensionMobilityJson.  # noqa: E501
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol):
        """Sets the protocol of this ExtensionMobilityJson.


        :param protocol: The protocol of this ExtensionMobilityJson.  # noqa: E501
        :type: str
        """

        self._protocol = protocol

    @property
    def user_moh_source_name(self):
        """Gets the user_moh_source_name of this ExtensionMobilityJson.  # noqa: E501


        :return: The user_moh_source_name of this ExtensionMobilityJson.  # noqa: E501
        :rtype: str
        """
        return self._user_moh_source_name

    @user_moh_source_name.setter
    def user_moh_source_name(self, user_moh_source_name):
        """Sets the user_moh_source_name of this ExtensionMobilityJson.


        :param user_moh_source_name: The user_moh_source_name of this ExtensionMobilityJson.  # noqa: E501
        :type: str
        """
        if user_moh_source_name is None:
            raise ValueError("Invalid value for `user_moh_source_name`, must not be `None`")  # noqa: E501

        self._user_moh_source_name = user_moh_source_name

    @property
    def always_use_prime_line(self):
        """Gets the always_use_prime_line of this ExtensionMobilityJson.  # noqa: E501


        :return: The always_use_prime_line of this ExtensionMobilityJson.  # noqa: E501
        :rtype: str
        """
        return self._always_use_prime_line

    @always_use_prime_line.setter
    def always_use_prime_line(self, always_use_prime_line):
        """Sets the always_use_prime_line of this ExtensionMobilityJson.


        :param always_use_prime_line: The always_use_prime_line of this ExtensionMobilityJson.  # noqa: E501
        :type: str
        """
        if always_use_prime_line is None:
            raise ValueError("Invalid value for `always_use_prime_line`, must not be `None`")  # noqa: E501

        self._always_use_prime_line = always_use_prime_line

    @property
    def always_use_prime_line_for_voice_message(self):
        """Gets the always_use_prime_line_for_voice_message of this ExtensionMobilityJson.  # noqa: E501


        :return: The always_use_prime_line_for_voice_message of this ExtensionMobilityJson.  # noqa: E501
        :rtype: str
        """
        return self._always_use_prime_line_for_voice_message

    @always_use_prime_line_for_voice_message.setter
    def always_use_prime_line_for_voice_message(self, always_use_prime_line_for_voice_message):
        """Sets the always_use_prime_line_for_voice_message of this ExtensionMobilityJson.


        :param always_use_prime_line_for_voice_message: The always_use_prime_line_for_voice_message of this ExtensionMobilityJson.  # noqa: E501
        :type: str
        """
        if always_use_prime_line_for_voice_message is None:
            raise ValueError("Invalid value for `always_use_prime_line_for_voice_message`, must not be `None`")  # noqa: E501

        self._always_use_prime_line_for_voice_message = always_use_prime_line_for_voice_message

    @property
    def softkey_template(self):
        """Gets the softkey_template of this ExtensionMobilityJson.  # noqa: E501


        :return: The softkey_template of this ExtensionMobilityJson.  # noqa: E501
        :rtype: str
        """
        return self._softkey_template

    @softkey_template.setter
    def softkey_template(self, softkey_template):
        """Sets the softkey_template of this ExtensionMobilityJson.


        :param softkey_template: The softkey_template of this ExtensionMobilityJson.  # noqa: E501
        :type: str
        """
        if softkey_template is None:
            raise ValueError("Invalid value for `softkey_template`, must not be `None`")  # noqa: E501

        self._softkey_template = softkey_template

    @property
    def phone_button_template(self):
        """Gets the phone_button_template of this ExtensionMobilityJson.  # noqa: E501


        :return: The phone_button_template of this ExtensionMobilityJson.  # noqa: E501
        :rtype: PhoneButtonTemplateRefJson
        """
        return self._phone_button_template

    @phone_button_template.setter
    def phone_button_template(self, phone_button_template):
        """Sets the phone_button_template of this ExtensionMobilityJson.


        :param phone_button_template: The phone_button_template of this ExtensionMobilityJson.  # noqa: E501
        :type: PhoneButtonTemplateRefJson
        """
        if phone_button_template is None:
            raise ValueError("Invalid value for `phone_button_template`, must not be `None`")  # noqa: E501

        self._phone_button_template = phone_button_template

    @property
    def privacy(self):
        """Gets the privacy of this ExtensionMobilityJson.  # noqa: E501


        :return: The privacy of this ExtensionMobilityJson.  # noqa: E501
        :rtype: str
        """
        return self._privacy

    @privacy.setter
    def privacy(self, privacy):
        """Sets the privacy of this ExtensionMobilityJson.


        :param privacy: The privacy of this ExtensionMobilityJson.  # noqa: E501
        :type: str
        """
        if privacy is None:
            raise ValueError("Invalid value for `privacy`, must not be `None`")  # noqa: E501

        self._privacy = privacy

    @property
    def feature_control_policy_name(self):
        """Gets the feature_control_policy_name of this ExtensionMobilityJson.  # noqa: E501


        :return: The feature_control_policy_name of this ExtensionMobilityJson.  # noqa: E501
        :rtype: str
        """
        return self._feature_control_policy_name

    @feature_control_policy_name.setter
    def feature_control_policy_name(self, feature_control_policy_name):
        """Sets the feature_control_policy_name of this ExtensionMobilityJson.


        :param feature_control_policy_name: The feature_control_policy_name of this ExtensionMobilityJson.  # noqa: E501
        :type: str
        """
        if feature_control_policy_name is None:
            raise ValueError("Invalid value for `feature_control_policy_name`, must not be `None`")  # noqa: E501

        self._feature_control_policy_name = feature_control_policy_name

    @property
    def cross_cluster_css(self):
        """Gets the cross_cluster_css of this ExtensionMobilityJson.  # noqa: E501


        :return: The cross_cluster_css of this ExtensionMobilityJson.  # noqa: E501
        :rtype: str
        """
        return self._cross_cluster_css

    @cross_cluster_css.setter
    def cross_cluster_css(self, cross_cluster_css):
        """Sets the cross_cluster_css of this ExtensionMobilityJson.


        :param cross_cluster_css: The cross_cluster_css of this ExtensionMobilityJson.  # noqa: E501
        :type: str
        """
        if cross_cluster_css is None:
            raise ValueError("Invalid value for `cross_cluster_css`, must not be `None`")  # noqa: E501

        self._cross_cluster_css = cross_cluster_css

    @property
    def user_locale(self):
        """Gets the user_locale of this ExtensionMobilityJson.  # noqa: E501


        :return: The user_locale of this ExtensionMobilityJson.  # noqa: E501
        :rtype: str
        """
        return self._user_locale

    @user_locale.setter
    def user_locale(self, user_locale):
        """Sets the user_locale of this ExtensionMobilityJson.


        :param user_locale: The user_locale of this ExtensionMobilityJson.  # noqa: E501
        :type: str
        """
        if user_locale is None:
            raise ValueError("Invalid value for `user_locale`, must not be `None`")  # noqa: E501

        self._user_locale = user_locale

    @property
    def buttons(self):
        """Gets the buttons of this ExtensionMobilityJson.  # noqa: E501


        :return: The buttons of this ExtensionMobilityJson.  # noqa: E501
        :rtype: list[ButtonJson]
        """
        return self._buttons

    @buttons.setter
    def buttons(self, buttons):
        """Sets the buttons of this ExtensionMobilityJson.


        :param buttons: The buttons of this ExtensionMobilityJson.  # noqa: E501
        :type: list[ButtonJson]
        """
        if buttons is None:
            raise ValueError("Invalid value for `buttons`, must not be `None`")  # noqa: E501

        self._buttons = buttons

    @property
    def cti_associated_app_users(self):
        """Gets the cti_associated_app_users of this ExtensionMobilityJson.  # noqa: E501


        :return: The cti_associated_app_users of this ExtensionMobilityJson.  # noqa: E501
        :rtype: list[AppUserRefJson]
        """
        return self._cti_associated_app_users

    @cti_associated_app_users.setter
    def cti_associated_app_users(self, cti_associated_app_users):
        """Sets the cti_associated_app_users of this ExtensionMobilityJson.


        :param cti_associated_app_users: The cti_associated_app_users of this ExtensionMobilityJson.  # noqa: E501
        :type: list[AppUserRefJson]
        """
        if cti_associated_app_users is None:
            raise ValueError("Invalid value for `cti_associated_app_users`, must not be `None`")  # noqa: E501

        self._cti_associated_app_users = cti_associated_app_users

    @property
    def associated_end_users(self):
        """Gets the associated_end_users of this ExtensionMobilityJson.  # noqa: E501


        :return: The associated_end_users of this ExtensionMobilityJson.  # noqa: E501
        :rtype: list[EndUserRefJson]
        """
        return self._associated_end_users

    @associated_end_users.setter
    def associated_end_users(self, associated_end_users):
        """Sets the associated_end_users of this ExtensionMobilityJson.


        :param associated_end_users: The associated_end_users of this ExtensionMobilityJson.  # noqa: E501
        :type: list[EndUserRefJson]
        """
        if associated_end_users is None:
            raise ValueError("Invalid value for `associated_end_users`, must not be `None`")  # noqa: E501

        self._associated_end_users = associated_end_users

    @property
    def cti_associated_end_users(self):
        """Gets the cti_associated_end_users of this ExtensionMobilityJson.  # noqa: E501


        :return: The cti_associated_end_users of this ExtensionMobilityJson.  # noqa: E501
        :rtype: list[EndUserRefJson]
        """
        return self._cti_associated_end_users

    @cti_associated_end_users.setter
    def cti_associated_end_users(self, cti_associated_end_users):
        """Sets the cti_associated_end_users of this ExtensionMobilityJson.


        :param cti_associated_end_users: The cti_associated_end_users of this ExtensionMobilityJson.  # noqa: E501
        :type: list[EndUserRefJson]
        """
        if cti_associated_end_users is None:
            raise ValueError("Invalid value for `cti_associated_end_users`, must not be `None`")  # noqa: E501

        self._cti_associated_end_users = cti_associated_end_users

    @property
    def service_subscriptions(self):
        """Gets the service_subscriptions of this ExtensionMobilityJson.  # noqa: E501


        :return: The service_subscriptions of this ExtensionMobilityJson.  # noqa: E501
        :rtype: list[PhoneServiceSubscriptionJson]
        """
        return self._service_subscriptions

    @service_subscriptions.setter
    def service_subscriptions(self, service_subscriptions):
        """Sets the service_subscriptions of this ExtensionMobilityJson.


        :param service_subscriptions: The service_subscriptions of this ExtensionMobilityJson.  # noqa: E501
        :type: list[PhoneServiceSubscriptionJson]
        """
        if service_subscriptions is None:
            raise ValueError("Invalid value for `service_subscriptions`, must not be `None`")  # noqa: E501

        self._service_subscriptions = service_subscriptions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ExtensionMobilityJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ExtensionMobilityJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
