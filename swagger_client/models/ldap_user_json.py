# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LdapUserJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'username': 'str',
        'mail': 'str',
        'site': 'str',
        'extension': 'str',
        'e164_number': 'str',
        'photo_base64': 'str',
        'groups': 'list[str]',
        'user_principal_name': 'str',
        'additional_attributes': 'dict(str, str)'
    }

    attribute_map = {
        'username': 'username',
        'mail': 'mail',
        'site': 'site',
        'extension': 'extension',
        'e164_number': 'e164Number',
        'photo_base64': 'photoBase64',
        'groups': 'groups',
        'user_principal_name': 'userPrincipalName',
        'additional_attributes': 'additionalAttributes'
    }

    def __init__(self, username=None, mail=None, site=None, extension=None, e164_number=None, photo_base64=None, groups=None, user_principal_name=None, additional_attributes=None):  # noqa: E501
        """LdapUserJson - a model defined in Swagger"""  # noqa: E501
        self._username = None
        self._mail = None
        self._site = None
        self._extension = None
        self._e164_number = None
        self._photo_base64 = None
        self._groups = None
        self._user_principal_name = None
        self._additional_attributes = None
        self.discriminator = None
        if username is not None:
            self.username = username
        if mail is not None:
            self.mail = mail
        if site is not None:
            self.site = site
        if extension is not None:
            self.extension = extension
        if e164_number is not None:
            self.e164_number = e164_number
        if photo_base64 is not None:
            self.photo_base64 = photo_base64
        if groups is not None:
            self.groups = groups
        if user_principal_name is not None:
            self.user_principal_name = user_principal_name
        if additional_attributes is not None:
            self.additional_attributes = additional_attributes

    @property
    def username(self):
        """Gets the username of this LdapUserJson.  # noqa: E501


        :return: The username of this LdapUserJson.  # noqa: E501
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this LdapUserJson.


        :param username: The username of this LdapUserJson.  # noqa: E501
        :type: str
        """

        self._username = username

    @property
    def mail(self):
        """Gets the mail of this LdapUserJson.  # noqa: E501


        :return: The mail of this LdapUserJson.  # noqa: E501
        :rtype: str
        """
        return self._mail

    @mail.setter
    def mail(self, mail):
        """Sets the mail of this LdapUserJson.


        :param mail: The mail of this LdapUserJson.  # noqa: E501
        :type: str
        """

        self._mail = mail

    @property
    def site(self):
        """Gets the site of this LdapUserJson.  # noqa: E501


        :return: The site of this LdapUserJson.  # noqa: E501
        :rtype: str
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this LdapUserJson.


        :param site: The site of this LdapUserJson.  # noqa: E501
        :type: str
        """

        self._site = site

    @property
    def extension(self):
        """Gets the extension of this LdapUserJson.  # noqa: E501


        :return: The extension of this LdapUserJson.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this LdapUserJson.


        :param extension: The extension of this LdapUserJson.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def e164_number(self):
        """Gets the e164_number of this LdapUserJson.  # noqa: E501


        :return: The e164_number of this LdapUserJson.  # noqa: E501
        :rtype: str
        """
        return self._e164_number

    @e164_number.setter
    def e164_number(self, e164_number):
        """Sets the e164_number of this LdapUserJson.


        :param e164_number: The e164_number of this LdapUserJson.  # noqa: E501
        :type: str
        """

        self._e164_number = e164_number

    @property
    def photo_base64(self):
        """Gets the photo_base64 of this LdapUserJson.  # noqa: E501


        :return: The photo_base64 of this LdapUserJson.  # noqa: E501
        :rtype: str
        """
        return self._photo_base64

    @photo_base64.setter
    def photo_base64(self, photo_base64):
        """Sets the photo_base64 of this LdapUserJson.


        :param photo_base64: The photo_base64 of this LdapUserJson.  # noqa: E501
        :type: str
        """

        self._photo_base64 = photo_base64

    @property
    def groups(self):
        """Gets the groups of this LdapUserJson.  # noqa: E501


        :return: The groups of this LdapUserJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this LdapUserJson.


        :param groups: The groups of this LdapUserJson.  # noqa: E501
        :type: list[str]
        """

        self._groups = groups

    @property
    def user_principal_name(self):
        """Gets the user_principal_name of this LdapUserJson.  # noqa: E501


        :return: The user_principal_name of this LdapUserJson.  # noqa: E501
        :rtype: str
        """
        return self._user_principal_name

    @user_principal_name.setter
    def user_principal_name(self, user_principal_name):
        """Sets the user_principal_name of this LdapUserJson.


        :param user_principal_name: The user_principal_name of this LdapUserJson.  # noqa: E501
        :type: str
        """

        self._user_principal_name = user_principal_name

    @property
    def additional_attributes(self):
        """Gets the additional_attributes of this LdapUserJson.  # noqa: E501


        :return: The additional_attributes of this LdapUserJson.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._additional_attributes

    @additional_attributes.setter
    def additional_attributes(self, additional_attributes):
        """Sets the additional_attributes of this LdapUserJson.


        :param additional_attributes: The additional_attributes of this LdapUserJson.  # noqa: E501
        :type: dict(str, str)
        """

        self._additional_attributes = additional_attributes

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LdapUserJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapUserJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
