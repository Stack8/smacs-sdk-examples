# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class LdapPermissionGroupJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'administrators_group': 'str',
        'site_based_helpdesk_group': 'str',
        'global_helpdesk_group': 'str',
        'lookup_nested_groups': 'bool'
    }

    attribute_map = {
        'administrators_group': 'administratorsGroup',
        'site_based_helpdesk_group': 'siteBasedHelpdeskGroup',
        'global_helpdesk_group': 'globalHelpdeskGroup',
        'lookup_nested_groups': 'lookupNestedGroups'
    }

    def __init__(self, administrators_group=None, site_based_helpdesk_group=None, global_helpdesk_group=None, lookup_nested_groups=None):  # noqa: E501
        """LdapPermissionGroupJson - a model defined in Swagger"""  # noqa: E501
        self._administrators_group = None
        self._site_based_helpdesk_group = None
        self._global_helpdesk_group = None
        self._lookup_nested_groups = None
        self.discriminator = None
        self.administrators_group = administrators_group
        self.site_based_helpdesk_group = site_based_helpdesk_group
        self.global_helpdesk_group = global_helpdesk_group
        self.lookup_nested_groups = lookup_nested_groups

    @property
    def administrators_group(self):
        """Gets the administrators_group of this LdapPermissionGroupJson.  # noqa: E501


        :return: The administrators_group of this LdapPermissionGroupJson.  # noqa: E501
        :rtype: str
        """
        return self._administrators_group

    @administrators_group.setter
    def administrators_group(self, administrators_group):
        """Sets the administrators_group of this LdapPermissionGroupJson.


        :param administrators_group: The administrators_group of this LdapPermissionGroupJson.  # noqa: E501
        :type: str
        """
        if administrators_group is None:
            raise ValueError("Invalid value for `administrators_group`, must not be `None`")  # noqa: E501

        self._administrators_group = administrators_group

    @property
    def site_based_helpdesk_group(self):
        """Gets the site_based_helpdesk_group of this LdapPermissionGroupJson.  # noqa: E501


        :return: The site_based_helpdesk_group of this LdapPermissionGroupJson.  # noqa: E501
        :rtype: str
        """
        return self._site_based_helpdesk_group

    @site_based_helpdesk_group.setter
    def site_based_helpdesk_group(self, site_based_helpdesk_group):
        """Sets the site_based_helpdesk_group of this LdapPermissionGroupJson.


        :param site_based_helpdesk_group: The site_based_helpdesk_group of this LdapPermissionGroupJson.  # noqa: E501
        :type: str
        """
        if site_based_helpdesk_group is None:
            raise ValueError("Invalid value for `site_based_helpdesk_group`, must not be `None`")  # noqa: E501

        self._site_based_helpdesk_group = site_based_helpdesk_group

    @property
    def global_helpdesk_group(self):
        """Gets the global_helpdesk_group of this LdapPermissionGroupJson.  # noqa: E501


        :return: The global_helpdesk_group of this LdapPermissionGroupJson.  # noqa: E501
        :rtype: str
        """
        return self._global_helpdesk_group

    @global_helpdesk_group.setter
    def global_helpdesk_group(self, global_helpdesk_group):
        """Sets the global_helpdesk_group of this LdapPermissionGroupJson.


        :param global_helpdesk_group: The global_helpdesk_group of this LdapPermissionGroupJson.  # noqa: E501
        :type: str
        """
        if global_helpdesk_group is None:
            raise ValueError("Invalid value for `global_helpdesk_group`, must not be `None`")  # noqa: E501

        self._global_helpdesk_group = global_helpdesk_group

    @property
    def lookup_nested_groups(self):
        """Gets the lookup_nested_groups of this LdapPermissionGroupJson.  # noqa: E501


        :return: The lookup_nested_groups of this LdapPermissionGroupJson.  # noqa: E501
        :rtype: bool
        """
        return self._lookup_nested_groups

    @lookup_nested_groups.setter
    def lookup_nested_groups(self, lookup_nested_groups):
        """Sets the lookup_nested_groups of this LdapPermissionGroupJson.


        :param lookup_nested_groups: The lookup_nested_groups of this LdapPermissionGroupJson.  # noqa: E501
        :type: bool
        """
        if lookup_nested_groups is None:
            raise ValueError("Invalid value for `lookup_nested_groups`, must not be `None`")  # noqa: E501

        self._lookup_nested_groups = lookup_nested_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(LdapPermissionGroupJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, LdapPermissionGroupJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
