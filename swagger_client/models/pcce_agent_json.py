# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PcceAgentJson(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'agent_id': 'str',
        'description': 'str',
        'agent_state_trace': 'bool',
        'user_name': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'password': 'str',
        'login_enabled': 'bool',
        'sso_enabled': 'bool',
        'supervisor': 'bool',
        'department': 'str',
        'boolean_agent_attributes': 'dict(str, bool)',
        'proficiency_agent_attributes': 'dict(str, int)',
        'skill_groups': 'list[str]',
        'agent_desk_settings': 'str',
        'agent_team': 'str',
        'finesse_id': 'str'
    }

    attribute_map = {
        'id': 'id',
        'agent_id': 'agentId',
        'description': 'description',
        'agent_state_trace': 'agentStateTrace',
        'user_name': 'userName',
        'first_name': 'firstName',
        'last_name': 'lastName',
        'password': 'password',
        'login_enabled': 'loginEnabled',
        'sso_enabled': 'ssoEnabled',
        'supervisor': 'supervisor',
        'department': 'department',
        'boolean_agent_attributes': 'booleanAgentAttributes',
        'proficiency_agent_attributes': 'proficiencyAgentAttributes',
        'skill_groups': 'skillGroups',
        'agent_desk_settings': 'agentDeskSettings',
        'agent_team': 'agentTeam',
        'finesse_id': 'finesseId'
    }

    def __init__(self, id=None, agent_id=None, description=None, agent_state_trace=None, user_name=None, first_name=None, last_name=None, password=None, login_enabled=None, sso_enabled=None, supervisor=None, department=None, boolean_agent_attributes=None, proficiency_agent_attributes=None, skill_groups=None, agent_desk_settings=None, agent_team=None, finesse_id=None):  # noqa: E501
        """PcceAgentJson - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._agent_id = None
        self._description = None
        self._agent_state_trace = None
        self._user_name = None
        self._first_name = None
        self._last_name = None
        self._password = None
        self._login_enabled = None
        self._sso_enabled = None
        self._supervisor = None
        self._department = None
        self._boolean_agent_attributes = None
        self._proficiency_agent_attributes = None
        self._skill_groups = None
        self._agent_desk_settings = None
        self._agent_team = None
        self._finesse_id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        self.agent_id = agent_id
        self.description = description
        self.agent_state_trace = agent_state_trace
        self.user_name = user_name
        self.first_name = first_name
        self.last_name = last_name
        self.password = password
        self.login_enabled = login_enabled
        self.sso_enabled = sso_enabled
        self.supervisor = supervisor
        self.department = department
        if boolean_agent_attributes is not None:
            self.boolean_agent_attributes = boolean_agent_attributes
        if proficiency_agent_attributes is not None:
            self.proficiency_agent_attributes = proficiency_agent_attributes
        if skill_groups is not None:
            self.skill_groups = skill_groups
        self.agent_desk_settings = agent_desk_settings
        self.agent_team = agent_team
        self.finesse_id = finesse_id

    @property
    def id(self):
        """Gets the id of this PcceAgentJson.  # noqa: E501


        :return: The id of this PcceAgentJson.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PcceAgentJson.


        :param id: The id of this PcceAgentJson.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def agent_id(self):
        """Gets the agent_id of this PcceAgentJson.  # noqa: E501


        :return: The agent_id of this PcceAgentJson.  # noqa: E501
        :rtype: str
        """
        return self._agent_id

    @agent_id.setter
    def agent_id(self, agent_id):
        """Sets the agent_id of this PcceAgentJson.


        :param agent_id: The agent_id of this PcceAgentJson.  # noqa: E501
        :type: str
        """
        if agent_id is None:
            raise ValueError("Invalid value for `agent_id`, must not be `None`")  # noqa: E501

        self._agent_id = agent_id

    @property
    def description(self):
        """Gets the description of this PcceAgentJson.  # noqa: E501


        :return: The description of this PcceAgentJson.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PcceAgentJson.


        :param description: The description of this PcceAgentJson.  # noqa: E501
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def agent_state_trace(self):
        """Gets the agent_state_trace of this PcceAgentJson.  # noqa: E501


        :return: The agent_state_trace of this PcceAgentJson.  # noqa: E501
        :rtype: bool
        """
        return self._agent_state_trace

    @agent_state_trace.setter
    def agent_state_trace(self, agent_state_trace):
        """Sets the agent_state_trace of this PcceAgentJson.


        :param agent_state_trace: The agent_state_trace of this PcceAgentJson.  # noqa: E501
        :type: bool
        """
        if agent_state_trace is None:
            raise ValueError("Invalid value for `agent_state_trace`, must not be `None`")  # noqa: E501

        self._agent_state_trace = agent_state_trace

    @property
    def user_name(self):
        """Gets the user_name of this PcceAgentJson.  # noqa: E501


        :return: The user_name of this PcceAgentJson.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this PcceAgentJson.


        :param user_name: The user_name of this PcceAgentJson.  # noqa: E501
        :type: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def first_name(self):
        """Gets the first_name of this PcceAgentJson.  # noqa: E501


        :return: The first_name of this PcceAgentJson.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PcceAgentJson.


        :param first_name: The first_name of this PcceAgentJson.  # noqa: E501
        :type: str
        """
        if first_name is None:
            raise ValueError("Invalid value for `first_name`, must not be `None`")  # noqa: E501

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this PcceAgentJson.  # noqa: E501


        :return: The last_name of this PcceAgentJson.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PcceAgentJson.


        :param last_name: The last_name of this PcceAgentJson.  # noqa: E501
        :type: str
        """
        if last_name is None:
            raise ValueError("Invalid value for `last_name`, must not be `None`")  # noqa: E501

        self._last_name = last_name

    @property
    def password(self):
        """Gets the password of this PcceAgentJson.  # noqa: E501


        :return: The password of this PcceAgentJson.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this PcceAgentJson.


        :param password: The password of this PcceAgentJson.  # noqa: E501
        :type: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def login_enabled(self):
        """Gets the login_enabled of this PcceAgentJson.  # noqa: E501


        :return: The login_enabled of this PcceAgentJson.  # noqa: E501
        :rtype: bool
        """
        return self._login_enabled

    @login_enabled.setter
    def login_enabled(self, login_enabled):
        """Sets the login_enabled of this PcceAgentJson.


        :param login_enabled: The login_enabled of this PcceAgentJson.  # noqa: E501
        :type: bool
        """
        if login_enabled is None:
            raise ValueError("Invalid value for `login_enabled`, must not be `None`")  # noqa: E501

        self._login_enabled = login_enabled

    @property
    def sso_enabled(self):
        """Gets the sso_enabled of this PcceAgentJson.  # noqa: E501


        :return: The sso_enabled of this PcceAgentJson.  # noqa: E501
        :rtype: bool
        """
        return self._sso_enabled

    @sso_enabled.setter
    def sso_enabled(self, sso_enabled):
        """Sets the sso_enabled of this PcceAgentJson.


        :param sso_enabled: The sso_enabled of this PcceAgentJson.  # noqa: E501
        :type: bool
        """
        if sso_enabled is None:
            raise ValueError("Invalid value for `sso_enabled`, must not be `None`")  # noqa: E501

        self._sso_enabled = sso_enabled

    @property
    def supervisor(self):
        """Gets the supervisor of this PcceAgentJson.  # noqa: E501


        :return: The supervisor of this PcceAgentJson.  # noqa: E501
        :rtype: bool
        """
        return self._supervisor

    @supervisor.setter
    def supervisor(self, supervisor):
        """Sets the supervisor of this PcceAgentJson.


        :param supervisor: The supervisor of this PcceAgentJson.  # noqa: E501
        :type: bool
        """
        if supervisor is None:
            raise ValueError("Invalid value for `supervisor`, must not be `None`")  # noqa: E501

        self._supervisor = supervisor

    @property
    def department(self):
        """Gets the department of this PcceAgentJson.  # noqa: E501


        :return: The department of this PcceAgentJson.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this PcceAgentJson.


        :param department: The department of this PcceAgentJson.  # noqa: E501
        :type: str
        """
        if department is None:
            raise ValueError("Invalid value for `department`, must not be `None`")  # noqa: E501

        self._department = department

    @property
    def boolean_agent_attributes(self):
        """Gets the boolean_agent_attributes of this PcceAgentJson.  # noqa: E501


        :return: The boolean_agent_attributes of this PcceAgentJson.  # noqa: E501
        :rtype: dict(str, bool)
        """
        return self._boolean_agent_attributes

    @boolean_agent_attributes.setter
    def boolean_agent_attributes(self, boolean_agent_attributes):
        """Sets the boolean_agent_attributes of this PcceAgentJson.


        :param boolean_agent_attributes: The boolean_agent_attributes of this PcceAgentJson.  # noqa: E501
        :type: dict(str, bool)
        """

        self._boolean_agent_attributes = boolean_agent_attributes

    @property
    def proficiency_agent_attributes(self):
        """Gets the proficiency_agent_attributes of this PcceAgentJson.  # noqa: E501


        :return: The proficiency_agent_attributes of this PcceAgentJson.  # noqa: E501
        :rtype: dict(str, int)
        """
        return self._proficiency_agent_attributes

    @proficiency_agent_attributes.setter
    def proficiency_agent_attributes(self, proficiency_agent_attributes):
        """Sets the proficiency_agent_attributes of this PcceAgentJson.


        :param proficiency_agent_attributes: The proficiency_agent_attributes of this PcceAgentJson.  # noqa: E501
        :type: dict(str, int)
        """

        self._proficiency_agent_attributes = proficiency_agent_attributes

    @property
    def skill_groups(self):
        """Gets the skill_groups of this PcceAgentJson.  # noqa: E501


        :return: The skill_groups of this PcceAgentJson.  # noqa: E501
        :rtype: list[str]
        """
        return self._skill_groups

    @skill_groups.setter
    def skill_groups(self, skill_groups):
        """Sets the skill_groups of this PcceAgentJson.


        :param skill_groups: The skill_groups of this PcceAgentJson.  # noqa: E501
        :type: list[str]
        """

        self._skill_groups = skill_groups

    @property
    def agent_desk_settings(self):
        """Gets the agent_desk_settings of this PcceAgentJson.  # noqa: E501


        :return: The agent_desk_settings of this PcceAgentJson.  # noqa: E501
        :rtype: str
        """
        return self._agent_desk_settings

    @agent_desk_settings.setter
    def agent_desk_settings(self, agent_desk_settings):
        """Sets the agent_desk_settings of this PcceAgentJson.


        :param agent_desk_settings: The agent_desk_settings of this PcceAgentJson.  # noqa: E501
        :type: str
        """
        if agent_desk_settings is None:
            raise ValueError("Invalid value for `agent_desk_settings`, must not be `None`")  # noqa: E501

        self._agent_desk_settings = agent_desk_settings

    @property
    def agent_team(self):
        """Gets the agent_team of this PcceAgentJson.  # noqa: E501


        :return: The agent_team of this PcceAgentJson.  # noqa: E501
        :rtype: str
        """
        return self._agent_team

    @agent_team.setter
    def agent_team(self, agent_team):
        """Sets the agent_team of this PcceAgentJson.


        :param agent_team: The agent_team of this PcceAgentJson.  # noqa: E501
        :type: str
        """
        if agent_team is None:
            raise ValueError("Invalid value for `agent_team`, must not be `None`")  # noqa: E501

        self._agent_team = agent_team

    @property
    def finesse_id(self):
        """Gets the finesse_id of this PcceAgentJson.  # noqa: E501


        :return: The finesse_id of this PcceAgentJson.  # noqa: E501
        :rtype: str
        """
        return self._finesse_id

    @finesse_id.setter
    def finesse_id(self, finesse_id):
        """Sets the finesse_id of this PcceAgentJson.


        :param finesse_id: The finesse_id of this PcceAgentJson.  # noqa: E501
        :type: str
        """
        if finesse_id is None:
            raise ValueError("Invalid value for `finesse_id`, must not be `None`")  # noqa: E501

        self._finesse_id = finesse_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PcceAgentJson, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PcceAgentJson):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
