# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VoicemailsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_voicemail(self, server_id, id, **kwargs):  # noqa: E501
        """Delete an existing voicemail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_voicemail(server_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the voicemail is located (required)
        :param str id: The id of the voicemail (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_voicemail_with_http_info(server_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_voicemail_with_http_info(server_id, id, **kwargs)  # noqa: E501
            return data

    def delete_voicemail_with_http_info(self, server_id, id, **kwargs):  # noqa: E501
        """Delete an existing voicemail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_voicemail_with_http_info(server_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the voicemail is located (required)
        :param str id: The id of the voicemail (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_voicemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `delete_voicemail`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `delete_voicemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/unity-servers/{serverId}/voicemails/{id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_voicemail(self, server_id, id, **kwargs):  # noqa: E501
        """Get an existing voicemail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_voicemail(server_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the voicemail is located (required)
        :param str id: The id of the voicemail (required)
        :return: VoicemailJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_voicemail_with_http_info(server_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_voicemail_with_http_info(server_id, id, **kwargs)  # noqa: E501
            return data

    def get_voicemail_with_http_info(self, server_id, id, **kwargs):  # noqa: E501
        """Get an existing voicemail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_voicemail_with_http_info(server_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the voicemail is located (required)
        :param str id: The id of the voicemail (required)
        :return: VoicemailJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_voicemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `get_voicemail`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_voicemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/unity-servers/{serverId}/voicemails/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VoicemailJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_voicemail_notification_device(self, server_id, id, **kwargs):  # noqa: E501
        """Get the SMTP notification service value for a voicemail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_voicemail_notification_device(server_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the voicemail is located (required)
        :param str id: The id of the voicemail (required)
        :return: SmtpAddressJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_voicemail_notification_device_with_http_info(server_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_voicemail_notification_device_with_http_info(server_id, id, **kwargs)  # noqa: E501
            return data

    def get_voicemail_notification_device_with_http_info(self, server_id, id, **kwargs):  # noqa: E501
        """Get the SMTP notification service value for a voicemail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_voicemail_notification_device_with_http_info(server_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the voicemail is located (required)
        :param str id: The id of the voicemail (required)
        :return: SmtpAddressJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_voicemail_notification_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `get_voicemail_notification_device`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `get_voicemail_notification_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/unity-servers/{serverId}/voicemails/{id}/smtp-notification-devices', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SmtpAddressJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_voicemail(self, body, server_id, **kwargs):  # noqa: E501
        """Create a new voicemail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_voicemail(body, server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostVoicemailJson body: The details of the voicemail to create (required)
        :param int server_id: The id of the server where the voicemail is located (required)
        :return: VoicemailRefJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_voicemail_with_http_info(body, server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_voicemail_with_http_info(body, server_id, **kwargs)  # noqa: E501
            return data

    def post_voicemail_with_http_info(self, body, server_id, **kwargs):  # noqa: E501
        """Create a new voicemail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_voicemail_with_http_info(body, server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PostVoicemailJson body: The details of the voicemail to create (required)
        :param int server_id: The id of the server where the voicemail is located (required)
        :return: VoicemailRefJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_voicemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_voicemail`")  # noqa: E501
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `post_voicemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/unity-servers/{serverId}/voicemails', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VoicemailRefJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_voicemail_pin_reset(self, body, server_id, id, **kwargs):  # noqa: E501
        """Reset voicemail PIN  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_voicemail_pin_reset(body, server_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VoicemailPinResetRequestJson body: The pin reset request details (required)
        :param int server_id: The id of the server where the voicemail is located (required)
        :param str id: The id of the voicemail (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_voicemail_pin_reset_with_http_info(body, server_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_voicemail_pin_reset_with_http_info(body, server_id, id, **kwargs)  # noqa: E501
            return data

    def post_voicemail_pin_reset_with_http_info(self, body, server_id, id, **kwargs):  # noqa: E501
        """Reset voicemail PIN  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_voicemail_pin_reset_with_http_info(body, server_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VoicemailPinResetRequestJson body: The pin reset request details (required)
        :param int server_id: The id of the server where the voicemail is located (required)
        :param str id: The id of the voicemail (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'server_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_voicemail_pin_reset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_voicemail_pin_reset`")  # noqa: E501
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `post_voicemail_pin_reset`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `post_voicemail_pin_reset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/unity-servers/{serverId}/voicemails/{id}/pin-reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_voicemail(self, body, server_id, id, **kwargs):  # noqa: E501
        """Update an existing voicemail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_voicemail(body, server_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VoicemailJson body: The updated voicemail details (required)
        :param int server_id: The id of the server where the voicemail is located (required)
        :param str id: The id of the voicemail (required)
        :return: VoicemailRefJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_voicemail_with_http_info(body, server_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_voicemail_with_http_info(body, server_id, id, **kwargs)  # noqa: E501
            return data

    def put_voicemail_with_http_info(self, body, server_id, id, **kwargs):  # noqa: E501
        """Update an existing voicemail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_voicemail_with_http_info(body, server_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VoicemailJson body: The updated voicemail details (required)
        :param int server_id: The id of the server where the voicemail is located (required)
        :param str id: The id of the voicemail (required)
        :return: VoicemailRefJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'server_id', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_voicemail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_voicemail`")  # noqa: E501
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `put_voicemail`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_voicemail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/unity-servers/{serverId}/voicemails/{id}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VoicemailRefJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_voicemail_notification_device(self, server_id, id, **kwargs):  # noqa: E501
        """Enable and set the SMTP notification service for a voicemail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_voicemail_notification_device(server_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the voicemail is located (required)
        :param str id: The id of the voicemail (required)
        :param SmtpAddressJson body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_voicemail_notification_device_with_http_info(server_id, id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_voicemail_notification_device_with_http_info(server_id, id, **kwargs)  # noqa: E501
            return data

    def put_voicemail_notification_device_with_http_info(self, server_id, id, **kwargs):  # noqa: E501
        """Enable and set the SMTP notification service for a voicemail  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_voicemail_notification_device_with_http_info(server_id, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the voicemail is located (required)
        :param str id: The id of the voicemail (required)
        :param SmtpAddressJson body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_voicemail_notification_device" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `put_voicemail_notification_device`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `put_voicemail_notification_device`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/unity-servers/{serverId}/voicemails/{id}/smtp-notification-devices', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_voicemail(self, **kwargs):  # noqa: E501
        """Search for voicemail across unity servers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_voicemail(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: If 'q' contains two strings separated by a ' ', then the first string will be used to find a 'STARTS WITH' match on the first name, and the second string will be used to find a 'STARTS WITH' match on last name. Otherwise, the 'q' string will be used to find a 'STARTS WITH' match on 'alias', 'first name' and 'last name'. In addition, the `q` string will be used to find a `STARTS WITH` and `ENDS WITH` match on `extension`.
        :param str alias: This param will be used to find an 'EXACT' match on 'alias'
        :param str extension: This param will be used to find an 'EXACT' match on 'extension'
        :param int unity_server_id: If specified, the search will be performed only on the specified server
        :return: list[VoicemailResultJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_voicemail_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_voicemail_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_voicemail_with_http_info(self, **kwargs):  # noqa: E501
        """Search for voicemail across unity servers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_voicemail_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: If 'q' contains two strings separated by a ' ', then the first string will be used to find a 'STARTS WITH' match on the first name, and the second string will be used to find a 'STARTS WITH' match on last name. Otherwise, the 'q' string will be used to find a 'STARTS WITH' match on 'alias', 'first name' and 'last name'. In addition, the `q` string will be used to find a `STARTS WITH` and `ENDS WITH` match on `extension`.
        :param str alias: This param will be used to find an 'EXACT' match on 'alias'
        :param str extension: This param will be used to find an 'EXACT' match on 'extension'
        :param int unity_server_id: If specified, the search will be performed only on the specified server
        :return: list[VoicemailResultJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'alias', 'extension', 'unity_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_voicemail" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'alias' in params:
            query_params.append(('alias', params['alias']))  # noqa: E501
        if 'extension' in params:
            query_params.append(('extension', params['extension']))  # noqa: E501
        if 'unity_server_id' in params:
            query_params.append(('unity-server-id', params['unity_server_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search/voicemails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[VoicemailResultJson]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
