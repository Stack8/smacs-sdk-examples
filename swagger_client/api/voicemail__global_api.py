# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class VoicemailGlobalApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def search_global_voicemails(self, **kwargs):  # noqa: E501
        """Search for global voicemails across unity servers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_global_voicemails(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: If 'q' contains two strings separated by a ' ', then the first string will be used to find a 'STARTS WITH' match on the first name, and the second string will be used to find a 'STARTS WITH' match on last name. Otherwise, the 'q' string will be used to find a 'STARTS WITH' match on 'alias', 'first name' and 'last name'. In addition, if the 'q' string matches an extension pattern, then it will also be used to find an 'EXACT' match on 'extension'.
        :param str alias: This param will be used to find an 'EXACT' match on 'alias'
        :param int server_id: The search will be performed only on the specified server
        :return: list[GlobalVoicemailResultJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_global_voicemails_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_global_voicemails_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_global_voicemails_with_http_info(self, **kwargs):  # noqa: E501
        """Search for global voicemails across unity servers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_global_voicemails_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: If 'q' contains two strings separated by a ' ', then the first string will be used to find a 'STARTS WITH' match on the first name, and the second string will be used to find a 'STARTS WITH' match on last name. Otherwise, the 'q' string will be used to find a 'STARTS WITH' match on 'alias', 'first name' and 'last name'. In addition, if the 'q' string matches an extension pattern, then it will also be used to find an 'EXACT' match on 'extension'.
        :param str alias: This param will be used to find an 'EXACT' match on 'alias'
        :param int server_id: The search will be performed only on the specified server
        :return: list[GlobalVoicemailResultJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'alias', 'server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_global_voicemails" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'alias' in params:
            query_params.append(('alias', params['alias']))  # noqa: E501
        if 'server_id' in params:
            query_params.append(('server-id', params['server_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search/global-voicemails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[GlobalVoicemailResultJson]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
