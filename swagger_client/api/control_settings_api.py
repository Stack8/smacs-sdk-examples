# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ControlSettingsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_device_utilization_settings(self, **kwargs):  # noqa: E501
        """Get current control module settings  # noqa: E501

        The control module settings contains the following fields:  <ul> <li><strong>CUCM CDR File Process Frequency (in Minutes)</strong> - Frequency at which cdr (.csv) files containing individual call records are processed and added to the cucm_cdr_historic table as well as deleted from the file system. (Note: The frequency at which CDR .csv files are dumped from CUCM via sFTP is not configurable and managed by CUCM).</li> <li><strong>Utilization Processing Frequency (in Minutes)</strong> - Frequency of where total durations are calculated based on the historic CDRs above. SMACS also fetches complementary information about all devices in CUCM (ex. owners, device pools, reg status) that is not present in the CDR records above. Total  durations are stored in the cucm_device_durations table and used by the utilization report.</li> <li><strong>CDR Retention (in Days)</strong> - Days to keep individual records from CDRs (kept in the cucm_cdr_historic table). Ex. Any calls that occurred that are older than the retention period will be deleted. </li> <li><strong>New Device Max Age (in Days)</strong>  - Max age to consider a device \"new\". New devices typically do not have significant amount of utilization given they were recently created. Only devices created via SMACS are considered given the audits are used to determine the creation date.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_utilization_settings(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ControlSettingsJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_device_utilization_settings_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_device_utilization_settings_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_device_utilization_settings_with_http_info(self, **kwargs):  # noqa: E501
        """Get current control module settings  # noqa: E501

        The control module settings contains the following fields:  <ul> <li><strong>CUCM CDR File Process Frequency (in Minutes)</strong> - Frequency at which cdr (.csv) files containing individual call records are processed and added to the cucm_cdr_historic table as well as deleted from the file system. (Note: The frequency at which CDR .csv files are dumped from CUCM via sFTP is not configurable and managed by CUCM).</li> <li><strong>Utilization Processing Frequency (in Minutes)</strong> - Frequency of where total durations are calculated based on the historic CDRs above. SMACS also fetches complementary information about all devices in CUCM (ex. owners, device pools, reg status) that is not present in the CDR records above. Total  durations are stored in the cucm_device_durations table and used by the utilization report.</li> <li><strong>CDR Retention (in Days)</strong> - Days to keep individual records from CDRs (kept in the cucm_cdr_historic table). Ex. Any calls that occurred that are older than the retention period will be deleted. </li> <li><strong>New Device Max Age (in Days)</strong>  - Max age to consider a device \"new\". New devices typically do not have significant amount of utilization given they were recently created. Only devices created via SMACS are considered given the audits are used to determine the creation date.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_device_utilization_settings_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: ControlSettingsJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_device_utilization_settings" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/control/device-utilization-settings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ControlSettingsJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_device_utilization_settings(self, body, **kwargs):  # noqa: E501
        """Update the control module settings  # noqa: E501

        The control module settings contains the following fields:  <ul> <li><strong>CUCM CDR File Process Frequency (in Minutes)</strong> - Frequency at which cdr (.csv) files containing individual call records are processed and added to the cucm_cdr_historic table as well as deleted from the file system. (Note: The frequency at which CDR .csv files are dumped from CUCM via sFTP is not configurable and managed by CUCM).</li> <li><strong>Utilization Processing Frequency (in Minutes)</strong> - Frequency of where total durations are calculated based on the historic CDRs above. SMACS also fetches complementary information about all devices in CUCM (ex. owners, device pools, reg status) that is not present in the CDR records above. Total  durations are stored in the cucm_device_durations table and used by the utilization report.</li> <li><strong>CDR Retention (in Days)</strong> - Days to keep individual records from CDRs (kept in the cucm_cdr_historic table). Ex. Any calls that occurred that are older than the retention period will be deleted. </li> <li><strong>New Device Max Age (in Days)</strong>  - Max age to consider a device \"new\". New devices typically do not have significant amount of utilization given they were recently created. Only devices created via SMACS are considered given the audits are used to determine the creation date.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_device_utilization_settings(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ControlSettingsJson body: the updated control module settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_device_utilization_settings_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.put_device_utilization_settings_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def put_device_utilization_settings_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update the control module settings  # noqa: E501

        The control module settings contains the following fields:  <ul> <li><strong>CUCM CDR File Process Frequency (in Minutes)</strong> - Frequency at which cdr (.csv) files containing individual call records are processed and added to the cucm_cdr_historic table as well as deleted from the file system. (Note: The frequency at which CDR .csv files are dumped from CUCM via sFTP is not configurable and managed by CUCM).</li> <li><strong>Utilization Processing Frequency (in Minutes)</strong> - Frequency of where total durations are calculated based on the historic CDRs above. SMACS also fetches complementary information about all devices in CUCM (ex. owners, device pools, reg status) that is not present in the CDR records above. Total  durations are stored in the cucm_device_durations table and used by the utilization report.</li> <li><strong>CDR Retention (in Days)</strong> - Days to keep individual records from CDRs (kept in the cucm_cdr_historic table). Ex. Any calls that occurred that are older than the retention period will be deleted. </li> <li><strong>New Device Max Age (in Days)</strong>  - Max age to consider a device \"new\". New devices typically do not have significant amount of utilization given they were recently created. Only devices created via SMACS are considered given the audits are used to determine the creation date.</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_device_utilization_settings_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ControlSettingsJson body: the updated control module settings (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_device_utilization_settings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_device_utilization_settings`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/control/device-utilization-settings', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
