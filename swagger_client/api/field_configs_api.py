# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FieldConfigsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def generate_pcce_agents_field_configs(self, **kwargs):  # noqa: E501
        """Generate field configurations for PCCE Agents details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_pcce_agents_field_configs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pcce_server_id: The PCCE server ID
        :param str department: The department used to generate the field configs
        :return: PcceAgentsFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.generate_pcce_agents_field_configs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.generate_pcce_agents_field_configs_with_http_info(**kwargs)  # noqa: E501
            return data

    def generate_pcce_agents_field_configs_with_http_info(self, **kwargs):  # noqa: E501
        """Generate field configurations for PCCE Agents details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.generate_pcce_agents_field_configs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int pcce_server_id: The PCCE server ID
        :param str department: The department used to generate the field configs
        :return: PcceAgentsFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pcce_server_id', 'department']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method generate_pcce_agents_field_configs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'pcce_server_id' in params:
            query_params.append(('pcce-server-id', params['pcce_server_id']))  # noqa: E501
        if 'department' in params:
            query_params.append(('department', params['department']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/pcce-agents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PcceAgentsFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_generate_search_config(self, **kwargs):  # noqa: E501
        """Generate configuration used when searching for users from the helpdesk page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generate_search_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SearchFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_generate_search_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_generate_search_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_generate_search_config_with_http_info(self, **kwargs):  # noqa: E501
        """Generate configuration used when searching for users from the helpdesk page  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_generate_search_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: SearchFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_generate_search_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/search-config', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SearchFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ms_teams_audio_conferences_field_config(self, **kwargs):  # noqa: E501
        """Field Configuration for Audio Conferencing in Microsoft Teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ms_teams_audio_conferences_field_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MsTeamsAudioConferenceJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ms_teams_audio_conferences_field_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_ms_teams_audio_conferences_field_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_ms_teams_audio_conferences_field_config_with_http_info(self, **kwargs):  # noqa: E501
        """Field Configuration for Audio Conferencing in Microsoft Teams  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ms_teams_audio_conferences_field_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: MsTeamsAudioConferenceJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ms_teams_audio_conferences_field_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/microsoft-teams-audio-conferences', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MsTeamsAudioConferenceJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ms_teams_line_field_config(self, **kwargs):  # noqa: E501
        """Field Configuration for Microsoft Teams Calling  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ms_teams_line_field_config(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str on_prem_line_uri_e164: Selected Line URI for the User
        :return: MsTeamsLineFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ms_teams_line_field_config_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_ms_teams_line_field_config_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_ms_teams_line_field_config_with_http_info(self, **kwargs):  # noqa: E501
        """Field Configuration for Microsoft Teams Calling  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ms_teams_line_field_config_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str on_prem_line_uri_e164: Selected Line URI for the User
        :return: MsTeamsLineFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['on_prem_line_uri_e164']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ms_teams_line_field_config" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'on_prem_line_uri_e164' in params:
            query_params.append(('onPremLineUriE164', params['on_prem_line_uri_e164']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/microsoft-teams-lines', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MsTeamsLineFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phone_service_parameter_field_config(self, cucm_server_id, phone_service_id, **kwargs):  # noqa: E501
        """Generate field configurations for phone service parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phone_service_parameter_field_config(cucm_server_id, phone_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cucm_server_id: Cucm Server Id (required)
        :param str phone_service_id: Phone Service Id (required)
        :return: list[PhoneServiceParameterJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phone_service_parameter_field_config_with_http_info(cucm_server_id, phone_service_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_phone_service_parameter_field_config_with_http_info(cucm_server_id, phone_service_id, **kwargs)  # noqa: E501
            return data

    def get_phone_service_parameter_field_config_with_http_info(self, cucm_server_id, phone_service_id, **kwargs):  # noqa: E501
        """Generate field configurations for phone service parameters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phone_service_parameter_field_config_with_http_info(cucm_server_id, phone_service_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int cucm_server_id: Cucm Server Id (required)
        :param str phone_service_id: Phone Service Id (required)
        :return: list[PhoneServiceParameterJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cucm_server_id', 'phone_service_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phone_service_parameter_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cucm_server_id' is set
        if ('cucm_server_id' not in params or
                params['cucm_server_id'] is None):
            raise ValueError("Missing the required parameter `cucm_server_id` when calling `get_phone_service_parameter_field_config`")  # noqa: E501
        # verify the required parameter 'phone_service_id' is set
        if ('phone_service_id' not in params or
                params['phone_service_id'] is None):
            raise ValueError("Missing the required parameter `phone_service_id` when calling `get_phone_service_parameter_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'cucm_server_id' in params:
            query_params.append(('cucm-server-id', params['cucm_server_id']))  # noqa: E501
        if 'phone_service_id' in params:
            query_params.append(('phone-service-id', params['phone_service_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/phone-service-parameters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PhoneServiceParameterJson]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_uccx_field_config(self, uccx_server_id, **kwargs):  # noqa: E501
        """Generate field configurations for UCCX  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_uccx_field_config(uccx_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int uccx_server_id: UCCX Server Id (required)
        :return: UccxFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_uccx_field_config_with_http_info(uccx_server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_uccx_field_config_with_http_info(uccx_server_id, **kwargs)  # noqa: E501
            return data

    def get_uccx_field_config_with_http_info(self, uccx_server_id, **kwargs):  # noqa: E501
        """Generate field configurations for UCCX  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_uccx_field_config_with_http_info(uccx_server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int uccx_server_id: UCCX Server Id (required)
        :return: UccxFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['uccx_server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_uccx_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'uccx_server_id' is set
        if ('uccx_server_id' not in params or
                params['uccx_server_id'] is None):
            raise ValueError("Missing the required parameter `uccx_server_id` when calling `get_uccx_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'uccx_server_id' in params:
            query_params.append(('uccx-server-id', params['uccx_server_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/uccx-agents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='UccxFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_android_field_config(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for Android devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_android_field_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MobileSoftphoneFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: AndroidIphoneFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_android_field_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_android_field_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_generate_android_field_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for Android devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_android_field_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MobileSoftphoneFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: AndroidIphoneFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_android_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_generate_android_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/android', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AndroidIphoneFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_cipc_field_config(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for CIPC devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_cipc_field_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CipcFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: CipcFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_cipc_field_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_cipc_field_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_generate_cipc_field_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for CIPC devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_cipc_field_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param CipcFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: CipcFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_cipc_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_generate_cipc_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/cipc', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CipcFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_directory_number_field_config(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for directory numbers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_directory_number_field_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DirectoryNumberFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: DirectoryNumberFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_directory_number_field_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_directory_number_field_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_generate_directory_number_field_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for directory numbers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_directory_number_field_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DirectoryNumberFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: DirectoryNumberFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_directory_number_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_generate_directory_number_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/directory-numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DirectoryNumberFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_extension_mobility_field_config(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for Extension Mobility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_extension_mobility_field_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtensionMobilityFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: ExtensionMobilityFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_extension_mobility_field_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_extension_mobility_field_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_generate_extension_mobility_field_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for Extension Mobility  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_extension_mobility_field_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param ExtensionMobilityFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: ExtensionMobilityFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_extension_mobility_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_generate_extension_mobility_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/extension-mobility-profiles', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ExtensionMobilityFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_im_softphone_field_configs(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for IM Softphone (CSF) devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_im_softphone_field_configs(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MobileSoftphoneFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: ImSoftphoneFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_im_softphone_field_configs_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_im_softphone_field_configs_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_generate_im_softphone_field_configs_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for IM Softphone (CSF) devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_im_softphone_field_configs_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MobileSoftphoneFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: ImSoftphoneFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_im_softphone_field_configs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_generate_im_softphone_field_configs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/im-softphone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ImSoftphoneFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_iphone_field_config(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for iPhone devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_iphone_field_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MobileSoftphoneFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: AndroidIphoneFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_iphone_field_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_iphone_field_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_generate_iphone_field_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for iPhone devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_iphone_field_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MobileSoftphoneFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: AndroidIphoneFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_iphone_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_generate_iphone_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/iphone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AndroidIphoneFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_ldap_user_dial_plan_details_field_config(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for LDAP user dial plan details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_ldap_user_dial_plan_details_field_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LdapUserDialPlanDetailsFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: LdapUserDialPlanDetailsFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_ldap_user_dial_plan_details_field_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_ldap_user_dial_plan_details_field_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_generate_ldap_user_dial_plan_details_field_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for LDAP user dial plan details  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_ldap_user_dial_plan_details_field_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LdapUserDialPlanDetailsFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: LdapUserDialPlanDetailsFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_ldap_user_dial_plan_details_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_generate_ldap_user_dial_plan_details_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/ldap-user-dial-plan-attributes', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LdapUserDialPlanDetailsFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_line_feature_field_config(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for line features  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_line_feature_field_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LineFeatureFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: LineFeatureFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_line_feature_field_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_line_feature_field_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_generate_line_feature_field_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for line features  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_line_feature_field_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param LineFeatureFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: LineFeatureFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_line_feature_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_generate_line_feature_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/line-features', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LineFeatureFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_model_protocol_field_configs(self, body, **kwargs):  # noqa: E501
        """Generate configurations for the Model and Protocol fields of Deskphone devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_model_protocol_field_configs(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteIdConfigRequestJson body: ID of site to generate the field configs for (required)
        :return: DeskphoneModelProtocolFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_model_protocol_field_configs_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_model_protocol_field_configs_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_generate_model_protocol_field_configs_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate configurations for the Model and Protocol fields of Deskphone devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_model_protocol_field_configs_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteIdConfigRequestJson body: ID of site to generate the field configs for (required)
        :return: DeskphoneModelProtocolFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_model_protocol_field_configs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_generate_model_protocol_field_configs`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/deskphone-model-protocol', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeskphoneModelProtocolFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_phone_button_template_field_config(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for phone buttons templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_phone_button_template_field_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneButtonTemplateFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: PhoneButtonTemplateFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_phone_button_template_field_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_phone_button_template_field_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_generate_phone_button_template_field_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for phone buttons templates  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_phone_button_template_field_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneButtonTemplateFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: PhoneButtonTemplateFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_phone_button_template_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_generate_phone_button_template_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/phone-button-templates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PhoneButtonTemplateFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_tablet_field_config(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for Tablet devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_tablet_field_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MobileSoftphoneFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: TabletFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_tablet_field_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_tablet_field_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_generate_tablet_field_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for Tablet devices  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_tablet_field_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MobileSoftphoneFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: TabletFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_tablet_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_generate_tablet_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/tablet', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TabletFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_tile_field_config(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for 360 View tiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_tile_field_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteIdConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: TileConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_tile_field_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_tile_field_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_generate_tile_field_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for 360 View tiles  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_tile_field_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SiteIdConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: TileConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_tile_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_generate_tile_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/tile-configs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TileConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_translation_pattern_field_config(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for translation patterns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_translation_pattern_field_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TranslationPatternFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: TranslationPatternFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_translation_pattern_field_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_translation_pattern_field_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_generate_translation_pattern_field_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for translation patterns  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_translation_pattern_field_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param TranslationPatternFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: TranslationPatternFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_translation_pattern_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_generate_translation_pattern_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/translation-patterns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TranslationPatternFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_voicemail_field_config(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for voice mail features  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_voicemail_field_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VoicemailFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: VoicemailFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_voicemail_field_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_voicemail_field_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_generate_voicemail_field_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for voice mail features  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_voicemail_field_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param VoicemailFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: VoicemailFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_voicemail_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_generate_voicemail_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/voicemails', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='VoicemailFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_phone_field_config(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for phones  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_phone_field_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeskPhoneFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: DeskPhoneFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_phone_field_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_phone_field_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_phone_field_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for phones  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_phone_field_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DeskPhoneFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: DeskPhoneFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_phone_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_phone_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/desk-phone', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DeskPhoneFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_snr_field_config(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for snrs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_snr_field_config(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SnrFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: SnrFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_snr_field_config_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.post_snr_field_config_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def post_snr_field_config_with_http_info(self, body, **kwargs):  # noqa: E501
        """Generate field configurations for snrs  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_snr_field_config_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param SnrFieldConfigRequestJson body: Parameters used to generate the field configs (required)
        :return: SnrFieldConfigJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_snr_field_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_snr_field_config`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/field-configs/snrs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SnrFieldConfigJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
