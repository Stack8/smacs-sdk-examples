# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EndUsersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_end_user(self, server_id, end_user_id, **kwargs):  # noqa: E501
        """Delete an existing end user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_end_user(server_id, end_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the end user is located (required)
        :param str end_user_id: The id of the end user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_end_user_with_http_info(server_id, end_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_end_user_with_http_info(server_id, end_user_id, **kwargs)  # noqa: E501
            return data

    def delete_end_user_with_http_info(self, server_id, end_user_id, **kwargs):  # noqa: E501
        """Delete an existing end user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_end_user_with_http_info(server_id, end_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the end user is located (required)
        :param str end_user_id: The id of the end user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'end_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_end_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `delete_end_user`")  # noqa: E501
        # verify the required parameter 'end_user_id' is set
        if ('end_user_id' not in params or
                params['end_user_id'] is None):
            raise ValueError("Missing the required parameter `end_user_id` when calling `delete_end_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'end_user_id' in params:
            path_params['endUserId'] = params['end_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/end-users/{endUserId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_im_presence(self, server_id, end_user_id, **kwargs):  # noqa: E501
        """Disable ImPresence for the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_im_presence(server_id, end_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the end user is located in (required)
        :param str end_user_id: The id of the end user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_im_presence_with_http_info(server_id, end_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_im_presence_with_http_info(server_id, end_user_id, **kwargs)  # noqa: E501
            return data

    def delete_im_presence_with_http_info(self, server_id, end_user_id, **kwargs):  # noqa: E501
        """Disable ImPresence for the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_im_presence_with_http_info(server_id, end_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the end user is located in (required)
        :param str end_user_id: The id of the end user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'end_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_im_presence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `delete_im_presence`")  # noqa: E501
        # verify the required parameter 'end_user_id' is set
        if ('end_user_id' not in params or
                params['end_user_id'] is None):
            raise ValueError("Missing the required parameter `end_user_id` when calling `delete_im_presence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'end_user_id' in params:
            path_params['endUserId'] = params['end_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/end-users/{endUserId}/im-presence', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_end_user(self, server_id, end_user_id, **kwargs):  # noqa: E501
        """Get an end user by their ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_end_user(server_id, end_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the end user is located (required)
        :param str end_user_id: The id of the end user (required)
        :return: EndUserJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_end_user_with_http_info(server_id, end_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_end_user_with_http_info(server_id, end_user_id, **kwargs)  # noqa: E501
            return data

    def get_end_user_with_http_info(self, server_id, end_user_id, **kwargs):  # noqa: E501
        """Get an end user by their ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_end_user_with_http_info(server_id, end_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the end user is located (required)
        :param str end_user_id: The id of the end user (required)
        :return: EndUserJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'end_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_end_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `get_end_user`")  # noqa: E501
        # verify the required parameter 'end_user_id' is set
        if ('end_user_id' not in params or
                params['end_user_id'] is None):
            raise ValueError("Missing the required parameter `end_user_id` when calling `get_end_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'end_user_id' in params:
            path_params['endUserId'] = params['end_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/end-users/{endUserId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndUserJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_end_user(self, body, server_id, **kwargs):  # noqa: E501
        """Create a new end user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_end_user(body, server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EndUserJson body: The end user details to create (required)
        :param int server_id: The id of the server where to create the end user (required)
        :return: EndUserRefJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_end_user_with_http_info(body, server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_end_user_with_http_info(body, server_id, **kwargs)  # noqa: E501
            return data

    def post_end_user_with_http_info(self, body, server_id, **kwargs):  # noqa: E501
        """Create a new end user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_end_user_with_http_info(body, server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EndUserJson body: The end user details to create (required)
        :param int server_id: The id of the server where to create the end user (required)
        :return: EndUserRefJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'server_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_end_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_end_user`")  # noqa: E501
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `post_end_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/end-users', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndUserRefJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_end_user_de_activations(self, server_id, end_user_id, **kwargs):  # noqa: E501
        """Set user as LDAP-inactive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_end_user_de_activations(server_id, end_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the end user is located (required)
        :param str end_user_id: The id of the end user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_end_user_de_activations_with_http_info(server_id, end_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_end_user_de_activations_with_http_info(server_id, end_user_id, **kwargs)  # noqa: E501
            return data

    def post_end_user_de_activations_with_http_info(self, server_id, end_user_id, **kwargs):  # noqa: E501
        """Set user as LDAP-inactive  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_end_user_de_activations_with_http_info(server_id, end_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the end user is located (required)
        :param str end_user_id: The id of the end user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'end_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_end_user_de_activations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `post_end_user_de_activations`")  # noqa: E501
        # verify the required parameter 'end_user_id' is set
        if ('end_user_id' not in params or
                params['end_user_id'] is None):
            raise ValueError("Missing the required parameter `end_user_id` when calling `post_end_user_de_activations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'end_user_id' in params:
            path_params['endUserId'] = params['end_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/end-users/{endUserId}/deactivations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_end_user_pin_reset(self, server_id, end_user_id, **kwargs):  # noqa: E501
        """Reset an end user's PIN  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_end_user_pin_reset(server_id, end_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the end user is located in (required)
        :param str end_user_id: The id of the end user (required)
        :param EndUserPinResetRequestJson body: The reset pin details
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_end_user_pin_reset_with_http_info(server_id, end_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_end_user_pin_reset_with_http_info(server_id, end_user_id, **kwargs)  # noqa: E501
            return data

    def post_end_user_pin_reset_with_http_info(self, server_id, end_user_id, **kwargs):  # noqa: E501
        """Reset an end user's PIN  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_end_user_pin_reset_with_http_info(server_id, end_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the end user is located in (required)
        :param str end_user_id: The id of the end user (required)
        :param EndUserPinResetRequestJson body: The reset pin details
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'end_user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_end_user_pin_reset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `post_end_user_pin_reset`")  # noqa: E501
        # verify the required parameter 'end_user_id' is set
        if ('end_user_id' not in params or
                params['end_user_id'] is None):
            raise ValueError("Missing the required parameter `end_user_id` when calling `post_end_user_pin_reset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'end_user_id' in params:
            path_params['endUserId'] = params['end_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/end-users/{endUserId}/pin-reset', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_im_presence(self, server_id, end_user_id, **kwargs):  # noqa: E501
        """Enable ImPresence for the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_im_presence(server_id, end_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the end user is located in (required)
        :param str end_user_id: The id of the end user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_im_presence_with_http_info(server_id, end_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_im_presence_with_http_info(server_id, end_user_id, **kwargs)  # noqa: E501
            return data

    def post_im_presence_with_http_info(self, server_id, end_user_id, **kwargs):  # noqa: E501
        """Enable ImPresence for the user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_im_presence_with_http_info(server_id, end_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the end user is located in (required)
        :param str end_user_id: The id of the end user (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'end_user_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_im_presence" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `post_im_presence`")  # noqa: E501
        # verify the required parameter 'end_user_id' is set
        if ('end_user_id' not in params or
                params['end_user_id'] is None):
            raise ValueError("Missing the required parameter `end_user_id` when calling `post_im_presence`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'end_user_id' in params:
            path_params['endUserId'] = params['end_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/end-users/{endUserId}/im-presence', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_end_user(self, server_id, end_user_id, **kwargs):  # noqa: E501
        """Update an existing end user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_end_user(server_id, end_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the end user is located (required)
        :param str end_user_id: The id of the end user (required)
        :param EndUserJson body:
        :return: EndUserRefJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_end_user_with_http_info(server_id, end_user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.put_end_user_with_http_info(server_id, end_user_id, **kwargs)  # noqa: E501
            return data

    def put_end_user_with_http_info(self, server_id, end_user_id, **kwargs):  # noqa: E501
        """Update an existing end user  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_end_user_with_http_info(server_id, end_user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server where the end user is located (required)
        :param str end_user_id: The id of the end user (required)
        :param EndUserJson body:
        :return: EndUserRefJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'end_user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_end_user" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `put_end_user`")  # noqa: E501
        # verify the required parameter 'end_user_id' is set
        if ('end_user_id' not in params or
                params['end_user_id'] is None):
            raise ValueError("Missing the required parameter `end_user_id` when calling `put_end_user`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'end_user_id' in params:
            path_params['endUserId'] = params['end_user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/end-users/{endUserId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='EndUserRefJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_end_users(self, **kwargs):  # noqa: E501
        """Search for end users. Exactly one parameter must be provided. The Parameter must have a length >= 2 for a search to be performed. The parameters is applied with a 'case insensitive contains' predicate.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_end_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: Search using 'username OR email OR firstName OR lastName OR primaryExtension. When the value contains a single space, search using the first token against firstName, the second token against the lastName. The tokens must each have a length >= 2 for a search to be performed.
        :param str username: Search using username.
        :param str email: Search using email.
        :param str first_name: Search using firstName.
        :param str last_name: Search using lastName.
        :param str primary_extension: Search using primaryExtension.
        :param int cucm_server_id: Optional Server Id.
        :param int limit: Limit the returned search results. Limit applies to the number of results returned per server, not for the total number of results returned. In other words, searching globally across 3 UC servers with a limit of 5 could yield 15 results.
        :return: list[EndUserResultJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_end_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_end_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_end_users_with_http_info(self, **kwargs):  # noqa: E501
        """Search for end users. Exactly one parameter must be provided. The Parameter must have a length >= 2 for a search to be performed. The parameters is applied with a 'case insensitive contains' predicate.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_end_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: Search using 'username OR email OR firstName OR lastName OR primaryExtension. When the value contains a single space, search using the first token against firstName, the second token against the lastName. The tokens must each have a length >= 2 for a search to be performed.
        :param str username: Search using username.
        :param str email: Search using email.
        :param str first_name: Search using firstName.
        :param str last_name: Search using lastName.
        :param str primary_extension: Search using primaryExtension.
        :param int cucm_server_id: Optional Server Id.
        :param int limit: Limit the returned search results. Limit applies to the number of results returned per server, not for the total number of results returned. In other words, searching globally across 3 UC servers with a limit of 5 could yield 15 results.
        :return: list[EndUserResultJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'username', 'email', 'first_name', 'last_name', 'primary_extension', 'cucm_server_id', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_end_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'username' in params:
            query_params.append(('username', params['username']))  # noqa: E501
        if 'email' in params:
            query_params.append(('email', params['email']))  # noqa: E501
        if 'first_name' in params:
            query_params.append(('firstName', params['first_name']))  # noqa: E501
        if 'last_name' in params:
            query_params.append(('lastName', params['last_name']))  # noqa: E501
        if 'primary_extension' in params:
            query_params.append(('primaryExtension', params['primary_extension']))  # noqa: E501
        if 'cucm_server_id' in params:
            query_params.append(('cucmServerId', params['cucm_server_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search/end-users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[EndUserResultJson]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
