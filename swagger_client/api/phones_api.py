# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PhonesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_mobility_identity(self, server_id, phone_uuid, uuid, **kwargs):  # noqa: E501
        """Delete a mobility identity on a phone (Jabber for iPhone or Android)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_mobility_identity(server_id, phone_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the mobility identity is located in (required)
        :param str phone_uuid: The id of the phone (required)
        :param str uuid: The id of the mobility identity (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_mobility_identity_with_http_info(server_id, phone_uuid, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_mobility_identity_with_http_info(server_id, phone_uuid, uuid, **kwargs)  # noqa: E501
            return data

    def delete_mobility_identity_with_http_info(self, server_id, phone_uuid, uuid, **kwargs):  # noqa: E501
        """Delete a mobility identity on a phone (Jabber for iPhone or Android)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_mobility_identity_with_http_info(server_id, phone_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the mobility identity is located in (required)
        :param str phone_uuid: The id of the phone (required)
        :param str uuid: The id of the mobility identity (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'phone_uuid', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_mobility_identity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `delete_mobility_identity`")  # noqa: E501
        # verify the required parameter 'phone_uuid' is set
        if ('phone_uuid' not in params or
                params['phone_uuid'] is None):
            raise ValueError("Missing the required parameter `phone_uuid` when calling `delete_mobility_identity`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `delete_mobility_identity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'phone_uuid' in params:
            path_params['phoneUuid'] = params['phone_uuid']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/phones/{phoneUuid}/mobility-identities/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_phone(self, server_id, uuid, **kwargs):  # noqa: E501
        """Delete an existing Phone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_phone(server_id, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the phone is located in (required)
        :param str uuid: The id of the phone (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_phone_with_http_info(server_id, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_phone_with_http_info(server_id, uuid, **kwargs)  # noqa: E501
            return data

    def delete_phone_with_http_info(self, server_id, uuid, **kwargs):  # noqa: E501
        """Delete an existing Phone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_phone_with_http_info(server_id, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the phone is located in (required)
        :param str uuid: The id of the phone (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `delete_phone`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `delete_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/phones/{uuid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_phone_no_audit(self, server_id, uuid, **kwargs):  # noqa: E501
        """This endpoint deletes a phone/device without leaving an audit trail to enhance performance. It is used for testing and lab use only. This endpoint should never be used in production.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_phone_no_audit(server_id, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the phone is located in (required)
        :param str uuid: The id of the phone (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_phone_no_audit_with_http_info(server_id, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_phone_no_audit_with_http_info(server_id, uuid, **kwargs)  # noqa: E501
            return data

    def delete_phone_no_audit_with_http_info(self, server_id, uuid, **kwargs):  # noqa: E501
        """This endpoint deletes a phone/device without leaving an audit trail to enhance performance. It is used for testing and lab use only. This endpoint should never be used in production.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_phone_no_audit_with_http_info(server_id, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the phone is located in (required)
        :param str uuid: The id of the phone (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_phone_no_audit" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `delete_phone_no_audit`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `delete_phone_no_audit`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/phones/{uuid}/no-audit', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mobility_identity(self, server_id, phone_uuid, uuid, **kwargs):  # noqa: E501
        """Get a particular mobility identity on a phone (Jabber for iPhone or Android)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mobility_identity(server_id, phone_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the mobility identity is located in (required)
        :param str phone_uuid: The id of the phone (required)
        :param str uuid: The id of the mobility identity (required)
        :return: MobilityIdentityJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_mobility_identity_with_http_info(server_id, phone_uuid, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mobility_identity_with_http_info(server_id, phone_uuid, uuid, **kwargs)  # noqa: E501
            return data

    def get_mobility_identity_with_http_info(self, server_id, phone_uuid, uuid, **kwargs):  # noqa: E501
        """Get a particular mobility identity on a phone (Jabber for iPhone or Android)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_mobility_identity_with_http_info(server_id, phone_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the mobility identity is located in (required)
        :param str phone_uuid: The id of the phone (required)
        :param str uuid: The id of the mobility identity (required)
        :return: MobilityIdentityJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'phone_uuid', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mobility_identity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `get_mobility_identity`")  # noqa: E501
        # verify the required parameter 'phone_uuid' is set
        if ('phone_uuid' not in params or
                params['phone_uuid'] is None):
            raise ValueError("Missing the required parameter `phone_uuid` when calling `get_mobility_identity`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_mobility_identity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'phone_uuid' in params:
            path_params['phoneUuid'] = params['phone_uuid']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/phones/{phoneUuid}/mobility-identities/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MobilityIdentityJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phone(self, server_id, uuid, **kwargs):  # noqa: E501
        """Get phone by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phone(server_id, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the phone is located in (required)
        :param str uuid: The id of the phone (required)
        :return: PhoneJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phone_with_http_info(server_id, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_phone_with_http_info(server_id, uuid, **kwargs)  # noqa: E501
            return data

    def get_phone_with_http_info(self, server_id, uuid, **kwargs):  # noqa: E501
        """Get phone by ID  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phone_with_http_info(server_id, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the phone is located in (required)
        :param str uuid: The id of the phone (required)
        :return: PhoneJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `get_phone`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `get_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/phones/{uuid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PhoneJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phone_status(self, server_id, phone_name, **kwargs):  # noqa: E501
        """Get the registration status of a phone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phone_status(server_id, phone_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the phone (required)
        :param str phone_name: The name of the phone (required)
        :return: PhoneStatusJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phone_status_with_http_info(server_id, phone_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_phone_status_with_http_info(server_id, phone_name, **kwargs)  # noqa: E501
            return data

    def get_phone_status_with_http_info(self, server_id, phone_name, **kwargs):  # noqa: E501
        """Get the registration status of a phone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phone_status_with_http_info(server_id, phone_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the phone (required)
        :param str phone_name: The name of the phone (required)
        :return: PhoneStatusJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'phone_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phone_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `get_phone_status`")  # noqa: E501
        # verify the required parameter 'phone_name' is set
        if ('phone_name' not in params or
                params['phone_name'] is None):
            raise ValueError("Missing the required parameter `phone_name` when calling `get_phone_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'phone_name' in params:
            path_params['phoneName'] = params['phone_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/phones/{phoneName}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PhoneStatusJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_mobility_identities(self, server_id, phone_uuid, **kwargs):  # noqa: E501
        """Get all mobility identities on a phone (Jabber for iPhone or Android)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_mobility_identities(server_id, phone_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the mobility identity is located in (required)
        :param str phone_uuid: The id of the phone (required)
        :return: list[MobilityIdentityJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_mobility_identities_with_http_info(server_id, phone_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.list_mobility_identities_with_http_info(server_id, phone_uuid, **kwargs)  # noqa: E501
            return data

    def list_mobility_identities_with_http_info(self, server_id, phone_uuid, **kwargs):  # noqa: E501
        """Get all mobility identities on a phone (Jabber for iPhone or Android)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_mobility_identities_with_http_info(server_id, phone_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the mobility identity is located in (required)
        :param str phone_uuid: The id of the phone (required)
        :return: list[MobilityIdentityJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'phone_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_mobility_identities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `list_mobility_identities`")  # noqa: E501
        # verify the required parameter 'phone_uuid' is set
        if ('phone_uuid' not in params or
                params['phone_uuid'] is None):
            raise ValueError("Missing the required parameter `phone_uuid` when calling `list_mobility_identities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'phone_uuid' in params:
            path_params['phoneUuid'] = params['phone_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/phones/{phoneUuid}/mobility-identities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[MobilityIdentityJson]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_mobility_identity(self, body, server_id, phone_uuid, **kwargs):  # noqa: E501
        """Create a new mobility identity on a phone (Jabber for iPhone or Android)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_mobility_identity(body, server_id, phone_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MobilityIdentityJson body: The details of the mobility identity to create (required)
        :param int server_id: The id of the server the mobility identity is located in (required)
        :param str phone_uuid: The id of the phone (required)
        :return: MobilityIdentityRefJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_mobility_identity_with_http_info(body, server_id, phone_uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.post_mobility_identity_with_http_info(body, server_id, phone_uuid, **kwargs)  # noqa: E501
            return data

    def post_mobility_identity_with_http_info(self, body, server_id, phone_uuid, **kwargs):  # noqa: E501
        """Create a new mobility identity on a phone (Jabber for iPhone or Android)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_mobility_identity_with_http_info(body, server_id, phone_uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MobilityIdentityJson body: The details of the mobility identity to create (required)
        :param int server_id: The id of the server the mobility identity is located in (required)
        :param str phone_uuid: The id of the phone (required)
        :return: MobilityIdentityRefJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'server_id', 'phone_uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_mobility_identity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `post_mobility_identity`")  # noqa: E501
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `post_mobility_identity`")  # noqa: E501
        # verify the required parameter 'phone_uuid' is set
        if ('phone_uuid' not in params or
                params['phone_uuid'] is None):
            raise ValueError("Missing the required parameter `phone_uuid` when calling `post_mobility_identity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'phone_uuid' in params:
            path_params['phoneUuid'] = params['phone_uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/phones/{phoneUuid}/mobility-identities', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MobilityIdentityRefJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_phone(self, server_id, **kwargs):  # noqa: E501
        """Create a new Phone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_phone(server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the phone is to be created in (required)
        :param PhoneJson body: The details of the phone to create
        :return: PhoneRefJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_phone_with_http_info(server_id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_phone_with_http_info(server_id, **kwargs)  # noqa: E501
            return data

    def post_phone_with_http_info(self, server_id, **kwargs):  # noqa: E501
        """Create a new Phone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_phone_with_http_info(server_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int server_id: The id of the server the phone is to be created in (required)
        :param PhoneJson body: The details of the phone to create
        :return: PhoneRefJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['server_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `post_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/phones', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PhoneRefJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_mobility_identity(self, body, server_id, phone_uuid, uuid, **kwargs):  # noqa: E501
        """Update a mobility identity on a phone (Jabber for iPhone or Android)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_mobility_identity(body, server_id, phone_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MobilityIdentityJson body: The updated details of the mobility identity (required)
        :param int server_id: The id of the server the mobility identity is located in (required)
        :param str phone_uuid: The id of the phone (required)
        :param str uuid: The id of the mobility identity (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_mobility_identity_with_http_info(body, server_id, phone_uuid, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.put_mobility_identity_with_http_info(body, server_id, phone_uuid, uuid, **kwargs)  # noqa: E501
            return data

    def put_mobility_identity_with_http_info(self, body, server_id, phone_uuid, uuid, **kwargs):  # noqa: E501
        """Update a mobility identity on a phone (Jabber for iPhone or Android)  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_mobility_identity_with_http_info(body, server_id, phone_uuid, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param MobilityIdentityJson body: The updated details of the mobility identity (required)
        :param int server_id: The id of the server the mobility identity is located in (required)
        :param str phone_uuid: The id of the phone (required)
        :param str uuid: The id of the mobility identity (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'server_id', 'phone_uuid', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_mobility_identity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_mobility_identity`")  # noqa: E501
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `put_mobility_identity`")  # noqa: E501
        # verify the required parameter 'phone_uuid' is set
        if ('phone_uuid' not in params or
                params['phone_uuid'] is None):
            raise ValueError("Missing the required parameter `phone_uuid` when calling `put_mobility_identity`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `put_mobility_identity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'phone_uuid' in params:
            path_params['phoneUuid'] = params['phone_uuid']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/phones/{phoneUuid}/mobility-identities/{uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def put_phone(self, body, server_id, uuid, **kwargs):  # noqa: E501
        """Update an existing Phone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_phone(body, server_id, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneJson body: The updated details of the phone (required)
        :param int server_id: The id of the server the phone is located in (required)
        :param str uuid: The id of the phone (required)
        :return: PhoneRefJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.put_phone_with_http_info(body, server_id, uuid, **kwargs)  # noqa: E501
        else:
            (data) = self.put_phone_with_http_info(body, server_id, uuid, **kwargs)  # noqa: E501
            return data

    def put_phone_with_http_info(self, body, server_id, uuid, **kwargs):  # noqa: E501
        """Update an existing Phone  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_phone_with_http_info(body, server_id, uuid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneJson body: The updated details of the phone (required)
        :param int server_id: The id of the server the phone is located in (required)
        :param str uuid: The id of the phone (required)
        :return: PhoneRefJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'server_id', 'uuid']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `put_phone`")  # noqa: E501
        # verify the required parameter 'server_id' is set
        if ('server_id' not in params or
                params['server_id'] is None):
            raise ValueError("Missing the required parameter `server_id` when calling `put_phone`")  # noqa: E501
        # verify the required parameter 'uuid' is set
        if ('uuid' not in params or
                params['uuid'] is None):
            raise ValueError("Missing the required parameter `uuid` when calling `put_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'server_id' in params:
            path_params['serverId'] = params['server_id']  # noqa: E501
        if 'uuid' in params:
            path_params['uuid'] = params['uuid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/mac/cucm-servers/{serverId}/phones/{uuid}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PhoneRefJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def search_phone(self, **kwargs):  # noqa: E501
        """Search phones by 'q', name, owner username, description, or extension.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_phone(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: Query to search all fields for
        :param str name: Search phone by matching name
        :param str owner_username: Search phone by matching owner name
        :param str description: Search phone by matching description
        :param str extension: Search phone by matching extension
        :param int cucm_server_id: Search phone by the id of the server they're located in
        :param int limit: Limit the returned search results. Limit applies to the number of results returned per server, not for the total number of results returned. In other words, searching globally across 3 UC servers with a limit of 5 could yield 15 results.
        :return: list[PhoneResultJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.search_phone_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.search_phone_with_http_info(**kwargs)  # noqa: E501
            return data

    def search_phone_with_http_info(self, **kwargs):  # noqa: E501
        """Search phones by 'q', name, owner username, description, or extension.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.search_phone_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str q: Query to search all fields for
        :param str name: Search phone by matching name
        :param str owner_username: Search phone by matching owner name
        :param str description: Search phone by matching description
        :param str extension: Search phone by matching extension
        :param int cucm_server_id: Search phone by the id of the server they're located in
        :param int limit: Limit the returned search results. Limit applies to the number of results returned per server, not for the total number of results returned. In other words, searching globally across 3 UC servers with a limit of 5 could yield 15 results.
        :return: list[PhoneResultJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'name', 'owner_username', 'description', 'extension', 'cucm_server_id', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method search_phone" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'name' in params:
            query_params.append(('name', params['name']))  # noqa: E501
        if 'owner_username' in params:
            query_params.append(('ownerUsername', params['owner_username']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501
        if 'extension' in params:
            query_params.append(('extension', params['extension']))  # noqa: E501
        if 'cucm_server_id' in params:
            query_params.append(('cucm-server-id', params['cucm_server_id']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/search/phones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[PhoneResultJson]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
