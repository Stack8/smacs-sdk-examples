# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CucmCDRApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cleanup_cucm_cdrs(self, **kwargs):  # noqa: E501
        """Removes all CDRs that are older than the retention period.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cleanup_cucm_cdrs(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.cleanup_cucm_cdrs_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.cleanup_cucm_cdrs_with_http_info(**kwargs)  # noqa: E501
            return data

    def cleanup_cucm_cdrs_with_http_info(self, **kwargs):  # noqa: E501
        """Removes all CDRs that are older than the retention period.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.cleanup_cucm_cdrs_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cleanup_cucm_cdrs" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/control/cucm-cdrs/cleanup', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cdr_count_over_retention(self, **kwargs):  # noqa: E501
        """Get the number of CDRs that are older than the retention period.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cdr_count_over_retention(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cdr_count_over_retention_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cdr_count_over_retention_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cdr_count_over_retention_with_http_info(self, **kwargs):  # noqa: E501
        """Get the number of CDRs that are older than the retention period.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cdr_count_over_retention_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: int
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cdr_count_over_retention" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/control/cucm-cdrs/over-retention', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='int',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_cdr_dump_file_import_status(self, **kwargs):  # noqa: E501
        """Get the status of the CDR dump file import job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cdr_dump_file_import_status(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: JobStatusJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_cdr_dump_file_import_status_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_cdr_dump_file_import_status_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_cdr_dump_file_import_status_with_http_info(self, **kwargs):  # noqa: E501
        """Get the status of the CDR dump file import job  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_cdr_dump_file_import_status_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: JobStatusJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cdr_dump_file_import_status" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/control/cucm-cdrs/imports/dump-files/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JobStatusJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_cdr_dump_file(self, **kwargs):  # noqa: E501
        """Import a CDR dump file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cdr_dump_file(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str upload:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_cdr_dump_file_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_cdr_dump_file_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_cdr_dump_file_with_http_info(self, **kwargs):  # noqa: E501
        """Import a CDR dump file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_cdr_dump_file_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str upload:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['upload']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_cdr_dump_file" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'upload' in params:
            local_var_files['upload'] = params['upload']  # noqa: E501

        body_params = None
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/control/cucm-cdrs/imports/dump-files', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_generate_dummy_cdr(self, start_date, end_date, call_records, unused_percentage, **kwargs):  # noqa: E501
        """Generate dummy CDRs file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_dummy_cdr(start_date, end_date, call_records, unused_percentage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date: Start date of Calls to generate (format YYYY-MM-DD) (required)
        :param str end_date: End date of Calls to generate (format: YYYY-MM-DD) (required)
        :param int call_records: Number of individual call records to generate (required)
        :param int unused_percentage: Percentage (0-100) of phones that will have 0 records (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_generate_dummy_cdr_with_http_info(start_date, end_date, call_records, unused_percentage, **kwargs)  # noqa: E501
        else:
            (data) = self.post_generate_dummy_cdr_with_http_info(start_date, end_date, call_records, unused_percentage, **kwargs)  # noqa: E501
            return data

    def post_generate_dummy_cdr_with_http_info(self, start_date, end_date, call_records, unused_percentage, **kwargs):  # noqa: E501
        """Generate dummy CDRs file  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_generate_dummy_cdr_with_http_info(start_date, end_date, call_records, unused_percentage, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str start_date: Start date of Calls to generate (format YYYY-MM-DD) (required)
        :param str end_date: End date of Calls to generate (format: YYYY-MM-DD) (required)
        :param int call_records: Number of individual call records to generate (required)
        :param int unused_percentage: Percentage (0-100) of phones that will have 0 records (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['start_date', 'end_date', 'call_records', 'unused_percentage']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_generate_dummy_cdr" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'start_date' is set
        if ('start_date' not in params or
                params['start_date'] is None):
            raise ValueError("Missing the required parameter `start_date` when calling `post_generate_dummy_cdr`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `post_generate_dummy_cdr`")  # noqa: E501
        # verify the required parameter 'call_records' is set
        if ('call_records' not in params or
                params['call_records'] is None):
            raise ValueError("Missing the required parameter `call_records` when calling `post_generate_dummy_cdr`")  # noqa: E501
        # verify the required parameter 'unused_percentage' is set
        if ('unused_percentage' not in params or
                params['unused_percentage'] is None):
            raise ValueError("Missing the required parameter `unused_percentage` when calling `post_generate_dummy_cdr`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'start_date' in params:
            query_params.append(('startDate', params['start_date']))  # noqa: E501
        if 'end_date' in params:
            query_params.append(('endDate', params['end_date']))  # noqa: E501
        if 'call_records' in params:
            query_params.append(('callRecords', params['call_records']))  # noqa: E501
        if 'unused_percentage' in params:
            query_params.append(('unusedPercentage', params['unused_percentage']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/octet-stream'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/control/cucm-cdrs/imports/dump-files/generate-dummy-cdrs', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def wipe_cucm_cdr_table(self, **kwargs):  # noqa: E501
        """Clear or partially clear the CUCM CDR data based on a time period. USE WITH CAUTION - IRREVERSIBLE!  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wipe_cucm_cdr_table(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WipeCucmCdrTableRequestJson body: Specify the date range on which to delete data. CDRs whose start time or end time are contained in the range will be deleted.

* `startTimestamp`: `UNIX timestamp in seconds` indicating the lower bound of the date range. If `null` is provided, no lower bound will be considered.
* `endTimestamp`: `UNIX timestamp in seconds` indicating the upper bound of the date range. If `null` is provided, no upper bound will be considered.

Note: passing `null` in both fields will delete all records.

`UNIX timestamp in seconds`  represents the number of seconds elapsed since January 1st, 1970 at UTC. (Ex: 1618578849 -> Fri Apr 16 2021 13:14:09 GMT+0000)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.wipe_cucm_cdr_table_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.wipe_cucm_cdr_table_with_http_info(**kwargs)  # noqa: E501
            return data

    def wipe_cucm_cdr_table_with_http_info(self, **kwargs):  # noqa: E501
        """Clear or partially clear the CUCM CDR data based on a time period. USE WITH CAUTION - IRREVERSIBLE!  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.wipe_cucm_cdr_table_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param WipeCucmCdrTableRequestJson body: Specify the date range on which to delete data. CDRs whose start time or end time are contained in the range will be deleted.

* `startTimestamp`: `UNIX timestamp in seconds` indicating the lower bound of the date range. If `null` is provided, no lower bound will be considered.
* `endTimestamp`: `UNIX timestamp in seconds` indicating the upper bound of the date range. If `null` is provided, no upper bound will be considered.

Note: passing `null` in both fields will delete all records.

`UNIX timestamp in seconds`  represents the number of seconds elapsed since January 1st, 1970 at UTC. (Ex: 1618578849 -> Fri Apr 16 2021 13:14:09 GMT+0000)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method wipe_cucm_cdr_table" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/control/cucm-cdrs/wipe-table', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
