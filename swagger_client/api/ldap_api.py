# coding: utf-8

"""
    SMACS REST API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 7.2.0-SNAPSHOT
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class LDAPApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_ldap_groups(self, **kwargs):  # noqa: E501
        """Get LDAP groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ldap_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search ldap groups matching the query
        :param int max: The max amount of groups to return, defaults to 100
        :return: LdapGroupsJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ldap_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_ldap_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_ldap_groups_with_http_info(self, **kwargs):  # noqa: E501
        """Get LDAP groups  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ldap_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query: Search ldap groups matching the query
        :param int max: The max amount of groups to return, defaults to 100
        :return: LdapGroupsJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query', 'max']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ldap_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query' in params:
            query_params.append(('query', params['query']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ldap/groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LdapGroupsJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ldap_members(self, **kwargs):  # noqa: E501
        """Get LDAP members of a particular group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ldap_members(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group: The ldap group name
        :param int max: The max amount of members to return, defaults to 25
        :return: LdapMembersJson
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ldap_members_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_ldap_members_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_ldap_members_with_http_info(self, **kwargs):  # noqa: E501
        """Get LDAP members of a particular group  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ldap_members_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str group: The ldap group name
        :param int max: The max amount of members to return, defaults to 25
        :return: LdapMembersJson
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['group', 'max']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ldap_members" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'group' in params:
            query_params.append(('group', params['group']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ldap/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='LdapMembersJson',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ldap_search_users(self, **kwargs):  # noqa: E501
        """Search users via raw LDAP filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ldap_search_users(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: The filter to search for
        :param int max: The max amount of results to return
        :return: list[LdapUserResultJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ldap_search_users_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_ldap_search_users_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_ldap_search_users_with_http_info(self, **kwargs):  # noqa: E501
        """Search users via raw LDAP filter  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ldap_search_users_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str filter: The filter to search for
        :param int max: The max amount of results to return
        :return: list[LdapUserResultJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['filter', 'max']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ldap_search_users" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ldap/search-users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LdapUserResultJson]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ldap_stats(self, **kwargs):  # noqa: E501
        """Get statistics about the LDAP pool  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ldap_stats(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ldap_stats_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_ldap_stats_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_ldap_stats_with_http_info(self, **kwargs):  # noqa: E501
        """Get statistics about the LDAP pool  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ldap_stats_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ldap_stats" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ldap/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ldap_users(self, attribute_name, attribute_value, max, **kwargs):  # noqa: E501
        """Find LDAP users by their matching attribute  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ldap_users(attribute_name, attribute_value, max, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_name: The attribute being searched for (required)
        :param str attribute_value: The value of the attribute (required)
        :param int max: The max amount of users to return, defaults to 1 (required)
        :return: list[LdapUserResultJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_ldap_users_with_http_info(attribute_name, attribute_value, max, **kwargs)  # noqa: E501
        else:
            (data) = self.get_ldap_users_with_http_info(attribute_name, attribute_value, max, **kwargs)  # noqa: E501
            return data

    def get_ldap_users_with_http_info(self, attribute_name, attribute_value, max, **kwargs):  # noqa: E501
        """Find LDAP users by their matching attribute  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ldap_users_with_http_info(attribute_name, attribute_value, max, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str attribute_name: The attribute being searched for (required)
        :param str attribute_value: The value of the attribute (required)
        :param int max: The max amount of users to return, defaults to 1 (required)
        :return: list[LdapUserResultJson]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['attribute_name', 'attribute_value', 'max']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ldap_users" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'attribute_name' is set
        if ('attribute_name' not in params or
                params['attribute_name'] is None):
            raise ValueError("Missing the required parameter `attribute_name` when calling `get_ldap_users`")  # noqa: E501
        # verify the required parameter 'attribute_value' is set
        if ('attribute_value' not in params or
                params['attribute_value'] is None):
            raise ValueError("Missing the required parameter `attribute_value` when calling `get_ldap_users`")  # noqa: E501
        # verify the required parameter 'max' is set
        if ('max' not in params or
                params['max'] is None):
            raise ValueError("Missing the required parameter `max` when calling `get_ldap_users`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'attribute_name' in params:
            query_params.append(('attributeName', params['attribute_name']))  # noqa: E501
        if 'attribute_value' in params:
            query_params.append(('attributeValue', params['attribute_value']))  # noqa: E501
        if 'max' in params:
            query_params.append(('max', params['max']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ldap/users', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[LdapUserResultJson]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_ldap_reload(self, **kwargs):  # noqa: E501
        """Reload the LDAP connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_ldap_reload(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_ldap_reload_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.post_ldap_reload_with_http_info(**kwargs)  # noqa: E501
            return data

    def post_ldap_reload_with_http_info(self, **kwargs):  # noqa: E501
        """Reload the LDAP connections  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_ldap_reload_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_ldap_reload" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['BasicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/ldap/reload', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
